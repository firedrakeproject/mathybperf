<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="219" onload="init(evt)" viewBox="0 0 1200 219" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="219.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="201" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="201" > </text>
<g id="frames">
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (22,104 us, 0.54%)</title><rect x="1181.3" y="71" width="6.3" height="15.0" fill="rgb(153.890098828496,153.890098828496,138.082786630403)" rx="2" ry="2" />
<text  x="1184.28" y="81.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,387 us, 0.18%)</title><rect x="1187.9" y="87" width="2.1" height="15.0" fill="rgb(134.334007617138,151.864372345184,151.864372345184)" rx="2" ry="2" />
<text  x="1190.89" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (12,105 us, 0.29%)</title><rect x="437.7" y="119" width="3.4" height="15.0" fill="rgb(132.513030115273,132.513030115273,153.067038086827)" rx="2" ry="2" />
<text  x="440.67" y="129.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,084,761 us, 26.31%)</title><rect x="124.3" y="87" width="310.4" height="15.0" fill="rgb(141.079930075869,141.079930075869,154.72514775662)" rx="2" ry="2" />
<text  x="127.28" y="97.5" >firedrake.extrusion_utils.make_extrude..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,047,608 us, 25.41%)</title><rect x="134.9" y="135" width="299.8" height="15.0" fill="rgb(152.811793963389,152.811793963389,132.85715536104)" rx="2" ry="2" />
<text  x="137.91" y="145.5" >pyop2.global_kernel.GlobalKernel.comp..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (479 us, 0.01%)</title><rect x="1178.4" y="87" width="0.2" height="15.0" fill="rgb(131.730802981645,151.189467439686,151.189467439686)" rx="2" ry="2" />
<text  x="1181.42" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,179 us, 0.10%)</title><rect x="1187.9" y="119" width="1.2" height="15.0" fill="rgb(151.257857276402,151.257857276402,125.326539108719)" rx="2" ry="2" />
<text  x="1190.89" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,883 us, 0.07%)</title><rect x="1180.5" y="71" width="0.8" height="15.0" fill="rgb(132.521133061961,92.710403471274,132.521133061961)" rx="2" ry="2" />
<text  x="1183.46" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,358 us, 0.20%)</title><rect x="1187.6" y="71" width="2.4" height="15.0" fill="rgb(138.501850662232,161.174117334055,138.501850662232)" rx="2" ry="2" />
<text  x="1190.61" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,799 us, 0.16%)</title><rect x="434.7" y="135" width="2.0" height="15.0" fill="rgb(153.56860866802,124.025999788154,124.025999788154)" rx="2" ry="2" />
<text  x="437.72" y="145.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (896 us, 0.02%)</title><rect x="1187.4" y="119" width="0.2" height="15.0" fill="rgb(153.375174537863,153.375174537863,135.587384298874)" rx="2" ry="2" />
<text  x="1190.35" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (615 us, 0.01%)</title><rect x="437.4" y="87" width="0.1" height="15.0" fill="rgb(149.610104574345,136.500892971758,149.610104574345)" rx="2" ry="2" />
<text  x="440.37" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (1,086 us, 0.03%)</title><rect x="1180.7" y="103" width="0.3" height="15.0" fill="rgb(135.25987518487,161.701880783858,135.25987518487)" rx="2" ry="2" />
<text  x="1183.73" y="113.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,571,951 us, 62.38%)</title><rect x="442.2" y="71" width="736.0" height="15.0" fill="rgb(153.077419662217,120.260217410327,120.260217410327)" rx="2" ry="2" />
<text  x="445.21" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>all (4,123,337 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(153.68308850387,153.68308850387,137.079582749524)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,635 us, 0.16%)</title><rect x="1178.6" y="103" width="1.9" height="15.0" fill="rgb(136.551371689699,161.491637166793,136.551371689699)" rx="2" ry="2" />
<text  x="1181.56" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,799 us, 0.16%)</title><rect x="434.7" y="103" width="2.0" height="15.0" fill="rgb(155.177629443818,136.361825735935,136.361825735935)" rx="2" ry="2" />
<text  x="437.72" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (848 us, 0.02%)</title><rect x="1180.2" y="167" width="0.3" height="15.0" fill="rgb(137.415205275236,137.415205275236,154.015846182304)" rx="2" ry="2" />
<text  x="1183.21" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,635 us, 0.16%)</title><rect x="1178.6" y="87" width="1.9" height="15.0" fill="rgb(138.779898272189,138.779898272189,154.279980310746)" rx="2" ry="2" />
<text  x="1181.56" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (896 us, 0.02%)</title><rect x="1187.4" y="103" width="0.2" height="15.0" fill="rgb(126.743136041832,149.896368603438,149.896368603438)" rx="2" ry="2" />
<text  x="1190.35" y="113.5" ></text>
</g>
<g >
<title>Mesh: numbering (974 us, 0.02%)</title><rect x="441.5" y="87" width="0.3" height="15.0" fill="rgb(142.153383583288,153.891617966038,153.891617966038)" rx="2" ry="2" />
<text  x="444.55" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,635 us, 0.16%)</title><rect x="1178.6" y="119" width="1.9" height="15.0" fill="rgb(152.629700620282,116.827704755496,116.827704755496)" rx="2" ry="2" />
<text  x="1181.56" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,044 us, 0.24%)</title><rect x="1184.5" y="103" width="2.9" height="15.0" fill="rgb(136.815791909652,136.815791909652,153.899830692191)" rx="2" ry="2" />
<text  x="1187.48" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (663 us, 0.02%)</title><rect x="441.4" y="87" width="0.1" height="15.0" fill="rgb(139.014538687951,109.349755387874,139.014538687951)" rx="2" ry="2" />
<text  x="444.36" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,208 us, 0.08%)</title><rect x="1189.1" y="119" width="0.9" height="15.0" fill="rgb(128.964460165028,150.472267450193,150.472267450193)" rx="2" ry="2" />
<text  x="1192.08" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,103 us, 0.03%)</title><rect x="1178.2" y="71" width="0.4" height="15.0" fill="rgb(152.60797498772,116.661141572518,116.661141572518)" rx="2" ry="2" />
<text  x="1181.24" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (629 us, 0.02%)</title><rect x="436.5" y="167" width="0.2" height="15.0" fill="rgb(120.410566455913,148.254591303385,148.254591303385)" rx="2" ry="2" />
<text  x="439.48" y="177.5" ></text>
</g>
<g >
<title>CreateMesh (625 us, 0.02%)</title><rect x="1180.9" y="119" width="0.1" height="15.0" fill="rgb(151.407209673053,151.407209673053,126.050323800181)" rx="2" ry="2" />
<text  x="1183.86" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,635 us, 0.16%)</title><rect x="1178.6" y="135" width="1.9" height="15.0" fill="rgb(150.289595885598,159.255182065135,150.289595885598)" rx="2" ry="2" />
<text  x="1181.56" y="145.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,883 us, 0.07%)</title><rect x="1180.5" y="87" width="0.8" height="15.0" fill="rgb(122.204959142666,148.719804222173,148.719804222173)" rx="2" ry="2" />
<text  x="1183.46" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (816 us, 0.02%)</title><rect x="436.7" y="87" width="0.2" height="15.0" fill="rgb(139.099744326546,153.09993371429,153.09993371429)" rx="2" ry="2" />
<text  x="439.66" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,635 us, 0.16%)</title><rect x="1178.6" y="71" width="1.9" height="15.0" fill="rgb(146.18385796689,154.936555769194,154.936555769194)" rx="2" ry="2" />
<text  x="1181.56" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,884 us, 0.07%)</title><rect x="1179.6" y="151" width="0.9" height="15.0" fill="rgb(145.440862303012,154.743927263744,154.743927263744)" rx="2" ry="2" />
<text  x="1182.63" y="161.5" ></text>
</g>
<g >
<title>firedrake (4,123,337 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(156.120003770447,143.586695573424,143.586695573424)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (854 us, 0.02%)</title><rect x="1181.0" y="103" width="0.3" height="15.0" fill="rgb(115.868104616637,115.868104616637,149.84543960322)" rx="2" ry="2" />
<text  x="1184.04" y="113.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,387 us, 0.18%)</title><rect x="1187.9" y="103" width="2.1" height="15.0" fill="rgb(138.474704762719,161.178536433976,138.474704762719)" rx="2" ry="2" />
<text  x="1190.89" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,048,870 us, 25.44%)</title><rect x="134.6" y="103" width="300.1" height="15.0" fill="rgb(150.1821217251,150.1821217251,120.113359129328)" rx="2" ry="2" />
<text  x="137.55" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,164 us, 0.27%)</title><rect x="1181.3" y="87" width="3.2" height="15.0" fill="rgb(143.30359250744,154.189820279707,154.189820279707)" rx="2" ry="2" />
<text  x="1184.28" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,799 us, 0.16%)</title><rect x="434.7" y="119" width="2.0" height="15.0" fill="rgb(151.040567414548,151.040567414548,124.273519008964)" rx="2" ry="2" />
<text  x="437.72" y="129.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,093,988 us, 26.53%)</title><rect x="124.1" y="71" width="313.1" height="15.0" fill="rgb(154.307680449539,129.692216779798,129.692216779798)" rx="2" ry="2" />
<text  x="127.11" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>CreateMesh (2,412 us, 0.06%)</title><rect x="441.1" y="71" width="0.7" height="15.0" fill="rgb(108.484689947978,145.16269739392,145.16269739392)" rx="2" ry="2" />
<text  x="444.14" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,003 us, 0.02%)</title><rect x="436.9" y="87" width="0.3" height="15.0" fill="rgb(108.166378353634,145.080172165757,145.080172165757)" rx="2" ry="2" />
<text  x="439.89" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,821 us, 0.34%)</title><rect x="437.2" y="71" width="3.9" height="15.0" fill="rgb(105.431987504032,144.371256019564,144.371256019564)" rx="2" ry="2" />
<text  x="440.18" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (12,564 us, 0.30%)</title><rect x="437.5" y="87" width="3.6" height="15.0" fill="rgb(155.272370225764,155.272370225764,144.781486478703)" rx="2" ry="2" />
<text  x="440.54" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,940 us, 0.27%)</title><rect x="1184.5" y="87" width="3.1" height="15.0" fill="rgb(138.366254313678,161.196191158239,138.366254313678)" rx="2" ry="2" />
<text  x="1187.48" y="97.5" ></text>
</g>
<g >
<title>PetscBarrier (1,347 us, 0.03%)</title><rect x="441.8" y="71" width="0.4" height="15.0" fill="rgb(114.558871303276,146.737485152701,146.737485152701)" rx="2" ry="2" />
<text  x="444.83" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,799 us, 0.16%)</title><rect x="434.7" y="151" width="2.0" height="15.0" fill="rgb(152.18690826976,113.432963401492,113.432963401492)" rx="2" ry="2" />
<text  x="437.72" y="161.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,048,277 us, 25.42%)</title><rect x="134.7" y="119" width="300.0" height="15.0" fill="rgb(152.813880080985,152.813880080985,132.867265007852)" rx="2" ry="2" />
<text  x="137.72" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_unifo..</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (12,105 us, 0.29%)</title><rect x="437.7" y="103" width="3.4" height="15.0" fill="rgb(152.72433151481,152.72433151481,132.433298879466)" rx="2" ry="2" />
<text  x="440.67" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,799 us, 0.16%)</title><rect x="434.7" y="87" width="2.0" height="15.0" fill="rgb(153.903637689609,126.594555620336,126.594555620336)" rx="2" ry="2" />
<text  x="437.72" y="97.5" ></text>
</g>
</g>
</svg>
