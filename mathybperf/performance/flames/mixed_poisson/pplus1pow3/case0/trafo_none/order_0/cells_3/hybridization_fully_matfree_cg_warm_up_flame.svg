<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="219" onload="init(evt)" viewBox="0 0 1200 219" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="219.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="201" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="201" > </text>
<g id="frames">
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (945,957 us, 32.36%)</title><rect x="84.1" y="87" width="381.8" height="15.0" fill="rgb(144.396413315372,144.396413315372,155.367047738459)" rx="2" ry="2" />
<text  x="87.09" y="97.5" >firedrake.extrusion_utils.make_extruded_coords</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (912,492 us, 31.21%)</title><rect x="97.6" y="119" width="368.3" height="15.0" fill="rgb(132.115364885002,132.115364885002,152.990070622904)" rx="2" ry="2" />
<text  x="100.60" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_uniform_extrus..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,100 us, 0.14%)</title><rect x="1186.9" y="119" width="1.6" height="15.0" fill="rgb(146.1880994814,154.937655421104,154.937655421104)" rx="2" ry="2" />
<text  x="1189.87" y="129.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,124 us, 0.28%)</title><rect x="1186.7" y="87" width="3.3" height="15.0" fill="rgb(154.35059840289,130.021254422159,130.021254422159)" rx="2" ry="2" />
<text  x="1189.72" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,156 us, 0.04%)</title><rect x="1173.5" y="71" width="0.4" height="15.0" fill="rgb(146.980557351044,159.793862756807,146.980557351044)" rx="2" ry="2" />
<text  x="1176.47" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (12,409 us, 0.42%)</title><rect x="470.2" y="87" width="5.1" height="15.0" fill="rgb(152.84755615426,152.84755615426,133.030464439873)" rx="2" ry="2" />
<text  x="473.25" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (5,644 us, 0.19%)</title><rect x="1173.9" y="119" width="2.3" height="15.0" fill="rgb(155.566512257779,139.343260642974,139.343260642974)" rx="2" ry="2" />
<text  x="1176.93" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (5,644 us, 0.19%)</title><rect x="1173.9" y="103" width="2.3" height="15.0" fill="rgb(152.18510501711,143.099331606346,152.18510501711)" rx="2" ry="2" />
<text  x="1176.93" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,017 us, 0.03%)</title><rect x="469.4" y="87" width="0.4" height="15.0" fill="rgb(134.95963190187,134.95963190187,153.540573916491)" rx="2" ry="2" />
<text  x="472.38" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (5,644 us, 0.19%)</title><rect x="1173.9" y="71" width="2.3" height="15.0" fill="rgb(155.498074636927,138.81857221644,138.81857221644)" rx="2" ry="2" />
<text  x="1176.93" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,548 us, 0.46%)</title><rect x="469.8" y="71" width="5.5" height="15.0" fill="rgb(142.359379698201,142.359379698201,154.972783167394)" rx="2" ry="2" />
<text  x="472.79" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (455 us, 0.02%)</title><rect x="475.5" y="87" width="0.2" height="15.0" fill="rgb(153.558358244416,123.947413207188,123.947413207188)" rx="2" ry="2" />
<text  x="478.51" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (563 us, 0.02%)</title><rect x="1176.8" y="103" width="0.2" height="15.0" fill="rgb(152.576206142538,116.417580426124,116.417580426124)" rx="2" ry="2" />
<text  x="1179.80" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,925 us, 0.41%)</title><rect x="470.4" y="119" width="4.9" height="15.0" fill="rgb(153.002508242169,119.685896523298,119.685896523298)" rx="2" ry="2" />
<text  x="473.44" y="129.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (911,813 us, 31.19%)</title><rect x="97.9" y="135" width="368.0" height="15.0" fill="rgb(122.842657335197,122.842657335197,151.195353032619)" rx="2" ry="2" />
<text  x="100.87" y="145.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,809 us, 0.23%)</title><rect x="466.3" y="151" width="2.8" height="15.0" fill="rgb(111.612368808159,145.973577098412,145.973577098412)" rx="2" ry="2" />
<text  x="469.31" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (515 us, 0.02%)</title><rect x="470.0" y="87" width="0.2" height="15.0" fill="rgb(154.051920060837,154.051920060837,138.866997217902)" rx="2" ry="2" />
<text  x="473.04" y="97.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (8,124 us, 0.28%)</title><rect x="1186.7" y="103" width="3.3" height="15.0" fill="rgb(145.649215228961,160.010592869704,145.649215228961)" rx="2" ry="2" />
<text  x="1189.72" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,077 us, 0.38%)</title><rect x="1177.2" y="87" width="4.4" height="15.0" fill="rgb(121.341285792822,148.49588890925,148.49588890925)" rx="2" ry="2" />
<text  x="1180.17" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,173 us, 0.25%)</title><rect x="466.2" y="119" width="2.9" height="15.0" fill="rgb(120.802133352312,120.802133352312,150.800412906899)" rx="2" ry="2" />
<text  x="469.17" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (639 us, 0.02%)</title><rect x="468.8" y="167" width="0.3" height="15.0" fill="rgb(132.502958225873,132.502958225873,153.065088688879)" rx="2" ry="2" />
<text  x="471.80" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (692 us, 0.02%)</title><rect x="1175.9" y="167" width="0.3" height="15.0" fill="rgb(151.29926295923,151.29926295923,125.527197417806)" rx="2" ry="2" />
<text  x="1178.93" y="177.5" ></text>
</g>
<g >
<title>Mesh: numbering (778 us, 0.03%)</title><rect x="475.7" y="87" width="0.3" height="15.0" fill="rgb(154.838307663563,133.760358753984,133.760358753984)" rx="2" ry="2" />
<text  x="478.70" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (1,863 us, 0.06%)</title><rect x="475.3" y="71" width="0.7" height="15.0" fill="rgb(156.444935228097,146.077836748741,146.077836748741)" rx="2" ry="2" />
<text  x="478.26" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (5,644 us, 0.19%)</title><rect x="1173.9" y="87" width="2.3" height="15.0" fill="rgb(143.815098369823,160.30917003282,143.815098369823)" rx="2" ry="2" />
<text  x="1176.93" y="97.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,034 us, 0.07%)</title><rect x="1176.2" y="87" width="0.8" height="15.0" fill="rgb(149.183685308818,149.183685308818,115.274782650423)" rx="2" ry="2" />
<text  x="1179.21" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (776 us, 0.03%)</title><rect x="1176.5" y="103" width="0.3" height="15.0" fill="rgb(143.349145823768,160.385022772875,143.349145823768)" rx="2" ry="2" />
<text  x="1179.49" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,875 us, 0.27%)</title><rect x="465.9" y="87" width="3.2" height="15.0" fill="rgb(155.712184411758,155.712184411758,146.91289368775)" rx="2" ry="2" />
<text  x="468.88" y="97.5" ></text>
</g>
<g >
<title>firedrake.__init__ (1,727,186 us, 59.08%)</title><rect x="476.4" y="71" width="697.1" height="15.0" fill="rgb(122.974241206588,148.919247720227,148.919247720227)" rx="2" ry="2" />
<text  x="479.37" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (22,994 us, 0.79%)</title><rect x="1177.0" y="71" width="9.3" height="15.0" fill="rgb(152.510785154056,115.916019514427,115.916019514427)" rx="2" ry="2" />
<text  x="1180.03" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (444 us, 0.02%)</title><rect x="1176.6" y="119" width="0.2" height="15.0" fill="rgb(154.932489663734,154.932489663734,143.134372985789)" rx="2" ry="2" />
<text  x="1179.63" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,374 us, 0.05%)</title><rect x="1185.8" y="103" width="0.5" height="15.0" fill="rgb(148.023345446366,159.624106555243,148.023345446366)" rx="2" ry="2" />
<text  x="1188.76" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,925 us, 0.41%)</title><rect x="470.4" y="103" width="4.9" height="15.0" fill="rgb(140.665131417446,153.505774811931,153.505774811931)" rx="2" ry="2" />
<text  x="473.44" y="113.5" ></text>
</g>
<g >
<title>all (2,923,654 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(140.977352644695,160.771128639236,140.977352644695)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (402 us, 0.01%)</title><rect x="1173.8" y="87" width="0.1" height="15.0" fill="rgb(153.204499375888,121.234495215142,121.234495215142)" rx="2" ry="2" />
<text  x="1176.77" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (790 us, 0.03%)</title><rect x="469.1" y="87" width="0.3" height="15.0" fill="rgb(132.164774408521,151.301978550357,151.301978550357)" rx="2" ry="2" />
<text  x="472.06" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,855 us, 0.34%)</title><rect x="1181.8" y="103" width="4.0" height="15.0" fill="rgb(149.537882699794,159.377553979103,149.537882699794)" rx="2" ry="2" />
<text  x="1184.78" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,809 us, 0.23%)</title><rect x="466.3" y="135" width="2.8" height="15.0" fill="rgb(133.054596529408,94.077403606608,133.054596529408)" rx="2" ry="2" />
<text  x="469.31" y="145.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,034 us, 0.07%)</title><rect x="1176.2" y="71" width="0.8" height="15.0" fill="rgb(118.03407593775,147.638464132009,147.638464132009)" rx="2" ry="2" />
<text  x="1179.21" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (402 us, 0.01%)</title><rect x="1173.8" y="103" width="0.1" height="15.0" fill="rgb(155.005866236336,135.044974478573,135.044974478573)" rx="2" ry="2" />
<text  x="1176.77" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (7,525 us, 0.26%)</title><rect x="466.0" y="103" width="3.1" height="15.0" fill="rgb(153.319677861556,153.319677861556,135.318438867543)" rx="2" ry="2" />
<text  x="469.02" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (913,099 us, 31.23%)</title><rect x="97.4" y="103" width="368.5" height="15.0" fill="rgb(140.124924019268,140.124924019268,154.540307874697)" rx="2" ry="2" />
<text  x="100.35" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,392 us, 0.08%)</title><rect x="1175.2" y="151" width="1.0" height="15.0" fill="rgb(111.895158844661,111.895158844661,149.076482357031)" rx="2" ry="2" />
<text  x="1178.25" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,645 us, 0.12%)</title><rect x="1188.5" y="119" width="1.5" height="15.0" fill="rgb(152.425255863267,115.260294951715,115.260294951715)" rx="2" ry="2" />
<text  x="1191.53" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (5,644 us, 0.19%)</title><rect x="1173.9" y="135" width="2.3" height="15.0" fill="rgb(147.632803733438,159.687683113161,147.632803733438)" rx="2" ry="2" />
<text  x="1176.93" y="145.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (9,137 us, 0.31%)</title><rect x="1186.3" y="71" width="3.7" height="15.0" fill="rgb(128.680473175279,162.77294622728,128.680473175279)" rx="2" ry="2" />
<text  x="1189.31" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,577 us, 0.40%)</title><rect x="1181.6" y="87" width="4.7" height="15.0" fill="rgb(151.92097405826,151.92097405826,128.540105051568)" rx="2" ry="2" />
<text  x="1184.64" y="97.5" ></text>
</g>
<g >
<title>PetscBarrier (884 us, 0.03%)</title><rect x="476.0" y="71" width="0.4" height="15.0" fill="rgb(152.916498472832,119.026488291715,119.026488291715)" rx="2" ry="2" />
<text  x="479.01" y="81.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (991 us, 0.03%)</title><rect x="1185.9" y="119" width="0.4" height="15.0" fill="rgb(153.226158333842,121.400547226122,121.400547226122)" rx="2" ry="2" />
<text  x="1188.91" y="129.5" ></text>
</g>
<g >
<title>firedrake (2,923,654 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(147.098576863778,155.173705112831,155.173705112831)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>CreateExtMesh (956,236 us, 32.71%)</title><rect x="83.8" y="71" width="386.0" height="15.0" fill="rgb(143.659073717289,154.281982074853,154.281982074853)" rx="2" ry="2" />
<text  x="86.85" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (402 us, 0.01%)</title><rect x="1173.8" y="119" width="0.1" height="15.0" fill="rgb(151.944662932321,142.483198764071,151.944662932321)" rx="2" ry="2" />
<text  x="1176.77" y="129.5" ></text>
</g>
</g>
</svg>
