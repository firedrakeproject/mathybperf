<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="219" onload="init(evt)" viewBox="0 0 1200 219" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="219.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="201" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="201" > </text>
<g id="frames">
<g >
<title>CreateFunctionSpace (6,724 us, 0.34%)</title><rect x="159.1" y="103" width="3.9" height="15.0" fill="rgb(123.143329574032,123.143329574032,151.25354765949)" rx="2" ry="2" />
<text  x="162.07" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (7,875 us, 0.39%)</title><rect x="1185.4" y="71" width="4.6" height="15.0" fill="rgb(139.823451539698,160.958973005165,139.823451539698)" rx="2" ry="2" />
<text  x="1188.36" y="81.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,192 us, 0.11%)</title><rect x="1171.9" y="87" width="1.2" height="15.0" fill="rgb(133.695681040415,161.956517039933,133.695681040415)" rx="2" ry="2" />
<text  x="1174.86" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (5,531 us, 0.28%)</title><rect x="1168.6" y="87" width="3.3" height="15.0" fill="rgb(123.304152070826,149.00478016651,149.00478016651)" rx="2" ry="2" />
<text  x="1171.60" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (39,060 us, 1.95%)</title><rect x="135.9" y="103" width="23.0" height="15.0" fill="rgb(151.400460946636,151.400460946636,126.017618433698)" rx="2" ry="2" />
<text  x="138.89" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (20,753 us, 1.04%)</title><rect x="1173.1" y="71" width="12.3" height="15.0" fill="rgb(121.903924438447,148.641758187746,148.641758187746)" rx="2" ry="2" />
<text  x="1176.15" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (1,813 us, 0.09%)</title><rect x="171.8" y="71" width="1.0" height="15.0" fill="rgb(121.662590613286,148.579190159,148.579190159)" rx="2" ry="2" />
<text  x="174.77" y="81.5" ></text>
</g>
<g >
<title>all (2,004,372 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(154.176129523272,128.683659678422,128.683659678422)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>PetscBarrier (949 us, 0.05%)</title><rect x="172.8" y="71" width="0.6" height="15.0" fill="rgb(154.753817060451,154.753817060451,142.268498062188)" rx="2" ry="2" />
<text  x="175.84" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (586 us, 0.03%)</title><rect x="162.7" y="167" width="0.3" height="15.0" fill="rgb(142.570411334268,118.461679044061,142.570411334268)" rx="2" ry="2" />
<text  x="165.68" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (5,531 us, 0.28%)</title><rect x="1168.6" y="103" width="3.3" height="15.0" fill="rgb(133.273907675034,162.025177820343,133.273907675034)" rx="2" ry="2" />
<text  x="1171.60" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,777 us, 0.59%)</title><rect x="164.8" y="119" width="7.0" height="15.0" fill="rgb(113.060242942656,113.060242942656,149.30198250503)" rx="2" ry="2" />
<text  x="167.84" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (677 us, 0.03%)</title><rect x="1171.5" y="167" width="0.4" height="15.0" fill="rgb(154.960808437235,134.699531352135,134.699531352135)" rx="2" ry="2" />
<text  x="1174.46" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (739 us, 0.04%)</title><rect x="163.0" y="87" width="0.5" height="15.0" fill="rgb(142.163667490328,142.163667490328,154.934903385225)" rx="2" ry="2" />
<text  x="166.03" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (829 us, 0.04%)</title><rect x="1172.3" y="103" width="0.5" height="15.0" fill="rgb(131.63503468467,162.291971097844,131.63503468467)" rx="2" ry="2" />
<text  x="1175.32" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (5,280 us, 0.26%)</title><rect x="1168.7" y="119" width="3.2" height="15.0" fill="rgb(154.564189766289,131.658788208214,131.658788208214)" rx="2" ry="2" />
<text  x="1171.75" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (38,581 us, 1.92%)</title><rect x="136.2" y="119" width="22.7" height="15.0" fill="rgb(153.688319732434,124.943784615329,124.943784615329)" rx="2" ry="2" />
<text  x="139.17" y="129.5" ></text>
</g>
<g >
<title>DMPlexInterp (251 us, 0.01%)</title><rect x="1173.0" y="119" width="0.1" height="15.0" fill="rgb(115.177948209824,115.177948209824,149.711860943837)" rx="2" ry="2" />
<text  x="1176.00" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,777 us, 0.59%)</title><rect x="164.8" y="103" width="7.0" height="15.0" fill="rgb(147.097914175424,147.097914175424,155.889918872663)" rx="2" ry="2" />
<text  x="167.84" y="113.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,025 us, 0.35%)</title><rect x="1185.9" y="87" width="4.1" height="15.0" fill="rgb(153.806282047863,153.806282047863,137.676597616566)" rx="2" ry="2" />
<text  x="1188.86" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (434 us, 0.02%)</title><rect x="172.1" y="87" width="0.3" height="15.0" fill="rgb(133.084374995562,133.084374995562,153.177620966883)" rx="2" ry="2" />
<text  x="175.13" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,179 us, 0.31%)</title><rect x="159.4" y="135" width="3.6" height="15.0" fill="rgb(119.499298940822,148.018336762435,148.018336762435)" rx="2" ry="2" />
<text  x="162.39" y="145.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (583 us, 0.03%)</title><rect x="1172.8" y="103" width="0.3" height="15.0" fill="rgb(139.497870946881,161.011974497019,139.497870946881)" rx="2" ry="2" />
<text  x="1175.80" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (323 us, 0.02%)</title><rect x="1168.3" y="87" width="0.2" height="15.0" fill="rgb(156.522078134286,146.66926569619,146.66926569619)" rx="2" ry="2" />
<text  x="1171.27" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (323 us, 0.02%)</title><rect x="1168.3" y="119" width="0.2" height="15.0" fill="rgb(140.590060635631,153.486312016645,153.486312016645)" rx="2" ry="2" />
<text  x="1171.27" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,296 us, 0.21%)</title><rect x="1186.0" y="119" width="2.6" height="15.0" fill="rgb(142.940537303737,154.095694856524,154.095694856524)" rx="2" ry="2" />
<text  x="1189.05" y="129.5" ></text>
</g>
<g >
<title>firedrake.function.Function.__init__ (277 us, 0.01%)</title><rect x="1167.8" y="71" width="0.1" height="15.0" fill="rgb(107.261507421029,144.845575998044,144.845575998044)" rx="2" ry="2" />
<text  x="1170.76" y="81.5" ></text>
</g>
<g >
<title>firedrake (2,004,372 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(109.271015364713,109.271015364713,148.568583618977)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,460 us, 0.32%)</title><rect x="159.2" y="119" width="3.8" height="15.0" fill="rgb(126.89762274366,126.89762274366,151.98018504716)" rx="2" ry="2" />
<text  x="162.22" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,192 us, 0.11%)</title><rect x="1171.9" y="71" width="1.2" height="15.0" fill="rgb(106.954014666836,144.765855654365,144.765855654365)" rx="2" ry="2" />
<text  x="1174.86" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (323 us, 0.02%)</title><rect x="1168.3" y="103" width="0.2" height="15.0" fill="rgb(107.457904712186,144.896493814271,144.896493814271)" rx="2" ry="2" />
<text  x="1171.27" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,189 us, 0.66%)</title><rect x="164.0" y="71" width="7.8" height="15.0" fill="rgb(113.865524834325,146.557728660751,146.557728660751)" rx="2" ry="2" />
<text  x="167.00" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (38,009 us, 1.90%)</title><rect x="136.5" y="135" width="22.4" height="15.0" fill="rgb(154.276383565142,129.452273999421,129.452273999421)" rx="2" ry="2" />
<text  x="139.51" y="145.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,306 us, 0.51%)</title><rect x="1179.3" y="87" width="6.1" height="15.0" fill="rgb(120.549100606241,148.290507564581,148.290507564581)" rx="2" ry="2" />
<text  x="1182.30" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (264 us, 0.01%)</title><rect x="159.1" y="119" width="0.1" height="15.0" fill="rgb(152.798305642673,118.120343260491,118.120343260491)" rx="2" ry="2" />
<text  x="162.07" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (10,164 us, 0.51%)</title><rect x="1173.3" y="87" width="6.0" height="15.0" fill="rgb(119.201192395129,119.201192395129,150.490553366799)" rx="2" ry="2" />
<text  x="1176.31" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (12,181 us, 0.61%)</title><rect x="164.6" y="87" width="7.2" height="15.0" fill="rgb(130.101427524283,130.101427524283,152.600276295023)" rx="2" ry="2" />
<text  x="167.60" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (5,760 us, 0.29%)</title><rect x="1168.5" y="71" width="3.4" height="15.0" fill="rgb(113.827439558687,113.827439558687,149.450472172649)" rx="2" ry="2" />
<text  x="1171.46" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,422 us, 0.12%)</title><rect x="1188.6" y="119" width="1.4" height="15.0" fill="rgb(154.475684310581,154.475684310581,140.920623966664)" rx="2" ry="2" />
<text  x="1191.57" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,179 us, 0.31%)</title><rect x="159.4" y="151" width="3.6" height="15.0" fill="rgb(130.94143177912,162.404883198748,130.94143177912)" rx="2" ry="2" />
<text  x="162.39" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,092 us, 0.05%)</title><rect x="1184.7" y="103" width="0.7" height="15.0" fill="rgb(140.51368311161,140.51368311161,154.615551569989)" rx="2" ry="2" />
<text  x="1187.72" y="113.5" ></text>
</g>
<g >
<title>CreateExtMesh (80,176 us, 4.00%)</title><rect x="116.8" y="71" width="47.2" height="15.0" fill="rgb(140.657687047369,113.560323058883,140.657687047369)" rx="2" ry="2" />
<text  x="119.80" y="81.5" >Crea..</text>
</g>
<g >
<title>Mesh: numbering (773 us, 0.04%)</title><rect x="172.4" y="87" width="0.4" height="15.0" fill="rgb(148.079730200138,148.079730200138,109.924846354516)" rx="2" ry="2" />
<text  x="175.38" y="97.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,025 us, 0.35%)</title><rect x="1185.9" y="103" width="4.1" height="15.0" fill="rgb(153.037312570833,153.037312570833,133.950053227885)" rx="2" ry="2" />
<text  x="1188.86" y="113.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (782 us, 0.04%)</title><rect x="1184.9" y="119" width="0.5" height="15.0" fill="rgb(150.008382804753,150.008382804753,119.271393592267)" rx="2" ry="2" />
<text  x="1187.90" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,268 us, 0.11%)</title><rect x="1170.5" y="151" width="1.4" height="15.0" fill="rgb(133.94067869996,133.94067869996,153.343357167734)" rx="2" ry="2" />
<text  x="1173.52" y="161.5" ></text>
</g>
<g >
<title>firedrake.__init__ (1,689,053 us, 84.27%)</title><rect x="173.4" y="71" width="994.4" height="15.0" fill="rgb(131.800777402518,162.264989725171,131.800777402518)" rx="2" ry="2" />
<text  x="176.39" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,039 us, 0.35%)</title><rect x="158.9" y="87" width="4.1" height="15.0" fill="rgb(130.150163768614,150.779672088159,150.779672088159)" rx="2" ry="2" />
<text  x="161.88" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (919 us, 0.05%)</title><rect x="163.5" y="87" width="0.5" height="15.0" fill="rgb(150.048642118598,150.048642118598,119.466496420898)" rx="2" ry="2" />
<text  x="166.46" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (8,970 us, 0.45%)</title><rect x="1179.4" y="103" width="5.3" height="15.0" fill="rgb(138.169869580762,107.185290800702,138.169869580762)" rx="2" ry="2" />
<text  x="1182.44" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (461 us, 0.02%)</title><rect x="1172.5" y="119" width="0.3" height="15.0" fill="rgb(125.386634093867,163.30915258937,125.386634093867)" rx="2" ry="2" />
<text  x="1175.53" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (5,280 us, 0.26%)</title><rect x="1168.7" y="135" width="3.2" height="15.0" fill="rgb(155.974062192681,142.467810143889,142.467810143889)" rx="2" ry="2" />
<text  x="1171.75" y="145.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (70,916 us, 3.54%)</title><rect x="117.1" y="87" width="41.8" height="15.0" fill="rgb(156.313982806562,145.073868183639,145.073868183639)" rx="2" ry="2" />
<text  x="120.13" y="97.5" >fir..</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (917 us, 0.05%)</title><rect x="1167.9" y="71" width="0.6" height="15.0" fill="rgb(140.606883182624,140.606883182624,154.633590293411)" rx="2" ry="2" />
<text  x="1170.93" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (432 us, 0.02%)</title><rect x="164.3" y="87" width="0.3" height="15.0" fill="rgb(152.530901308353,116.070243364041,116.070243364041)" rx="2" ry="2" />
<text  x="167.34" y="97.5" ></text>
</g>
</g>
</svg>
