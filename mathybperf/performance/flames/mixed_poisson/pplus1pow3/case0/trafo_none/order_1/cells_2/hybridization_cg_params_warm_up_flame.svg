<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="219" onload="init(evt)" viewBox="0 0 1200 219" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="219.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="201" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="201" > </text>
<g id="frames">
<g >
<title>CreateExtMesh (27,905 us, 0.81%)</title><rect x="167.8" y="71" width="9.5" height="15.0" fill="rgb(148.503396744798,133.664954158545,148.503396744798)" rx="2" ry="2" />
<text  x="170.77" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (3,822 us, 0.11%)</title><rect x="176.0" y="119" width="1.3" height="15.0" fill="rgb(117.366647925176,147.465427239861,147.465427239861)" rx="2" ry="2" />
<text  x="179.03" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (16,546 us, 0.48%)</title><rect x="185.6" y="71" width="5.7" height="15.0" fill="rgb(145.648263355426,126.34867484828,145.648263355426)" rx="2" ry="2" />
<text  x="188.64" y="81.5" ></text>
</g>
<g >
<title>DMPlexBuFrCeLi (451 us, 0.01%)</title><rect x="1188.5" y="119" width="0.2" height="15.0" fill="rgb(150.35575521071,150.35575521071,120.954813713442)" rx="2" ry="2" />
<text  x="1191.54" y="129.5" ></text>
</g>
<g >
<title>DMPlexStratify (3,284 us, 0.10%)</title><rect x="197.9" y="87" width="1.1" height="15.0" fill="rgb(145.541217650192,154.769945316717,154.769945316717)" rx="2" ry="2" />
<text  x="200.88" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (10,432 us, 0.30%)</title><rect x="172.5" y="103" width="3.5" height="15.0" fill="rgb(154.810971544513,154.810971544513,142.545477484946)" rx="2" ry="2" />
<text  x="175.45" y="113.5" ></text>
</g>
<g >
<title>Mesh: numbering (5,700 us, 0.17%)</title><rect x="188.2" y="87" width="2.0" height="15.0" fill="rgb(125.511685889285,149.577103749074,149.577103749074)" rx="2" ry="2" />
<text  x="191.20" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (23,317 us, 0.68%)</title><rect x="177.6" y="103" width="8.0" height="15.0" fill="rgb(151.791637983934,151.791637983934,127.913322537525)" rx="2" ry="2" />
<text  x="180.65" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (3,822 us, 0.11%)</title><rect x="176.0" y="135" width="1.3" height="15.0" fill="rgb(136.441648763169,102.756724955621,136.441648763169)" rx="2" ry="2" />
<text  x="179.03" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (3,822 us, 0.11%)</title><rect x="176.0" y="87" width="1.3" height="15.0" fill="rgb(111.374092055111,111.374092055111,148.975630720344)" rx="2" ry="2" />
<text  x="179.03" y="97.5" ></text>
</g>
<g >
<title>Mesh: reorder (3,387 us, 0.10%)</title><rect x="190.2" y="87" width="1.1" height="15.0" fill="rgb(134.545765272216,134.545765272216,153.460470697848)" rx="2" ry="2" />
<text  x="193.16" y="97.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (23,435 us, 0.68%)</title><rect x="168.0" y="87" width="8.0" height="15.0" fill="rgb(154.072097624656,127.886081789031,127.886081789031)" rx="2" ry="2" />
<text  x="170.99" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (1,287 us, 0.04%)</title><rect x="1187.7" y="119" width="0.5" height="15.0" fill="rgb(114.69199100286,146.771997667408,146.771997667408)" rx="2" ry="2" />
<text  x="1190.73" y="129.5" ></text>
</g>
<g >
<title>DMPlexStratify (451 us, 0.01%)</title><rect x="1188.5" y="135" width="0.2" height="15.0" fill="rgb(138.918116040076,138.918116040076,154.306732136789)" rx="2" ry="2" />
<text  x="1191.54" y="145.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (10,432 us, 0.30%)</title><rect x="172.5" y="119" width="3.5" height="15.0" fill="rgb(131.512580980862,131.512580980862,152.873402770489)" rx="2" ry="2" />
<text  x="175.45" y="129.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (1,580 us, 0.05%)</title><rect x="179.5" y="135" width="0.5" height="15.0" fill="rgb(149.1032201917,149.1032201917,114.884836313621)" rx="2" ry="2" />
<text  x="182.48" y="145.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (767 us, 0.02%)</title><rect x="185.4" y="151" width="0.2" height="15.0" fill="rgb(152.86532285083,118.634141856364,118.634141856364)" rx="2" ry="2" />
<text  x="188.38" y="161.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,878,081 us, 83.67%)</title><rect x="199.7" y="71" width="987.3" height="15.0" fill="rgb(141.490190004514,160.687643487637,141.490190004514)" rx="2" ry="2" />
<text  x="202.67" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake (3,439,621 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(105.646116911537,144.426771051139,144.426771051139)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>CreateMesh (3,186 us, 0.09%)</title><rect x="187.1" y="87" width="1.1" height="15.0" fill="rgb(141.813876876386,141.813876876386,154.867201976075)" rx="2" ry="2" />
<text  x="190.11" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (3,822 us, 0.11%)</title><rect x="176.0" y="103" width="1.3" height="15.0" fill="rgb(155.59777674554,139.582955049141,139.582955049141)" rx="2" ry="2" />
<text  x="179.03" y="113.5" ></text>
</g>
<g >
<title>DMPlexInterp (3,818 us, 0.11%)</title><rect x="1188.7" y="119" width="1.3" height="15.0" fill="rgb(112.336267690137,146.161254586332,146.161254586332)" rx="2" ry="2" />
<text  x="1191.69" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (8,671 us, 0.25%)</title><rect x="1187.0" y="87" width="3.0" height="15.0" fill="rgb(150.309804865112,150.309804865112,120.732131269387)" rx="2" ry="2" />
<text  x="1190.03" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (23,723 us, 0.69%)</title><rect x="177.5" y="87" width="8.1" height="15.0" fill="rgb(105.567033743853,144.406268007666,144.406268007666)" rx="2" ry="2" />
<text  x="180.51" y="97.5" ></text>
</g>
<g >
<title>DMPlexStratify (577 us, 0.02%)</title><rect x="1189.8" y="135" width="0.2" height="15.0" fill="rgb(155.664831285625,155.664831285625,146.683413153414)" rx="2" ry="2" />
<text  x="1192.80" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (3,822 us, 0.11%)</title><rect x="176.0" y="151" width="1.3" height="15.0" fill="rgb(136.970052765764,104.110760212271,136.970052765764)" rx="2" ry="2" />
<text  x="179.03" y="161.5" ></text>
</g>
<g >
<title>PetscBarrier (24,332 us, 0.71%)</title><rect x="191.3" y="71" width="8.4" height="15.0" fill="rgb(156.731566330869,148.275341869993,148.275341869993)" rx="2" ry="2" />
<text  x="194.32" y="81.5" ></text>
</g>
<g >
<title>all (3,439,621 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(154.667905869013,154.667905869013,141.852159211372)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (8,671 us, 0.25%)</title><rect x="1187.0" y="71" width="3.0" height="15.0" fill="rgb(150.821623258341,150.821623258341,123.212481944269)" rx="2" ry="2" />
<text  x="1190.03" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (16,395 us, 0.48%)</title><rect x="180.0" y="135" width="5.6" height="15.0" fill="rgb(151.191568136061,151.191568136061,125.005291736295)" rx="2" ry="2" />
<text  x="183.02" y="145.5" ></text>
</g>
<g >
<title>DMPlexSymmetrize (1,938 us, 0.06%)</title><rect x="199.0" y="87" width="0.7" height="15.0" fill="rgb(147.890030269929,147.890030269929,156.043231665148)" rx="2" ry="2" />
<text  x="202.00" y="97.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (659 us, 0.02%)</title><rect x="177.1" y="167" width="0.2" height="15.0" fill="rgb(128.40505516238,150.32723652358,150.32723652358)" rx="2" ry="2" />
<text  x="180.11" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (5,344 us, 0.16%)</title><rect x="1188.2" y="103" width="1.8" height="15.0" fill="rgb(154.115665198638,128.220099856226,128.220099856226)" rx="2" ry="2" />
<text  x="1191.17" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (1,287 us, 0.04%)</title><rect x="1187.7" y="103" width="0.5" height="15.0" fill="rgb(132.359140942587,162.174093334928,132.359140942587)" rx="2" ry="2" />
<text  x="1190.73" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (23,317 us, 0.68%)</title><rect x="177.6" y="119" width="8.0" height="15.0" fill="rgb(114.224795207992,146.650872831702,146.650872831702)" rx="2" ry="2" />
<text  x="180.65" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (24,205 us, 0.70%)</title><rect x="177.3" y="71" width="8.3" height="15.0" fill="rgb(148.397350820532,148.397350820532,111.464084745655)" rx="2" ry="2" />
<text  x="180.34" y="81.5" ></text>
</g>
</g>
</svg>
