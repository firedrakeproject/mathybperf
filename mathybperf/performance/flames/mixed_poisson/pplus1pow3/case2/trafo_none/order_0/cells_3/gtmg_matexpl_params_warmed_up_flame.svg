<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="299" onload="init(evt)" viewBox="0 0 1200 299" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="299.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="281" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="281" > </text>
<g id="frames">
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (1,523 us, 0.01%)</title><rect x="218.9" y="199" width="0.2" height="15.0" fill="rgb(154.618582103012,132.075796123095,132.075796123095)" rx="2" ry="2" />
<text  x="221.93" y="209.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (23,802 us, 0.17%)</title><rect x="215.3" y="71" width="2.0" height="15.0" fill="rgb(148.540874403339,148.540874403339,112.159622108488)" rx="2" ry="2" />
<text  x="218.31" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (5,387 us, 0.04%)</title><rect x="218.9" y="151" width="0.5" height="15.0" fill="rgb(128.559598389992,162.792623517908,128.559598389992)" rx="2" ry="2" />
<text  x="221.93" y="161.5" ></text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (30,607 us, 0.21%)</title><rect x="1183.2" y="151" width="2.5" height="15.0" fill="rgb(141.929268411452,153.833514032599,153.833514032599)" rx="2" ry="2" />
<text  x="1186.18" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (13,109 us, 0.09%)</title><rect x="19.7" y="103" width="1.1" height="15.0" fill="rgb(107.985654299242,145.033317781285,145.033317781285)" rx="2" ry="2" />
<text  x="22.71" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,567 us, 0.05%)</title><rect x="19.2" y="151" width="0.5" height="15.0" fill="rgb(128.566878068357,150.369190610315,150.369190610315)" rx="2" ry="2" />
<text  x="22.17" y="161.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (5,523 us, 0.04%)</title><rect x="1185.7" y="151" width="0.4" height="15.0" fill="rgb(109.854714859207,145.517889037572,145.517889037572)" rx="2" ry="2" />
<text  x="1188.69" y="161.5" ></text>
</g>
<g >
<title>pyop2.parloop.JITModule.compile (1,780 us, 0.01%)</title><rect x="1186.9" y="183" width="0.1" height="15.0" fill="rgb(141.372506986026,160.706801188321,141.372506986026)" rx="2" ry="2" />
<text  x="1189.90" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (2,156 us, 0.01%)</title><rect x="1183.0" y="247" width="0.2" height="15.0" fill="rgb(143.441594385506,160.369973007011,143.441594385506)" rx="2" ry="2" />
<text  x="1186.01" y="257.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,365,225 us, 16.41%)</title><rect x="20.9" y="71" width="193.7" height="15.0" fill="rgb(118.040806249417,147.640209027627,147.640209027627)" rx="2" ry="2" />
<text  x="23.95" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>pyop2.parloop.JITModule.compile (72,209 us, 0.50%)</title><rect x="13.3" y="119" width="5.9" height="15.0" fill="rgb(130.731680806166,162.439028705973,130.731680806166)" rx="2" ry="2" />
<text  x="16.26" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (13,109 us, 0.09%)</title><rect x="19.7" y="119" width="1.1" height="15.0" fill="rgb(152.762439675447,117.845370845094,117.845370845094)" rx="2" ry="2" />
<text  x="22.71" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (13,109 us, 0.09%)</title><rect x="19.7" y="87" width="1.1" height="15.0" fill="rgb(151.397634668593,151.397634668593,126.003921855488)" rx="2" ry="2" />
<text  x="22.71" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (11,036 us, 0.08%)</title><rect x="1186.1" y="167" width="0.9" height="15.0" fill="rgb(111.223761844789,111.223761844789,148.946534550604)" rx="2" ry="2" />
<text  x="1189.14" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,109 us, 0.09%)</title><rect x="19.7" y="71" width="1.1" height="15.0" fill="rgb(145.324488378297,154.713756246225,154.713756246225)" rx="2" ry="2" />
<text  x="22.71" y="81.5" ></text>
</g>
<g >
<title>ParLoopExecute (72,209 us, 0.50%)</title><rect x="13.3" y="103" width="5.9" height="15.0" fill="rgb(148.987709414261,148.987709414261,114.325053315266)" rx="2" ry="2" />
<text  x="16.26" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,234 us, 0.07%)</title><rect x="216.4" y="103" width="0.9" height="15.0" fill="rgb(150.891163071119,150.891163071119,123.549482575425)" rx="2" ry="2" />
<text  x="219.42" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,062 us, 0.04%)</title><rect x="214.6" y="103" width="0.5" height="15.0" fill="rgb(155.423141769197,138.24408689718,138.24408689718)" rx="2" ry="2" />
<text  x="217.63" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (9,394 us, 0.07%)</title><rect x="1182.4" y="151" width="0.8" height="15.0" fill="rgb(126.666941184735,163.100730504811,126.666941184735)" rx="2" ry="2" />
<text  x="1185.42" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,567 us, 0.05%)</title><rect x="19.2" y="135" width="0.5" height="15.0" fill="rgb(148.929723623723,159.476556619394,148.929723623723)" rx="2" ry="2" />
<text  x="22.17" y="145.5" ></text>
</g>
<g >
<title>SNESFunctionEval (47,099 us, 0.33%)</title><rect x="1186.1" y="119" width="3.9" height="15.0" fill="rgb(145.520277805169,154.764516468007,154.764516468007)" rx="2" ry="2" />
<text  x="1189.14" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (2,156 us, 0.01%)</title><rect x="1183.0" y="231" width="0.2" height="15.0" fill="rgb(150.883362429607,150.883362429607,123.511679466556)" rx="2" ry="2" />
<text  x="1186.01" y="241.5" ></text>
</g>
<g >
<title>CreateMesh (2,056 us, 0.01%)</title><rect x="20.8" y="71" width="0.1" height="15.0" fill="rgb(111.135947831602,145.850060548934,145.850060548934)" rx="2" ry="2" />
<text  x="23.78" y="81.5" ></text>
</g>
<g >
<title>ParLoopExecute (11,597,296 us, 80.48%)</title><rect x="232.1" y="199" width="949.6" height="15.0" fill="rgb(117.12504741549,147.402790070682,147.402790070682)" rx="2" ry="2" />
<text  x="235.07" y="209.5" >ParLoopExecute</text>
</g>
<g >
<title>CreateFunctionSpace (1,523 us, 0.01%)</title><rect x="218.9" y="183" width="0.2" height="15.0" fill="rgb(155.426753240909,138.271774846972,138.271774846972)" rx="2" ry="2" />
<text  x="221.93" y="193.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble_form (11,752,447 us, 81.56%)</title><rect x="219.4" y="183" width="962.3" height="15.0" fill="rgb(125.224235930225,125.224235930225,151.656303728431)" rx="2" ry="2" />
<text  x="222.37" y="193.5" >firedrake.assemble.assemble_form</text>
</g>
<g >
<title>CreateExtMesh (118,551 us, 0.82%)</title><rect x="10.0" y="71" width="9.7" height="15.0" fill="rgb(119.277143422472,147.960740887308,147.960740887308)" rx="2" ry="2" />
<text  x="13.00" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,567 us, 0.05%)</title><rect x="19.2" y="119" width="0.5" height="15.0" fill="rgb(135.48649968468,161.664988423424,135.48649968468)" rx="2" ry="2" />
<text  x="22.17" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,567 us, 0.05%)</title><rect x="19.2" y="103" width="0.5" height="15.0" fill="rgb(154.335444187516,129.905072104286,129.905072104286)" rx="2" ry="2" />
<text  x="22.17" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,262 us, 0.02%)</title><rect x="215.1" y="87" width="0.2" height="15.0" fill="rgb(141.082459311525,160.754018251612,141.082459311525)" rx="2" ry="2" />
<text  x="218.13" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,803 us, 0.02%)</title><rect x="217.8" y="119" width="0.2" height="15.0" fill="rgb(153.047795985051,120.033102552059,120.033102552059)" rx="2" ry="2" />
<text  x="220.77" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (11,870,068 us, 82.37%)</title><rect x="218.0" y="103" width="972.0" height="15.0" fill="rgb(122.223113378813,148.724510875989,148.724510875989)" rx="2" ry="2" />
<text  x="221.00" y="113.5" >SNESSolve</text>
</g>
<g >
<title>HybridInit (11,822,969 us, 82.05%)</title><rect x="218.0" y="135" width="968.1" height="15.0" fill="rgb(155.635464027532,155.635464027532,146.541094902657)" rx="2" ry="2" />
<text  x="221.00" y="145.5" >HybridInit</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,523 us, 0.01%)</title><rect x="218.9" y="167" width="0.2" height="15.0" fill="rgb(152.28621423019,152.28621423019,130.310115115535)" rx="2" ry="2" />
<text  x="221.93" y="177.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble (47,099 us, 0.33%)</title><rect x="1186.1" y="135" width="3.9" height="15.0" fill="rgb(141.695294579252,153.772854150177,153.772854150177)" rx="2" ry="2" />
<text  x="1189.14" y="145.5" ></text>
</g>
<g >
<title>ParLoop_Cells_wrap_form0_cell_integral_otherwise (7,273 us, 0.05%)</title><rect x="1186.3" y="183" width="0.6" height="15.0" fill="rgb(136.172055663504,136.172055663504,153.775236580033)" rx="2" ry="2" />
<text  x="1189.31" y="193.5" ></text>
</g>
<g >
<title>perfsolve (11,870,068 us, 82.37%)</title><rect x="218.0" y="71" width="972.0" height="15.0" fill="rgb(127.531212195331,162.960035224016,127.531212195331)" rx="2" ry="2" />
<text  x="221.00" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,062 us, 0.04%)</title><rect x="214.6" y="135" width="0.5" height="15.0" fill="rgb(117.527489069205,147.50712679572,147.50712679572)" rx="2" ry="2" />
<text  x="217.63" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (3,864 us, 0.03%)</title><rect x="219.1" y="183" width="0.3" height="15.0" fill="rgb(123.827766726215,163.562921695732,123.827766726215)" rx="2" ry="2" />
<text  x="222.05" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (3,864 us, 0.03%)</title><rect x="219.1" y="199" width="0.3" height="15.0" fill="rgb(152.501570381873,115.845372927695,115.845372927695)" rx="2" ry="2" />
<text  x="222.05" y="209.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (9,394 us, 0.07%)</title><rect x="1182.4" y="167" width="0.8" height="15.0" fill="rgb(154.901921631066,134.248065838175,134.248065838175)" rx="2" ry="2" />
<text  x="1185.42" y="177.5" ></text>
</g>
<g >
<title>firedrake (14,410,118 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(144.795500032442,160.149569762161,144.795500032442)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>MatZeroInitial (1,685 us, 0.01%)</title><rect x="1182.3" y="167" width="0.1" height="15.0" fill="rgb(156.605836058255,147.311409779957,147.311409779957)" rx="2" ry="2" />
<text  x="1185.28" y="177.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble (11,752,447 us, 81.56%)</title><rect x="219.4" y="167" width="962.3" height="15.0" fill="rgb(112.268822190321,112.268822190321,149.148804294901)" rx="2" ry="2" />
<text  x="222.37" y="177.5" >firedrake.assemble.assemble</text>
</g>
<g >
<title>HybridOperatorAssembly (11,752,447 us, 81.56%)</title><rect x="219.4" y="151" width="962.3" height="15.0" fill="rgb(145.387103117794,160.05326228315,145.387103117794)" rx="2" ry="2" />
<text  x="222.37" y="161.5" >HybridOperatorAssembly</text>
</g>
<g >
<title>all (14,410,118 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(148.543527176116,148.543527176116,112.172477853487)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateSparsity (6,560 us, 0.05%)</title><rect x="1181.7" y="167" width="0.6" height="15.0" fill="rgb(155.185818160239,136.424605895166,136.424605895166)" rx="2" ry="2" />
<text  x="1184.74" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,589 us, 0.02%)</title><rect x="214.9" y="151" width="0.2" height="15.0" fill="rgb(153.685745908427,153.685745908427,137.092460940837)" rx="2" ry="2" />
<text  x="217.91" y="161.5" ></text>
</g>
<g >
<title>PCSetUp (11,822,969 us, 82.05%)</title><rect x="218.0" y="119" width="968.1" height="15.0" fill="rgb(140.926311449876,160.77943767095,140.926311449876)" rx="2" ry="2" />
<text  x="221.00" y="129.5" >PCSetUp</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,387 us, 0.05%)</title><rect x="217.4" y="103" width="0.6" height="15.0" fill="rgb(153.921218360704,126.729340765394,126.729340765394)" rx="2" ry="2" />
<text  x="220.39" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,062 us, 0.04%)</title><rect x="214.6" y="71" width="0.5" height="15.0" fill="rgb(150.037625727868,150.037625727868,119.413109296593)" rx="2" ry="2" />
<text  x="217.63" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (6,888 us, 0.05%)</title><rect x="1182.6" y="183" width="0.6" height="15.0" fill="rgb(118.795529108438,118.795529108438,150.412037891956)" rx="2" ry="2" />
<text  x="1185.62" y="193.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,245 us, 0.06%)</title><rect x="1181.7" y="151" width="0.7" height="15.0" fill="rgb(150.628066533346,150.628066533346,122.274476276985)" rx="2" ry="2" />
<text  x="1184.74" y="161.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,323 us, 0.04%)</title><rect x="1189.5" y="183" width="0.5" height="15.0" fill="rgb(136.940558240095,152.540144728914,152.540144728914)" rx="2" ry="2" />
<text  x="1192.48" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (3,864 us, 0.03%)</title><rect x="219.1" y="167" width="0.3" height="15.0" fill="rgb(154.490231603193,154.490231603193,140.991122384705)" rx="2" ry="2" />
<text  x="222.05" y="177.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (109,500 us, 0.76%)</title><rect x="10.2" y="87" width="9.0" height="15.0" fill="rgb(150.282535650055,159.256331405805,150.282535650055)" rx="2" ry="2" />
<text  x="13.20" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,766 us, 0.03%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(112.983842119975,146.329144253327,146.329144253327)" rx="2" ry="2" />
<text  x="1192.69" y="209.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,387 us, 0.05%)</title><rect x="217.4" y="87" width="0.6" height="15.0" fill="rgb(148.227143694191,159.590930096294,148.227143694191)" rx="2" ry="2" />
<text  x="220.39" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,892 us, 0.08%)</title><rect x="216.3" y="87" width="1.0" height="15.0" fill="rgb(137.270159209174,152.625596832008,152.625596832008)" rx="2" ry="2" />
<text  x="219.29" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,910 us, 0.08%)</title><rect x="215.3" y="87" width="1.0" height="15.0" fill="rgb(128.36666620958,162.824031082161,128.36666620958)" rx="2" ry="2" />
<text  x="218.31" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,662 us, 0.01%)</title><rect x="1189.9" y="215" width="0.1" height="15.0" fill="rgb(155.315974777185,137.422473291754,137.422473291754)" rx="2" ry="2" />
<text  x="1192.86" y="225.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,062 us, 0.04%)</title><rect x="214.6" y="119" width="0.5" height="15.0" fill="rgb(153.518211061745,123.639618140045,123.639618140045)" rx="2" ry="2" />
<text  x="217.63" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,567 us, 0.05%)</title><rect x="19.2" y="87" width="0.5" height="15.0" fill="rgb(155.819035832219,141.279274713682,141.279274713682)" rx="2" ry="2" />
<text  x="22.17" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,983 us, 0.06%)</title><rect x="217.3" y="71" width="0.7" height="15.0" fill="rgb(111.94927164767,111.94927164767,149.086955802775)" rx="2" ry="2" />
<text  x="220.26" y="81.5" ></text>
</g>
<g >
<title>pyop2.parloop.JITModule.compile (11,597,296 us, 80.48%)</title><rect x="232.1" y="215" width="949.6" height="15.0" fill="rgb(127.81215809938,150.17352247021,150.17352247021)" rx="2" ry="2" />
<text  x="235.07" y="225.5" >pyop2.parloop.JITModule.compile</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (11,870,068 us, 82.37%)</title><rect x="218.0" y="87" width="972.0" height="15.0" fill="rgb(152.006405702549,112.049110386211,112.049110386211)" rx="2" ry="2" />
<text  x="221.00" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (36,063 us, 0.25%)</title><rect x="1187.0" y="167" width="3.0" height="15.0" fill="rgb(148.720830741833,148.720830741833,113.031718210422)" rx="2" ry="2" />
<text  x="1190.05" y="177.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,262 us, 0.02%)</title><rect x="215.1" y="71" width="0.2" height="15.0" fill="rgb(154.795170769176,154.795170769176,142.468904496775)" rx="2" ry="2" />
<text  x="218.13" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,062 us, 0.04%)</title><rect x="214.6" y="87" width="0.5" height="15.0" fill="rgb(155.278876868337,137.138055990586,137.138055990586)" rx="2" ry="2" />
<text  x="217.63" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (4,824 us, 0.03%)</title><rect x="1182.8" y="199" width="0.4" height="15.0" fill="rgb(144.938595254988,160.126275191049,144.938595254988)" rx="2" ry="2" />
<text  x="1185.79" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (2,156 us, 0.01%)</title><rect x="1183.0" y="215" width="0.2" height="15.0" fill="rgb(146.170692201176,146.170692201176,155.710456555066)" rx="2" ry="2" />
<text  x="1186.01" y="225.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble_form (47,099 us, 0.33%)</title><rect x="1186.1" y="151" width="3.9" height="15.0" fill="rgb(143.283885859143,120.289957514053,143.283885859143)" rx="2" ry="2" />
<text  x="1189.14" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,584 us, 0.03%)</title><rect x="217.4" y="119" width="0.4" height="15.0" fill="rgb(137.153850774031,152.595442793267,152.595442793267)" rx="2" ry="2" />
<text  x="220.39" y="129.5" ></text>
</g>
</g>
</svg>
