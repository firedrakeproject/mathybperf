<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="283" onload="init(evt)" viewBox="0 0 1200 283" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="283.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="265" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="265" > </text>
<g id="frames">
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,415 us, 0.04%)</title><rect x="109.0" y="119" width="0.5" height="15.0" fill="rgb(105.878459123002,144.487007920778,144.487007920778)" rx="2" ry="2" />
<text  x="112.04" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (4,628 us, 0.03%)</title><rect x="436.7" y="199" width="0.3" height="15.0" fill="rgb(155.497967562984,138.817751316213,138.817751316213)" rx="2" ry="2" />
<text  x="439.73" y="209.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (8,114 us, 0.05%)</title><rect x="434.8" y="199" width="0.5" height="15.0" fill="rgb(156.555828035732,146.92801494061,146.92801494061)" rx="2" ry="2" />
<text  x="437.78" y="209.5" ></text>
</g>
<g >
<title>HybridBreak (1,694,525 us, 9.72%)</title><rect x="306.0" y="151" width="114.8" height="15.0" fill="rgb(129.341021524155,162.665415100719,129.341021524155)" rx="2" ry="2" />
<text  x="309.04" y="161.5" >HybridBreak</text>
</g>
<g >
<title>CreateExtMesh (1,470,425 us, 8.44%)</title><rect x="10.0" y="71" width="99.5" height="15.0" fill="rgb(156.290347542169,144.892664489959,144.892664489959)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtM..</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,419,641 us, 8.14%)</title><rect x="12.9" y="119" width="96.1" height="15.0" fill="rgb(154.013363806748,127.435789185066,127.435789185066)" rx="2" ry="2" />
<text  x="15.94" y="129.5" >Parloop_Ce..</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (2,658 us, 0.02%)</title><rect x="434.6" y="199" width="0.2" height="15.0" fill="rgb(152.376104592359,114.883468541416,114.883468541416)" rx="2" ry="2" />
<text  x="437.60" y="209.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,177 us, 0.02%)</title><rect x="305.8" y="119" width="0.2" height="15.0" fill="rgb(114.813548183246,146.803512491953,146.803512491953)" rx="2" ry="2" />
<text  x="308.83" y="129.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,066 us, 0.05%)</title><rect x="305.5" y="87" width="0.5" height="15.0" fill="rgb(141.298607822547,141.298607822547,154.767472481783)" rx="2" ry="2" />
<text  x="308.49" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,847 us, 0.02%)</title><rect x="110.9" y="135" width="0.2" height="15.0" fill="rgb(119.827229539605,119.827229539605,150.611721846375)" rx="2" ry="2" />
<text  x="113.88" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,114 us, 0.05%)</title><rect x="434.8" y="183" width="0.5" height="15.0" fill="rgb(155.080126269181,135.614301397058,135.614301397058)" rx="2" ry="2" />
<text  x="437.78" y="193.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,463 us, 0.02%)</title><rect x="533.4" y="135" width="0.2" height="15.0" fill="rgb(150.229599064472,150.229599064472,120.343441620132)" rx="2" ry="2" />
<text  x="536.37" y="145.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (12,751 us, 0.07%)</title><rect x="434.5" y="135" width="0.8" height="15.0" fill="rgb(109.513826291265,145.429510519958,145.429510519958)" rx="2" ry="2" />
<text  x="437.46" y="145.5" ></text>
</g>
<g >
<title>HybridRHS (165,738 us, 0.95%)</title><rect x="420.8" y="151" width="11.2" height="15.0" fill="rgb(150.323478942462,150.323478942462,120.798397951931)" rx="2" ry="2" />
<text  x="423.75" y="161.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (17,128 us, 0.10%)</title><rect x="436.0" y="167" width="1.2" height="15.0" fill="rgb(152.291364007798,152.291364007798,130.335071730099)" rx="2" ry="2" />
<text  x="439.02" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (2,658 us, 0.02%)</title><rect x="434.6" y="215" width="0.2" height="15.0" fill="rgb(123.810777580031,123.810777580031,151.382731144522)" rx="2" ry="2" />
<text  x="437.60" y="225.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (4,628 us, 0.03%)</title><rect x="436.7" y="215" width="0.3" height="15.0" fill="rgb(142.837827778587,160.468260594183,142.837827778587)" rx="2" ry="2" />
<text  x="439.73" y="225.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (22,567 us, 0.13%)</title><rect x="109.5" y="71" width="1.6" height="15.0" fill="rgb(119.918794873176,119.918794873176,150.629444169002)" rx="2" ry="2" />
<text  x="112.54" y="81.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,459,079 us, 8.37%)</title><rect x="10.3" y="87" width="98.7" height="15.0" fill="rgb(154.305401789639,154.305401789639,140.095408672868)" rx="2" ry="2" />
<text  x="13.27" y="97.5" >firedrake...</text>
</g>
<g >
<title>CreateFunctionSpace (2,658 us, 0.02%)</title><rect x="434.6" y="167" width="0.2" height="15.0" fill="rgb(155.699472776494,140.362624619785,140.362624619785)" rx="2" ry="2" />
<text  x="437.60" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,114 us, 0.05%)</title><rect x="434.8" y="151" width="0.5" height="15.0" fill="rgb(108.205029680292,145.090192880076,145.090192880076)" rx="2" ry="2" />
<text  x="437.78" y="161.5" ></text>
</g>
<g >
<title>HybridInit (1,501,266 us, 8.61%)</title><rect x="432.0" y="119" width="101.6" height="15.0" fill="rgb(151.378848714101,151.378848714101,125.912882229875)" rx="2" ry="2" />
<text  x="434.97" y="129.5" >HybridInit</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (4,628 us, 0.03%)</title><rect x="436.7" y="231" width="0.3" height="15.0" fill="rgb(147.794304758268,147.794304758268,156.024704146761)" rx="2" ry="2" />
<text  x="439.73" y="241.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,114 us, 0.05%)</title><rect x="434.8" y="167" width="0.5" height="15.0" fill="rgb(156.200445429815,144.203414961912,144.203414961912)" rx="2" ry="2" />
<text  x="437.78" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,415 us, 0.04%)</title><rect x="109.0" y="151" width="0.5" height="15.0" fill="rgb(153.272351560082,121.754695293964,121.754695293964)" rx="2" ry="2" />
<text  x="112.04" y="161.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (11,228 us, 0.06%)</title><rect x="436.3" y="183" width="0.7" height="15.0" fill="rgb(150.6832454591,159.191099576426,150.6832454591)" rx="2" ry="2" />
<text  x="439.28" y="193.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (6,191 us, 0.04%)</title><rect x="304.1" y="87" width="0.4" height="15.0" fill="rgb(141.877846119865,116.686980682154,141.877846119865)" rx="2" ry="2" />
<text  x="307.11" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (22,567 us, 0.13%)</title><rect x="109.5" y="119" width="1.6" height="15.0" fill="rgb(153.92634391001,126.768636643409,126.768636643409)" rx="2" ry="2" />
<text  x="112.54" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (20,464 us, 0.12%)</title><rect x="304.1" y="71" width="1.4" height="15.0" fill="rgb(151.550457798492,151.550457798492,126.744526254231)" rx="2" ry="2" />
<text  x="307.11" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (11,781 us, 0.07%)</title><rect x="304.7" y="103" width="0.8" height="15.0" fill="rgb(111.923285154743,111.923285154743,149.081926158983)" rx="2" ry="2" />
<text  x="307.70" y="113.5" ></text>
</g>
<g >
<title>PCApply (1,860,263 us, 10.67%)</title><rect x="306.0" y="119" width="126.0" height="15.0" fill="rgb(142.050159076726,117.128532634109,142.050159076726)" rx="2" ry="2" />
<text  x="309.04" y="129.5" >PCApply</text>
</g>
<g >
<title>firedrake.slate.slac.optimise.optimise (11,038 us, 0.06%)</title><rect x="431.2" y="167" width="0.8" height="15.0" fill="rgb(135.245565870029,161.704210207205,135.245565870029)" rx="2" ry="2" />
<text  x="434.23" y="177.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (27,470 us, 0.16%)</title><rect x="435.3" y="151" width="1.9" height="15.0" fill="rgb(152.704758231803,144.430942968994,152.704758231803)" rx="2" ry="2" />
<text  x="438.32" y="161.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (7,415 us, 0.04%)</title><rect x="109.0" y="103" width="0.5" height="15.0" fill="rgb(156.493643331682,146.451265542899,146.451265542899)" rx="2" ry="2" />
<text  x="112.04" y="113.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (1,396,971 us, 8.01%)</title><rect x="438.8" y="135" width="94.6" height="15.0" fill="rgb(130.047394826646,130.047394826646,152.589818353544)" rx="2" ry="2" />
<text  x="441.80" y="145.5" >firedrake...</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (1,466,101 us, 8.41%)</title><rect x="1090.7" y="119" width="99.3" height="15.0" fill="rgb(139.257815668009,161.051053263347,139.257815668009)" rx="2" ry="2" />
<text  x="1093.75" y="129.5" >firedrake...</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,384,673 us, 7.94%)</title><rect x="439.6" y="183" width="93.8" height="15.0" fill="rgb(152.106764396233,112.818527037783,112.818527037783)" rx="2" ry="2" />
<text  x="442.63" y="193.5" >pyop2.glob..</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (4,478 us, 0.03%)</title><rect x="1189.7" y="151" width="0.3" height="15.0" fill="rgb(143.575432032448,154.260297193598,154.260297193598)" rx="2" ry="2" />
<text  x="1192.70" y="161.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (7,157 us, 0.04%)</title><rect x="1189.5" y="135" width="0.5" height="15.0" fill="rgb(156.158696508858,143.883339901246,143.883339901246)" rx="2" ry="2" />
<text  x="1192.52" y="145.5" ></text>
</g>
<g >
<title>all (17,430,691 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(133.58711965284,95.4419941104015,133.58711965284)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>Log_Event_form0_cell_integral_otherwise (3,947 us, 0.02%)</title><rect x="533.9" y="151" width="0.3" height="15.0" fill="rgb(138.293049343326,161.208108246435,138.293049343326)" rx="2" ry="2" />
<text  x="536.95" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (14,273 us, 0.08%)</title><rect x="304.5" y="87" width="1.0" height="15.0" fill="rgb(152.274410521995,114.103814001961,114.103814001961)" rx="2" ry="2" />
<text  x="307.53" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,415 us, 0.04%)</title><rect x="109.0" y="135" width="0.5" height="15.0" fill="rgb(134.433720987458,161.836371002042,134.433720987458)" rx="2" ry="2" />
<text  x="112.04" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,415 us, 0.04%)</title><rect x="109.0" y="87" width="0.5" height="15.0" fill="rgb(154.045274480604,154.045274480604,138.834791713698)" rx="2" ry="2" />
<text  x="112.04" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.WithGeometry.split (2,157 us, 0.01%)</title><rect x="437.0" y="183" width="0.2" height="15.0" fill="rgb(145.106572326265,145.106572326265,155.5044978696)" rx="2" ry="2" />
<text  x="440.04" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (2,921 us, 0.02%)</title><rect x="436.5" y="199" width="0.2" height="15.0" fill="rgb(141.334776091293,115.295363733939,141.334776091293)" rx="2" ry="2" />
<text  x="439.53" y="209.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (27,470 us, 0.16%)</title><rect x="435.3" y="135" width="1.9" height="15.0" fill="rgb(109.932662603228,145.538097711948,145.538097711948)" rx="2" ry="2" />
<text  x="438.32" y="145.5" ></text>
</g>
<g >
<title>firedrake.function.Function.__init__ (2,551 us, 0.01%)</title><rect x="437.2" y="135" width="0.2" height="15.0" fill="rgb(114.807877249634,146.802042249905,146.802042249905)" rx="2" ry="2" />
<text  x="440.18" y="145.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,849,432 us, 16.35%)</title><rect x="111.1" y="71" width="192.9" height="15.0" fill="rgb(150.500540996026,138.782636302317,150.500540996026)" rx="2" ry="2" />
<text  x="114.07" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (9,008 us, 0.05%)</title><rect x="110.3" y="135" width="0.6" height="15.0" fill="rgb(149.311848879806,149.311848879806,115.895883032905)" rx="2" ry="2" />
<text  x="113.27" y="145.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (3,809,697 us, 21.86%)</title><rect x="832.8" y="151" width="257.9" height="15.0" fill="rgb(114.272477035415,114.272477035415,149.536608458467)" rx="2" ry="2" />
<text  x="835.85" y="161.5" >pyop2.global_kernel.GlobalKerne..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (13,057,647 us, 74.91%)</title><rect x="306.0" y="71" width="884.0" height="15.0" fill="rgb(132.597758891192,132.597758891192,153.083437204747)" rx="2" ry="2" />
<text  x="309.04" y="81.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (1,384,673 us, 7.94%)</title><rect x="439.6" y="167" width="93.8" height="15.0" fill="rgb(123.608986305817,149.083811264471,149.083811264471)" rx="2" ry="2" />
<text  x="442.63" y="177.5" >Parloop_Ce..</text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (4,415,278 us, 25.33%)</title><rect x="533.9" y="135" width="298.9" height="15.0" fill="rgb(140.314043467959,153.414752010212,153.414752010212)" rx="2" ry="2" />
<text  x="536.95" y="145.5" >Parloop_Cells_wrap_form0_cell_integr..</text>
</g>
<g >
<title>firedrake.parloops.par_loop (1,694,525 us, 9.72%)</title><rect x="306.0" y="167" width="114.8" height="15.0" fill="rgb(119.073363669279,119.073363669279,150.465812323086)" rx="2" ry="2" />
<text  x="309.04" y="177.5" >firedrake.pa..</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (22,567 us, 0.13%)</title><rect x="109.5" y="103" width="1.6" height="15.0" fill="rgb(111.523775345621,145.950608422939,145.950608422939)" rx="2" ry="2" />
<text  x="112.54" y="113.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (4,411,331 us, 25.31%)</title><rect x="534.2" y="151" width="298.6" height="15.0" fill="rgb(153.12271502146,120.607481831192,120.607481831192)" rx="2" ry="2" />
<text  x="537.21" y="161.5" >pyop2.global_kernel.GlobalKernel.com..</text>
</g>
<g >
<title>PCSetUp (1,501,266 us, 8.61%)</title><rect x="432.0" y="103" width="101.6" height="15.0" fill="rgb(146.157141733199,159.927907159712,146.157141733199)" rx="2" ry="2" />
<text  x="434.97" y="113.5" >PCSetUp</text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (21,318 us, 0.12%)</title><rect x="437.4" y="135" width="1.4" height="15.0" fill="rgb(140.219307808978,140.219307808978,154.558575704963)" rx="2" ry="2" />
<text  x="440.36" y="145.5" ></text>
</g>
<g >
<title>KSPSolve (1,860,263 us, 10.67%)</title><rect x="306.0" y="103" width="126.0" height="15.0" fill="rgb(139.57199517281,110.778237630326,139.57199517281)" rx="2" ry="2" />
<text  x="309.04" y="113.5" >KSPSolve</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (4,637 us, 0.03%)</title><rect x="434.5" y="151" width="0.3" height="15.0" fill="rgb(155.380416277803,137.916524796486,137.916524796486)" rx="2" ry="2" />
<text  x="437.46" y="161.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form1_cell_integral_otherwise (3,809,697 us, 21.86%)</title><rect x="832.8" y="135" width="257.9" height="15.0" fill="rgb(149.044199878702,159.457920949979,149.044199878702)" rx="2" ry="2" />
<text  x="835.85" y="145.5" >Parloop_Cells_wrap_form1_cell_i..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (22,567 us, 0.13%)</title><rect x="109.5" y="87" width="1.6" height="15.0" fill="rgb(155.767749390169,155.767749390169,147.182170121588)" rx="2" ry="2" />
<text  x="112.54" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (2,658 us, 0.02%)</title><rect x="434.6" y="183" width="0.2" height="15.0" fill="rgb(155.417761759251,138.202840154258,138.202840154258)" rx="2" ry="2" />
<text  x="437.60" y="193.5" ></text>
</g>
<g >
<title>SCForwardElim (1,860,263 us, 10.67%)</title><rect x="306.0" y="135" width="126.0" height="15.0" fill="rgb(149.877453593786,149.877453593786,118.636890492964)" rx="2" ry="2" />
<text  x="309.04" y="145.5" >SCForwardElim</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (8,066 us, 0.05%)</title><rect x="305.5" y="103" width="0.5" height="15.0" fill="rgb(153.978537980468,153.978537980468,138.511376366886)" rx="2" ry="2" />
<text  x="308.49" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,386,929 us, 7.96%)</title><rect x="439.5" y="151" width="93.9" height="15.0" fill="rgb(138.593183454066,152.968603117721,152.968603117721)" rx="2" ry="2" />
<text  x="442.48" y="161.5" >ParLoopExe..</text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (1,683,743 us, 9.66%)</title><rect x="306.8" y="199" width="114.0" height="15.0" fill="rgb(113.83364251974,146.549462875488,146.549462875488)" rx="2" ry="2" />
<text  x="309.77" y="209.5" >Parloop_Cell..</text>
</g>
<g >
<title>firedrake (17,430,691 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(133.972407396586,151.770624139856,151.770624139856)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>ParLoopExecute (1,419,641 us, 8.14%)</title><rect x="12.9" y="103" width="96.1" height="15.0" fill="rgb(130.719411986802,130.719411986802,152.719886190994)" rx="2" ry="2" />
<text  x="15.94" y="113.5" >ParLoopExe..</text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,090 us, 0.01%)</title><rect x="304.0" y="87" width="0.1" height="15.0" fill="rgb(155.709156929067,140.436869789513,140.436869789513)" rx="2" ry="2" />
<text  x="306.97" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,683,743 us, 9.66%)</title><rect x="306.8" y="215" width="114.0" height="15.0" fill="rgb(142.864882453023,154.076080635969,154.076080635969)" rx="2" ry="2" />
<text  x="309.77" y="225.5" >pyop2.global..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,889 us, 0.03%)</title><rect x="305.5" y="119" width="0.3" height="15.0" fill="rgb(146.269904483774,146.269904483774,155.729658932343)" rx="2" ry="2" />
<text  x="308.49" y="129.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,683,743 us, 9.66%)</title><rect x="306.8" y="183" width="114.0" height="15.0" fill="rgb(133.950823470048,151.765028307049,151.765028307049)" rx="2" ry="2" />
<text  x="309.77" y="193.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,066 us, 0.05%)</title><rect x="305.5" y="71" width="0.5" height="15.0" fill="rgb(154.133325585955,128.355496158988,128.355496158988)" rx="2" ry="2" />
<text  x="308.49" y="81.5" ></text>
</g>
<g >
<title>SNESSolve (13,057,647 us, 74.91%)</title><rect x="306.0" y="87" width="884.0" height="15.0" fill="rgb(155.190958506314,136.464015215074,136.464015215074)" rx="2" ry="2" />
<text  x="309.04" y="97.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,090 us, 0.01%)</title><rect x="304.0" y="71" width="0.1" height="15.0" fill="rgb(137.719084800251,152.741984948213,152.741984948213)" rx="2" ry="2" />
<text  x="306.97" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,419,641 us, 8.14%)</title><rect x="12.9" y="135" width="96.1" height="15.0" fill="rgb(127.193841005933,150.013218038575,150.013218038575)" rx="2" ry="2" />
<text  x="15.94" y="145.5" >pyop2.glob..</text>
</g>
<g >
<title>ParLoopExecute (8,224,975 us, 47.19%)</title><rect x="533.9" y="119" width="556.8" height="15.0" fill="rgb(154.680983812542,154.680983812542,141.915536937703)" rx="2" ry="2" />
<text  x="536.95" y="129.5" >ParLoopExecute</text>
</g>
<g >
<title>SNESFunctionEval (9,696,118 us, 55.63%)</title><rect x="533.6" y="103" width="656.4" height="15.0" fill="rgb(146.231576430505,159.915789883406,146.231576430505)" rx="2" ry="2" />
<text  x="536.60" y="113.5" >SNESFunctionEval</text>
</g>
</g>
</svg>
