<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="267" onload="init(evt)" viewBox="0 0 1200 267" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="267.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="249" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="249" > </text>
<g id="frames">
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (72,001 us, 0.18%)</title><rect x="11.2" y="135" width="2.0" height="15.0" fill="rgb(137.171534178798,161.390680482521,137.171534178798)" rx="2" ry="2" />
<text  x="14.17" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,986 us, 0.02%)</title><rect x="101.5" y="135" width="0.2" height="15.0" fill="rgb(121.648359900385,121.648359900385,150.964198690397)" rx="2" ry="2" />
<text  x="104.48" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (4,339 us, 0.01%)</title><rect x="1187.3" y="151" width="0.1" height="15.0" fill="rgb(142.09946851366,117.254888066254,142.09946851366)" rx="2" ry="2" />
<text  x="1190.31" y="161.5" ></text>
</g>
<g >
<title>HybridInit (61,917 us, 0.15%)</title><rect x="1186.7" y="135" width="1.8" height="15.0" fill="rgb(152.903293112489,118.925247195752,118.925247195752)" rx="2" ry="2" />
<text  x="1189.67" y="145.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_slate_loopy_knl_0 (36,940,082 us, 90.07%)</title><rect x="123.8" y="199" width="1062.9" height="15.0" fill="rgb(148.823054099748,159.493921425622,148.823054099748)" rx="2" ry="2" />
<text  x="126.85" y="209.5" >Parloop_Cells_wrap_slate_loopy_knl_0</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (6,948 us, 0.02%)</title><rect x="102.3" y="103" width="0.2" height="15.0" fill="rgb(148.576366285213,148.576366285213,112.331621228342)" rx="2" ry="2" />
<text  x="105.27" y="113.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (6,948 us, 0.02%)</title><rect x="102.3" y="87" width="0.2" height="15.0" fill="rgb(150.680843430459,159.191490604344,150.680843430459)" rx="2" ry="2" />
<text  x="105.27" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,170 us, 0.02%)</title><rect x="13.2" y="151" width="0.3" height="15.0" fill="rgb(130.64132534434,150.907010274459,150.907010274459)" rx="2" ry="2" />
<text  x="16.24" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,170 us, 0.02%)</title><rect x="13.2" y="135" width="0.3" height="15.0" fill="rgb(152.143248335982,113.098237242531,113.098237242531)" rx="2" ry="2" />
<text  x="16.24" y="145.5" ></text>
</g>
<g >
<title>Log_Event_form0_cell_integral_otherwise (8,997 us, 0.02%)</title><rect x="1188.5" y="167" width="0.2" height="15.0" fill="rgb(148.909742358189,159.479809383551,148.909742358189)" rx="2" ry="2" />
<text  x="1191.46" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,986 us, 0.02%)</title><rect x="101.5" y="71" width="0.2" height="15.0" fill="rgb(126.256073931037,149.77009324138,149.77009324138)" rx="2" ry="2" />
<text  x="104.48" y="81.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (44,654 us, 0.11%)</title><rect x="1188.7" y="135" width="1.3" height="15.0" fill="rgb(156.20307711381,144.22359120588,144.22359120588)" rx="2" ry="2" />
<text  x="1191.72" y="145.5" ></text>
</g>
<g >
<title>ParLoopExecute (72,001 us, 0.18%)</title><rect x="11.2" y="103" width="2.0" height="15.0" fill="rgb(152.627907531791,116.813957743731,116.813957743731)" rx="2" ry="2" />
<text  x="14.17" y="113.5" ></text>
</g>
<g >
<title>SCForwardElim (37,683,131 us, 91.88%)</title><rect x="102.5" y="151" width="1084.2" height="15.0" fill="rgb(113.241450200134,146.395931533368,146.395931533368)" rx="2" ry="2" />
<text  x="105.47" y="161.5" >SCForwardElim</text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (29,578 us, 0.07%)</title><rect x="1187.4" y="151" width="0.9" height="15.0" fill="rgb(141.852649959719,141.852649959719,154.874706443817)" rx="2" ry="2" />
<text  x="1190.43" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (37,798,699 us, 92.16%)</title><rect x="102.5" y="87" width="1087.5" height="15.0" fill="rgb(146.312897546776,146.312897546776,155.737980170344)" rx="2" ry="2" />
<text  x="105.47" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.parloops.par_loop (5,988 us, 0.01%)</title><rect x="1188.3" y="151" width="0.2" height="15.0" fill="rgb(142.561691661732,142.561691661732,155.011940321626)" rx="2" ry="2" />
<text  x="1191.28" y="161.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (72,001 us, 0.18%)</title><rect x="11.2" y="119" width="2.0" height="15.0" fill="rgb(109.145066903888,145.333906234341,145.333906234341)" rx="2" ry="2" />
<text  x="14.17" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (11,888 us, 0.03%)</title><rect x="13.5" y="71" width="0.3" height="15.0" fill="rgb(105.521010428005,144.39433603689,144.39433603689)" rx="2" ry="2" />
<text  x="16.47" y="81.5" ></text>
</g>
<g >
<title>KSPSolve (37,683,131 us, 91.88%)</title><rect x="102.5" y="119" width="1084.2" height="15.0" fill="rgb(152.846666992669,152.846666992669,133.026155426012)" rx="2" ry="2" />
<text  x="105.47" y="129.5" >KSPSolve</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (4,339 us, 0.01%)</title><rect x="1187.3" y="167" width="0.1" height="15.0" fill="rgb(146.559461299972,128.683619581178,146.559461299972)" rx="2" ry="2" />
<text  x="1190.31" y="177.5" ></text>
</g>
<g >
<title>HybridBreak (6,736 us, 0.02%)</title><rect x="102.5" y="167" width="0.2" height="15.0" fill="rgb(151.368554910836,141.006921959018,151.368554910836)" rx="2" ry="2" />
<text  x="105.47" y="177.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (36,940,082 us, 90.07%)</title><rect x="123.8" y="215" width="1062.9" height="15.0" fill="rgb(153.391759018835,122.670152477736,122.670152477736)" rx="2" ry="2" />
<text  x="126.85" y="225.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>CreateFunctionSpace (4,339 us, 0.01%)</title><rect x="1187.3" y="199" width="0.1" height="15.0" fill="rgb(146.182667317151,159.923751832092,146.182667317151)" rx="2" ry="2" />
<text  x="1190.31" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,170 us, 0.02%)</title><rect x="13.2" y="119" width="0.3" height="15.0" fill="rgb(143.114256937399,160.423260498563,143.114256937399)" rx="2" ry="2" />
<text  x="16.24" y="129.5" ></text>
</g>
<g >
<title>ParLoopExecute (36,940,082 us, 90.07%)</title><rect x="123.8" y="183" width="1062.9" height="15.0" fill="rgb(134.567690087458,161.814562078786,134.567690087458)" rx="2" ry="2" />
<text  x="126.85" y="193.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,309 us, 0.02%)</title><rect x="102.0" y="103" width="0.3" height="15.0" fill="rgb(149.376358264351,149.376358264351,116.20850543493)" rx="2" ry="2" />
<text  x="105.00" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,986 us, 0.02%)</title><rect x="101.5" y="103" width="0.2" height="15.0" fill="rgb(109.973340360337,109.973340360337,148.704517489097)" rx="2" ry="2" />
<text  x="104.48" y="113.5" ></text>
</g>
<g >
<title>firedrake.__init__ (3,046,962 us, 7.43%)</title><rect x="13.8" y="71" width="87.7" height="15.0" fill="rgb(124.894072314145,149.416981711075,149.416981711075)" rx="2" ry="2" />
<text  x="16.82" y="81.5" >firedrake..</text>
</g>
<g >
<title>CreateFunctionSpace (7,615 us, 0.02%)</title><rect x="1187.1" y="151" width="0.2" height="15.0" fill="rgb(112.121798062782,146.10565134961,146.10565134961)" rx="2" ry="2" />
<text  x="1190.09" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (20,337 us, 0.05%)</title><rect x="101.7" y="71" width="0.6" height="15.0" fill="rgb(152.009785318963,112.075020778713,112.075020778713)" rx="2" ry="2" />
<text  x="104.68" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,888 us, 0.03%)</title><rect x="13.5" y="103" width="0.3" height="15.0" fill="rgb(125.865153814929,163.231254030128,125.865153814929)" rx="2" ry="2" />
<text  x="16.47" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (8,170 us, 0.02%)</title><rect x="13.2" y="87" width="0.3" height="15.0" fill="rgb(152.155862381467,152.155862381467,129.678410002492)" rx="2" ry="2" />
<text  x="16.24" y="97.5" ></text>
</g>
<g >
<title>firedrake (41,012,595 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(134.015688937796,161.904422731056,134.015688937796)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>SNESSolve (37,798,699 us, 92.16%)</title><rect x="102.5" y="103" width="1087.5" height="15.0" fill="rgb(155.624337022621,155.624337022621,146.487171725009)" rx="2" ry="2" />
<text  x="105.47" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,888 us, 0.03%)</title><rect x="13.5" y="87" width="0.3" height="15.0" fill="rgb(155.63576032125,155.63576032125,146.542530787597)" rx="2" ry="2" />
<text  x="16.47" y="97.5" ></text>
</g>
<g >
<title>PCSetUp (61,917 us, 0.15%)</title><rect x="1186.7" y="119" width="1.8" height="15.0" fill="rgb(117.438225754306,117.438225754306,150.149334016962)" rx="2" ry="2" />
<text  x="1189.67" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,028 us, 0.03%)</title><rect x="101.7" y="87" width="0.3" height="15.0" fill="rgb(148.283599910601,148.283599910601,110.912830335989)" rx="2" ry="2" />
<text  x="104.68" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (8,170 us, 0.02%)</title><rect x="13.2" y="103" width="0.3" height="15.0" fill="rgb(155.50556025013,138.875961917661,138.875961917661)" rx="2" ry="2" />
<text  x="16.24" y="113.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (112,605 us, 0.27%)</title><rect x="10.0" y="87" width="3.2" height="15.0" fill="rgb(153.130050647326,153.130050647326,134.399476213963)" rx="2" ry="2" />
<text  x="13.00" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (4,339 us, 0.01%)</title><rect x="1187.3" y="183" width="0.1" height="15.0" fill="rgb(147.12098672519,159.771002161016,147.12098672519)" rx="2" ry="2" />
<text  x="1190.31" y="193.5" ></text>
</g>
<g >
<title>HybridRHS (37,676,395 us, 91.87%)</title><rect x="102.7" y="167" width="1084.0" height="15.0" fill="rgb(131.875883708992,151.227080961591,151.227080961591)" rx="2" ry="2" />
<text  x="105.66" y="177.5" >HybridRHS</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,986 us, 0.02%)</title><rect x="101.5" y="119" width="0.2" height="15.0" fill="rgb(125.889621549178,125.889621549178,151.785088041776)" rx="2" ry="2" />
<text  x="104.48" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (9,309 us, 0.02%)</title><rect x="102.0" y="87" width="0.3" height="15.0" fill="rgb(132.833214315211,93.510111682728,132.833214315211)" rx="2" ry="2" />
<text  x="105.00" y="97.5" ></text>
</g>
<g >
<title>perfsolve (37,798,699 us, 92.16%)</title><rect x="102.5" y="71" width="1087.5" height="15.0" fill="rgb(144.08070534876,160.265931687411,144.08070534876)" rx="2" ry="2" />
<text  x="105.47" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,888 us, 0.03%)</title><rect x="13.5" y="119" width="0.3" height="15.0" fill="rgb(152.824643026258,152.824643026258,132.919423896481)" rx="2" ry="2" />
<text  x="16.47" y="129.5" ></text>
</g>
<g >
<title>all (41,012,595 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(130.466262407632,150.861623587164,150.861623587164)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (6,948 us, 0.02%)</title><rect x="102.3" y="71" width="0.2" height="15.0" fill="rgb(126.565556275028,163.117235024995,126.565556275028)" rx="2" ry="2" />
<text  x="105.27" y="81.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (8,997 us, 0.02%)</title><rect x="1188.5" y="151" width="0.2" height="15.0" fill="rgb(148.492265841936,148.492265841936,111.92405754169)" rx="2" ry="2" />
<text  x="1191.46" y="161.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (6,736 us, 0.02%)</title><rect x="102.5" y="183" width="0.2" height="15.0" fill="rgb(137.901484140086,152.789273665948,152.789273665948)" rx="2" ry="2" />
<text  x="105.47" y="193.5" ></text>
</g>
<g >
<title>CreateExtMesh (120,775 us, 0.29%)</title><rect x="10.0" y="71" width="3.5" height="15.0" fill="rgb(141.177827013839,141.177827013839,154.744095551066)" rx="2" ry="2" />
<text  x="13.00" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (5,402 us, 0.01%)</title><rect x="1189.8" y="151" width="0.2" height="15.0" fill="rgb(152.112156182706,152.112156182706,129.466603039265)" rx="2" ry="2" />
<text  x="1192.84" y="161.5" ></text>
</g>
<g >
<title>PCApply (37,683,131 us, 91.88%)</title><rect x="102.5" y="135" width="1084.2" height="15.0" fill="rgb(111.080697493629,145.835736387237,145.835736387237)" rx="2" ry="2" />
<text  x="105.47" y="145.5" >PCApply</text>
</g>
<g >
<title>ParLoopExecute (8,997 us, 0.02%)</title><rect x="1188.5" y="135" width="0.2" height="15.0" fill="rgb(151.96084516652,151.96084516652,128.733326576214)" rx="2" ry="2" />
<text  x="1191.46" y="145.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,986 us, 0.02%)</title><rect x="101.5" y="87" width="0.2" height="15.0" fill="rgb(152.846036499734,118.486279831295,118.486279831295)" rx="2" ry="2" />
<text  x="104.48" y="97.5" ></text>
</g>
<g >
<title>SNESFunctionEval (53,651 us, 0.13%)</title><rect x="1188.5" y="119" width="1.5" height="15.0" fill="rgb(139.668672710078,139.668672710078,154.452001169693)" rx="2" ry="2" />
<text  x="1191.46" y="129.5" ></text>
</g>
</g>
</svg>
