<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>CreateMesh (17,375 us, 0.37%)</title><rect x="342.7" y="71" width="4.4" height="15.0" fill="rgb(137.534971320088,161.33151629673,137.534971320088)" rx="2" ry="2" />
<text  x="345.73" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,754 us, 0.19%)</title><rect x="328.5" y="151" width="2.2" height="15.0" fill="rgb(126.899738720983,126.899738720983,151.980594591158)" rx="2" ry="2" />
<text  x="331.52" y="161.5" ></text>
</g>
<g >
<title>DMPlexSymmetrize (2,064 us, 0.04%)</title><rect x="352.9" y="87" width="0.5" height="15.0" fill="rgb(139.002056003716,139.002056003716,154.322978581364)" rx="2" ry="2" />
<text  x="355.86" y="97.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (1,081 us, 0.02%)</title><rect x="1072.0" y="119" width="0.3" height="15.0" fill="rgb(148.723274561358,148.723274561358,113.043561335813)" rx="2" ry="2" />
<text  x="1075.03" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,566 us, 0.03%)</title><rect x="1189.6" y="183" width="0.4" height="15.0" fill="rgb(152.867144459186,118.648107520427,118.648107520427)" rx="2" ry="2" />
<text  x="1192.61" y="193.5" ></text>
</g>
<g >
<title>DMPlexInterp (3,589 us, 0.08%)</title><rect x="1066.3" y="119" width="0.9" height="15.0" fill="rgb(141.610245461672,153.750804378952,153.750804378952)" rx="2" ry="2" />
<text  x="1069.31" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (5,175 us, 0.11%)</title><rect x="1065.9" y="103" width="1.3" height="15.0" fill="rgb(129.723006891389,150.668927712582,150.668927712582)" rx="2" ry="2" />
<text  x="1068.91" y="113.5" ></text>
</g>
<g >
<title>PetscBarrier (25,167 us, 0.53%)</title><rect x="347.1" y="71" width="6.3" height="15.0" fill="rgb(120.575627289518,148.297384852838,148.297384852838)" rx="2" ry="2" />
<text  x="350.08" y="81.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,840,440 us, 60.28%)</title><rect x="353.4" y="71" width="711.3" height="15.0" fill="rgb(145.898156159867,126.98902515966,145.898156159867)" rx="2" ry="2" />
<text  x="356.38" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>CreateExtMesh (1,282,918 us, 27.23%)</title><rect x="10.0" y="71" width="321.3" height="15.0" fill="rgb(130.020111500359,150.745954833427,150.745954833427)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,233,888 us, 26.19%)</title><rect x="19.5" y="119" width="309.0" height="15.0" fill="rgb(128.805936119719,128.805936119719,152.349536023172)" rx="2" ry="2" />
<text  x="22.53" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_unifor..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (902 us, 0.02%)</title><rect x="1064.9" y="87" width="0.2" height="15.0" fill="rgb(156.732191193286,148.280132481858,148.280132481858)" rx="2" ry="2" />
<text  x="1067.90" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,432 us, 0.14%)</title><rect x="1188.4" y="135" width="1.6" height="15.0" fill="rgb(123.541405928137,149.066290425813,149.066290425813)" rx="2" ry="2" />
<text  x="1191.39" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,754 us, 0.19%)</title><rect x="328.5" y="119" width="2.2" height="15.0" fill="rgb(155.670102175526,155.670102175526,146.708956696778)" rx="2" ry="2" />
<text  x="331.52" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,846 us, 0.06%)</title><rect x="1075.0" y="119" width="0.7" height="15.0" fill="rgb(156.624339113217,147.453266534662,147.453266534662)" rx="2" ry="2" />
<text  x="1078.02" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (456,298 us, 9.68%)</title><rect x="1075.7" y="87" width="114.3" height="15.0" fill="rgb(118.900794253281,147.86316888048,147.86316888048)" rx="2" ry="2" />
<text  x="1078.73" y="97.5" >SNESSolve</text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (735 us, 0.02%)</title><rect x="330.5" y="167" width="0.2" height="15.0" fill="rgb(153.597601732426,124.248279948601,124.248279948601)" rx="2" ry="2" />
<text  x="333.53" y="177.5" ></text>
</g>
<g >
<title>Mesh: numbering (5,853 us, 0.12%)</title><rect x="344.7" y="87" width="1.5" height="15.0" fill="rgb(154.306496175256,129.683137343631,129.683137343631)" rx="2" ry="2" />
<text  x="347.70" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (42,810 us, 0.91%)</title><rect x="332.0" y="119" width="10.7" height="15.0" fill="rgb(142.048849015099,117.125175601191,142.048849015099)" rx="2" ry="2" />
<text  x="335.01" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,210 us, 0.03%)</title><rect x="331.0" y="87" width="0.3" height="15.0" fill="rgb(151.374834443564,151.374834443564,125.893428457273)" rx="2" ry="2" />
<text  x="333.97" y="97.5" ></text>
</g>
<g >
<title>DMPlexStratify (3,419 us, 0.07%)</title><rect x="352.0" y="87" width="0.9" height="15.0" fill="rgb(135.296721866532,99.8228497829887,135.296721866532)" rx="2" ry="2" />
<text  x="355.01" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,233,121 us, 26.17%)</title><rect x="19.7" y="135" width="308.8" height="15.0" fill="rgb(128.755054312721,150.417977044039,150.417977044039)" rx="2" ry="2" />
<text  x="22.72" y="145.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,710 us, 0.04%)</title><rect x="1064.7" y="71" width="0.4" height="15.0" fill="rgb(135.088370941522,161.729800079287,135.088370941522)" rx="2" ry="2" />
<text  x="1067.70" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (3,588 us, 0.08%)</title><rect x="343.8" y="87" width="0.9" height="15.0" fill="rgb(147.946178550011,132.237082534404,147.946178550011)" rx="2" ry="2" />
<text  x="346.80" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (42,810 us, 0.91%)</title><rect x="332.0" y="103" width="10.7" height="15.0" fill="rgb(153.838329012606,126.093855763316,126.093855763316)" rx="2" ry="2" />
<text  x="335.01" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (8,754 us, 0.19%)</title><rect x="328.5" y="87" width="2.2" height="15.0" fill="rgb(105.683952344903,144.436580237567,144.436580237567)" rx="2" ry="2" />
<text  x="331.52" y="97.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (8,318 us, 0.18%)</title><rect x="1065.1" y="71" width="2.1" height="15.0" fill="rgb(154.505791466016,131.211067906125,131.211067906125)" rx="2" ry="2" />
<text  x="1068.12" y="81.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (7,568 us, 0.16%)</title><rect x="336.5" y="135" width="1.9" height="15.0" fill="rgb(147.92424242484,147.92424242484,109.171328674222)" rx="2" ry="2" />
<text  x="339.51" y="145.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (13,447 us, 0.29%)</title><rect x="1068.9" y="87" width="3.4" height="15.0" fill="rgb(148.750883820903,148.750883820903,113.177360055143)" rx="2" ry="2" />
<text  x="1071.93" y="97.5" ></text>
</g>
<g >
<title>SNESFunctionEval (456,298 us, 9.68%)</title><rect x="1075.7" y="103" width="114.3" height="15.0" fill="rgb(136.896958581845,161.435378835514,136.896958581845)" rx="2" ry="2" />
<text  x="1078.73" y="113.5" >SNESFunction..</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,566 us, 0.03%)</title><rect x="1189.6" y="167" width="0.4" height="15.0" fill="rgb(139.600603736912,110.851547075838,139.600603736912)" rx="2" ry="2" />
<text  x="1192.61" y="177.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,780 us, 0.08%)</title><rect x="1189.1" y="151" width="0.9" height="15.0" fill="rgb(145.022672329912,154.635507641088,154.635507641088)" rx="2" ry="2" />
<text  x="1192.05" y="161.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (45,733 us, 0.97%)</title><rect x="331.3" y="71" width="11.4" height="15.0" fill="rgb(153.25562292017,121.626442387967,121.626442387967)" rx="2" ry="2" />
<text  x="334.27" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,081 us, 0.02%)</title><rect x="1072.0" y="103" width="0.3" height="15.0" fill="rgb(155.406719942818,155.406719942818,145.432565876734)" rx="2" ry="2" />
<text  x="1075.03" y="113.5" ></text>
</g>
<g >
<title>all (4,712,002 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(121.237607715413,148.4690094077,148.4690094077)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (456,298 us, 9.68%)</title><rect x="1075.7" y="119" width="114.3" height="15.0" fill="rgb(154.834577119139,133.731757913397,133.731757913397)" rx="2" ry="2" />
<text  x="1078.73" y="129.5" >firedrake.ts..</text>
</g>
<g >
<title>CreateMesh (1,261 us, 0.03%)</title><rect x="1065.6" y="119" width="0.3" height="15.0" fill="rgb(148.560511336344,148.560511336344,112.254785706896)" rx="2" ry="2" />
<text  x="1068.59" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,754 us, 0.19%)</title><rect x="328.5" y="135" width="2.2" height="15.0" fill="rgb(109.339262227613,145.384253170122,145.384253170122)" rx="2" ry="2" />
<text  x="331.52" y="145.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (456,298 us, 9.68%)</title><rect x="1075.7" y="71" width="114.3" height="15.0" fill="rgb(139.393674424092,161.028936721659,139.393674424092)" rx="2" ry="2" />
<text  x="1078.73" y="81.5" >firedrake.va..</text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (878 us, 0.02%)</title><rect x="331.5" y="87" width="0.2" height="15.0" fill="rgb(151.738854787417,151.738854787417,127.657527046712)" rx="2" ry="2" />
<text  x="334.51" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (859 us, 0.02%)</title><rect x="1189.8" y="199" width="0.2" height="15.0" fill="rgb(122.600552067175,148.822365350749,148.822365350749)" rx="2" ry="2" />
<text  x="1192.78" y="209.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (1,022 us, 0.02%)</title><rect x="330.7" y="87" width="0.3" height="15.0" fill="rgb(135.670733941442,100.781255724946,135.670733941442)" rx="2" ry="2" />
<text  x="333.71" y="97.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (8,318 us, 0.18%)</title><rect x="1065.1" y="87" width="2.1" height="15.0" fill="rgb(124.356899694871,124.356899694871,151.488432199007)" rx="2" ry="2" />
<text  x="1068.12" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (12,366 us, 0.26%)</title><rect x="1068.9" y="103" width="3.1" height="15.0" fill="rgb(144.465009616894,154.490928419195,154.490928419195)" rx="2" ry="2" />
<text  x="1071.93" y="113.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,913 us, 0.19%)</title><rect x="1073.5" y="87" width="2.2" height="15.0" fill="rgb(155.123800238601,135.94913516261,135.94913516261)" rx="2" ry="2" />
<text  x="1076.50" y="97.5" ></text>
</g>
<g >
<title>Mesh: reorder (3,641 us, 0.08%)</title><rect x="346.2" y="87" width="0.9" height="15.0" fill="rgb(125.067173530384,149.461859804174,149.461859804174)" rx="2" ry="2" />
<text  x="349.17" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,234,844 us, 26.21%)</title><rect x="19.3" y="103" width="309.2" height="15.0" fill="rgb(126.800298304887,149.911188449415,149.911188449415)" rx="2" ry="2" />
<text  x="22.29" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>CreateFunctionSpace (8,754 us, 0.19%)</title><rect x="328.5" y="103" width="2.2" height="15.0" fill="rgb(120.300389652431,120.300389652431,150.703301223051)" rx="2" ry="2" />
<text  x="331.52" y="113.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (8,913 us, 0.19%)</title><rect x="1073.5" y="103" width="2.2" height="15.0" fill="rgb(152.777822316166,117.963304423938,117.963304423938)" rx="2" ry="2" />
<text  x="1076.50" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (20,338 us, 0.43%)</title><rect x="1067.2" y="71" width="5.1" height="15.0" fill="rgb(110.06498962276,145.572404717012,145.572404717012)" rx="2" ry="2" />
<text  x="1070.21" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (13,705 us, 0.29%)</title><rect x="1072.3" y="71" width="3.4" height="15.0" fill="rgb(130.550759774339,130.550759774339,152.687243827291)" rx="2" ry="2" />
<text  x="1075.30" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (6,891 us, 0.15%)</title><rect x="1067.2" y="87" width="1.7" height="15.0" fill="rgb(145.71809364399,145.71809364399,155.622856834321)" rx="2" ry="2" />
<text  x="1070.21" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (43,893 us, 0.93%)</title><rect x="331.7" y="87" width="11.0" height="15.0" fill="rgb(148.210261232715,148.210261232715,110.557419820079)" rx="2" ry="2" />
<text  x="334.73" y="97.5" ></text>
</g>
<g >
<title>firedrake (4,712,002 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(115.932059960345,147.093497026756,147.093497026756)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (17,269 us, 0.37%)</title><rect x="338.4" y="135" width="4.3" height="15.0" fill="rgb(156.725743681197,148.230701555843,148.230701555843)" rx="2" ry="2" />
<text  x="341.40" y="145.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,271,098 us, 26.98%)</title><rect x="10.2" y="87" width="318.3" height="15.0" fill="rgb(145.503008743165,154.760039303783,154.760039303783)" rx="2" ry="2" />
<text  x="13.21" y="97.5" >firedrake.extrusion_utils.make_extruded..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (6,067 us, 0.13%)</title><rect x="1073.5" y="119" width="1.5" height="15.0" fill="rgb(135.107008826085,135.107008826085,153.569098482468)" rx="2" ry="2" />
<text  x="1076.50" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (784 us, 0.02%)</title><rect x="342.5" y="151" width="0.2" height="15.0" fill="rgb(153.188509305232,121.111904673447,121.111904673447)" rx="2" ry="2" />
<text  x="345.53" y="161.5" ></text>
</g>
<g >
<title>CreateMesh (1,261 us, 0.03%)</title><rect x="1065.6" y="103" width="0.3" height="15.0" fill="rgb(147.783378035371,147.783378035371,108.488678171411)" rx="2" ry="2" />
<text  x="1068.59" y="113.5" ></text>
</g>
</g>
</svg>
