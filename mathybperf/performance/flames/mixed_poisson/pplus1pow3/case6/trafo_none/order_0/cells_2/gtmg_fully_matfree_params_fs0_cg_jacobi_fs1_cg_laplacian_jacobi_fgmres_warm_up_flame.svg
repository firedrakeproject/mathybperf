<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>firedrake.ufl_expr.adjoint (10,247 us, 0.21%)</title><rect x="1075.9" y="103" width="2.5" height="15.0" fill="rgb(156.373536369561,145.530445499965,145.530445499965)" rx="2" ry="2" />
<text  x="1078.91" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,656 us, 0.03%)</title><rect x="1189.6" y="183" width="0.4" height="15.0" fill="rgb(111.68238150391,111.68238150391,149.035299645918)" rx="2" ry="2" />
<text  x="1192.59" y="193.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (5,291 us, 0.11%)</title><rect x="1073.4" y="103" width="1.3" height="15.0" fill="rgb(142.081861041721,153.873075084891,153.873075084891)" rx="2" ry="2" />
<text  x="1076.38" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (14,556 us, 0.30%)</title><rect x="328.1" y="151" width="3.5" height="15.0" fill="rgb(133.487884607828,161.990344366168,133.487884607828)" rx="2" ry="2" />
<text  x="331.06" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (50,502 us, 1.05%)</title><rect x="333.0" y="119" width="12.4" height="15.0" fill="rgb(155.361684137659,155.361684137659,145.214315436347)" rx="2" ry="2" />
<text  x="336.02" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,210,967 us, 25.14%)</title><rect x="31.2" y="119" width="296.7" height="15.0" fill="rgb(147.894862313994,147.894862313994,109.028948137049)" rx="2" ry="2" />
<text  x="34.22" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_unif..</text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,691 us, 0.14%)</title><rect x="1188.4" y="135" width="1.6" height="15.0" fill="rgb(111.264946759422,145.883504715406,145.883504715406)" rx="2" ry="2" />
<text  x="1191.36" y="145.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,377 us, 0.09%)</title><rect x="1079.8" y="119" width="1.1" height="15.0" fill="rgb(153.385864299183,122.624959627069,122.624959627069)" rx="2" ry="2" />
<text  x="1082.79" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (5,008 us, 0.10%)</title><rect x="1074.7" y="87" width="1.2" height="15.0" fill="rgb(125.525259007106,125.525259007106,151.71456625944)" rx="2" ry="2" />
<text  x="1077.68" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (20,076 us, 0.42%)</title><rect x="345.4" y="71" width="4.9" height="15.0" fill="rgb(137.283222126731,104.913256699748,137.283222126731)" rx="2" ry="2" />
<text  x="348.40" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (1,355 us, 0.03%)</title><rect x="345.1" y="151" width="0.3" height="15.0" fill="rgb(126.772005431531,149.903853260027,149.903853260027)" rx="2" ry="2" />
<text  x="348.06" y="161.5" ></text>
</g>
<g >
<title>PetscBarrier (25,337 us, 0.53%)</title><rect x="350.3" y="71" width="6.2" height="15.0" fill="rgb(131.528040438742,151.136899373007,151.136899373007)" rx="2" ry="2" />
<text  x="353.31" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,125 us, 0.02%)</title><rect x="1078.4" y="103" width="0.3" height="15.0" fill="rgb(155.396457485192,138.039507386473,138.039507386473)" rx="2" ry="2" />
<text  x="1081.42" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (14,091 us, 0.29%)</title><rect x="1071.2" y="71" width="3.5" height="15.0" fill="rgb(146.136058304801,159.93133934573,146.136058304801)" rx="2" ry="2" />
<text  x="1074.23" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,209,997 us, 25.12%)</title><rect x="31.5" y="135" width="296.4" height="15.0" fill="rgb(129.449574670399,129.449574670399,152.474111226529)" rx="2" ry="2" />
<text  x="34.46" y="145.5" >pyop2.global_kernel.GlobalKernel.com..</text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (1,196 us, 0.02%)</title><rect x="331.6" y="87" width="0.3" height="15.0" fill="rgb(152.536323182343,116.111811064633,116.111811064633)" rx="2" ry="2" />
<text  x="334.63" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (861 us, 0.02%)</title><rect x="1071.0" y="87" width="0.2" height="15.0" fill="rgb(155.234889631159,136.800820505551,136.800820505551)" rx="2" ry="2" />
<text  x="1074.02" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (861 us, 0.02%)</title><rect x="1071.0" y="119" width="0.2" height="15.0" fill="rgb(147.331019380881,159.736810798461,147.331019380881)" rx="2" ry="2" />
<text  x="1074.02" y="129.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,315,535 us, 27.31%)</title><rect x="10.0" y="71" width="322.3" height="15.0" fill="rgb(151.344243251588,151.344243251588,125.745178834619)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (20,396 us, 0.42%)</title><rect x="340.4" y="135" width="5.0" height="15.0" fill="rgb(138.213453036815,161.221065784705,138.213453036815)" rx="2" ry="2" />
<text  x="343.40" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (4,044 us, 0.08%)</title><rect x="1189.0" y="151" width="1.0" height="15.0" fill="rgb(148.041501529547,148.041501529547,156.072548683138)" rx="2" ry="2" />
<text  x="1192.01" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (861 us, 0.02%)</title><rect x="1071.0" y="103" width="0.2" height="15.0" fill="rgb(132.85014786929,162.094161974767,132.85014786929)" rx="2" ry="2" />
<text  x="1074.02" y="113.5" ></text>
</g>
<g >
<title>DMPlexStratify (3,481 us, 0.07%)</title><rect x="355.2" y="87" width="0.8" height="15.0" fill="rgb(139.310255100518,110.107528695078,139.310255100518)" rx="2" ry="2" />
<text  x="358.17" y="97.5" ></text>
</g>
<g >
<title>SNESFunctionEval (442,704 us, 9.19%)</title><rect x="1081.6" y="103" width="108.4" height="15.0" fill="rgb(110.591144361314,110.591144361314,148.824092457029)" rx="2" ry="2" />
<text  x="1084.55" y="113.5" >SNESFunction..</text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,296,485 us, 26.92%)</title><rect x="10.3" y="87" width="317.6" height="15.0" fill="rgb(111.340098588888,145.902988523045,145.902988523045)" rx="2" ry="2" />
<text  x="13.27" y="97.5" >firedrake.extrusion_utils.make_extruded..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,372 us, 0.24%)</title><rect x="1075.9" y="87" width="2.8" height="15.0" fill="rgb(134.118421982683,96.8034563306261,134.118421982683)" rx="2" ry="2" />
<text  x="1078.91" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (896 us, 0.02%)</title><rect x="1189.8" y="199" width="0.2" height="15.0" fill="rgb(156.393751421649,145.685427565975,145.685427565975)" rx="2" ry="2" />
<text  x="1192.78" y="209.5" ></text>
</g>
<g >
<title>CreateMesh (3,675 us, 0.08%)</title><rect x="1072.5" y="119" width="0.9" height="15.0" fill="rgb(136.231774592458,102.218922393173,136.231774592458)" rx="2" ry="2" />
<text  x="1075.48" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (14,556 us, 0.30%)</title><rect x="328.1" y="135" width="3.5" height="15.0" fill="rgb(140.13846109769,112.22980656283,140.13846109769)" rx="2" ry="2" />
<text  x="331.06" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (51,636 us, 1.07%)</title><rect x="332.7" y="87" width="12.7" height="15.0" fill="rgb(113.970232994397,146.58487522077,146.58487522077)" rx="2" ry="2" />
<text  x="335.75" y="97.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (14,091 us, 0.29%)</title><rect x="1071.2" y="87" width="3.5" height="15.0" fill="rgb(137.605352955236,152.71249891432,152.71249891432)" rx="2" ry="2" />
<text  x="1074.23" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (1,210 us, 0.03%)</title><rect x="331.3" y="167" width="0.3" height="15.0" fill="rgb(115.904244574835,147.086285630513,147.086285630513)" rx="2" ry="2" />
<text  x="334.33" y="177.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (1,125 us, 0.02%)</title><rect x="1078.4" y="119" width="0.3" height="15.0" fill="rgb(151.925309656271,151.925309656271,128.561116026543)" rx="2" ry="2" />
<text  x="1081.42" y="129.5" ></text>
</g>
<g >
<title>firedrake (4,816,958 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(143.412650251873,143.412650251873,155.176641984234)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (833 us, 0.02%)</title><rect x="331.1" y="167" width="0.2" height="15.0" fill="rgb(153.780159108359,153.780159108359,137.550001832817)" rx="2" ry="2" />
<text  x="334.12" y="177.5" ></text>
</g>
<g >
<title>CreateMesh (3,675 us, 0.08%)</title><rect x="1072.5" y="103" width="0.9" height="15.0" fill="rgb(155.39193776122,138.004856169357,138.004856169357)" rx="2" ry="2" />
<text  x="1075.48" y="113.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (9,611 us, 0.20%)</title><rect x="338.0" y="135" width="2.4" height="15.0" fill="rgb(132.643294001645,162.127835860197,132.643294001645)" rx="2" ry="2" />
<text  x="341.04" y="145.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,212,104 us, 25.16%)</title><rect x="30.9" y="103" width="297.0" height="15.0" fill="rgb(154.533835347836,131.426071000075,131.426071000075)" rx="2" ry="2" />
<text  x="33.94" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (16,380 us, 0.34%)</title><rect x="1074.7" y="71" width="4.0" height="15.0" fill="rgb(132.088132121365,162.21821105001,132.088132121365)" rx="2" ry="2" />
<text  x="1077.68" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (15,327 us, 0.32%)</title><rect x="327.9" y="87" width="3.7" height="15.0" fill="rgb(104.098405225456,144.025512465859,144.025512465859)" rx="2" ry="2" />
<text  x="330.87" y="97.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,212 us, 0.15%)</title><rect x="1079.8" y="103" width="1.8" height="15.0" fill="rgb(127.050535767577,163.038284875046,127.050535767577)" rx="2" ry="2" />
<text  x="1082.79" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (3,205 us, 0.07%)</title><rect x="346.5" y="87" width="0.8" height="15.0" fill="rgb(151.725836596905,151.725836596905,127.594438892694)" rx="2" ry="2" />
<text  x="349.50" y="97.5" ></text>
</g>
<g >
<title>Mesh: reorder (4,753 us, 0.10%)</title><rect x="349.1" y="87" width="1.2" height="15.0" fill="rgb(150.110947771724,137.784303665043,150.110947771724)" rx="2" ry="2" />
<text  x="352.15" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (442,704 us, 9.19%)</title><rect x="1081.6" y="71" width="108.4" height="15.0" fill="rgb(152.007334144312,112.056228439727,112.056228439727)" rx="2" ry="2" />
<text  x="1084.55" y="81.5" >firedrake.va..</text>
</g>
<g >
<title>all (4,816,958 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(156.619967700907,147.419752373617,147.419752373617)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (50,502 us, 1.05%)</title><rect x="333.0" y="103" width="12.4" height="15.0" fill="rgb(156.586831319026,147.165706779198,147.165706779198)" rx="2" ry="2" />
<text  x="336.02" y="113.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (442,704 us, 9.19%)</title><rect x="1081.6" y="119" width="108.4" height="15.0" fill="rgb(110.479599007649,110.479599007649,148.802503033738)" rx="2" ry="2" />
<text  x="1084.55" y="129.5" >firedrake.ts..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (11,676 us, 0.24%)</title><rect x="1078.7" y="71" width="2.9" height="15.0" fill="rgb(134.417934828817,134.417934828817,153.435729321707)" rx="2" ry="2" />
<text  x="1081.69" y="81.5" ></text>
</g>
<g >
<title>DMPlexSymmetrize (2,043 us, 0.04%)</title><rect x="356.0" y="87" width="0.5" height="15.0" fill="rgb(115.512068687742,115.512068687742,149.776529423434)" rx="2" ry="2" />
<text  x="359.02" y="97.5" ></text>
</g>
<g >
<title>SNESSolve (442,704 us, 9.19%)</title><rect x="1081.6" y="87" width="108.4" height="15.0" fill="rgb(153.114833747107,120.547058727824,120.547058727824)" rx="2" ry="2" />
<text  x="1084.55" y="97.5" >SNESSolve</text>
</g>
<g >
<title>CreateFunctionSpace (15,327 us, 0.32%)</title><rect x="327.9" y="103" width="3.7" height="15.0" fill="rgb(112.925215152793,146.313944669243,146.313944669243)" rx="2" ry="2" />
<text  x="330.87" y="113.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,212 us, 0.15%)</title><rect x="1079.8" y="87" width="1.8" height="15.0" fill="rgb(152.082398202774,112.631719554602,112.631719554602)" rx="2" ry="2" />
<text  x="1082.79" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,926 us, 0.04%)</title><rect x="1070.8" y="71" width="0.4" height="15.0" fill="rgb(136.300972348927,136.300972348927,153.800188196567)" rx="2" ry="2" />
<text  x="1073.76" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,410 us, 0.03%)</title><rect x="331.9" y="87" width="0.4" height="15.0" fill="rgb(132.275768253485,151.330754732385,151.330754732385)" rx="2" ry="2" />
<text  x="334.92" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (929 us, 0.02%)</title><rect x="332.5" y="87" width="0.2" height="15.0" fill="rgb(137.771183295589,152.755491965523,152.755491965523)" rx="2" ry="2" />
<text  x="335.52" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,835 us, 0.06%)</title><rect x="1080.9" y="119" width="0.7" height="15.0" fill="rgb(153.721260837323,125.196333086146,125.196333086146)" rx="2" ry="2" />
<text  x="1083.86" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (15,327 us, 0.32%)</title><rect x="327.9" y="119" width="3.7" height="15.0" fill="rgb(144.360424822865,123.048588608591,144.360424822865)" rx="2" ry="2" />
<text  x="330.87" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (53,606 us, 1.11%)</title><rect x="332.3" y="71" width="13.1" height="15.0" fill="rgb(143.059471982001,154.126529773111,154.126529773111)" rx="2" ry="2" />
<text  x="335.26" y="81.5" ></text>
</g>
<g >
<title>Mesh: numbering (7,628 us, 0.16%)</title><rect x="347.3" y="87" width="1.8" height="15.0" fill="rgb(128.596188152235,150.37678952095,150.37678952095)" rx="2" ry="2" />
<text  x="350.28" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,656 us, 0.03%)</title><rect x="1189.6" y="167" width="0.4" height="15.0" fill="rgb(128.650168186518,150.390784344653,150.390784344653)" rx="2" ry="2" />
<text  x="1192.59" y="177.5" ></text>
</g>
<g >
<title>DMPlexInterp (3,638 us, 0.08%)</title><rect x="1073.8" y="119" width="0.9" height="15.0" fill="rgb(138.334825215195,138.334825215195,154.193837138425)" rx="2" ry="2" />
<text  x="1076.79" y="129.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,915,627 us, 60.53%)</title><rect x="356.5" y="71" width="714.3" height="15.0" fill="rgb(155.042923023814,155.042923023814,143.669550038485)" rx="2" ry="2" />
<text  x="359.52" y="81.5" >firedrake.__init__</text>
</g>
</g>
</svg>
