<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="283" onload="init(evt)" viewBox="0 0 1200 283" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="283.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="265" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="265" > </text>
<g id="frames">
<g >
<title>firedrake.mesh.MeshTopology._facets (18,922 us, 0.50%)</title><rect x="61.9" y="135" width="5.8" height="15.0" fill="rgb(148.27478044873,159.583175275788,148.27478044873)" rx="2" ry="2" />
<text  x="64.88" y="145.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (132,403 us, 3.47%)</title><rect x="10.2" y="87" width="41.0" height="15.0" fill="rgb(112.665562443405,112.665562443405,149.225592730982)" rx="2" ry="2" />
<text  x="13.24" y="97.5" >fir..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,944 us, 0.13%)</title><rect x="1048.9" y="87" width="1.5" height="15.0" fill="rgb(152.426726568649,152.426726568649,130.991059524992)" rx="2" ry="2" />
<text  x="1051.86" y="97.5" ></text>
</g>
<g >
<title>all (3,815,795 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(155.747747934269,155.747747934269,147.08523998915)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,111 us, 0.03%)</title><rect x="1053.5" y="103" width="0.3" height="15.0" fill="rgb(152.389496288223,152.389496288223,130.810635858313)" rx="2" ry="2" />
<text  x="1056.48" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (2,035 us, 0.05%)</title><rect x="1189.4" y="167" width="0.6" height="15.0" fill="rgb(138.931423520341,138.931423520341,154.309307778131)" rx="2" ry="2" />
<text  x="1192.37" y="177.5" ></text>
</g>
<g >
<title>CreateMesh (1,272 us, 0.03%)</title><rect x="1046.9" y="119" width="0.4" height="15.0" fill="rgb(132.987899224703,93.9064917633018,132.987899224703)" rx="2" ry="2" />
<text  x="1049.88" y="129.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (6,837 us, 0.18%)</title><rect x="59.8" y="135" width="2.1" height="15.0" fill="rgb(151.826395012752,151.826395012752,128.081760446412)" rx="2" ry="2" />
<text  x="62.77" y="145.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (8,269 us, 0.22%)</title><rect x="1046.3" y="87" width="2.6" height="15.0" fill="rgb(108.798661371752,145.244097392677,145.244097392677)" rx="2" ry="2" />
<text  x="1049.31" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (4,686 us, 0.12%)</title><rect x="1188.6" y="151" width="1.4" height="15.0" fill="rgb(123.816196658473,163.564805195132,123.816196658473)" rx="2" ry="2" />
<text  x="1191.55" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (11,094 us, 0.29%)</title><rect x="1053.8" y="71" width="3.5" height="15.0" fill="rgb(125.321559063913,149.527811609163,149.527811609163)" rx="2" ry="2" />
<text  x="1056.82" y="81.5" ></text>
</g>
<g >
<title>Mesh: numbering (7,193 us, 0.19%)</title><rect x="70.5" y="87" width="2.3" height="15.0" fill="rgb(122.323008975238,148.750409734321,148.750409734321)" rx="2" ry="2" />
<text  x="73.54" y="97.5" ></text>
</g>
<g >
<title>CreateExtMesh (143,792 us, 3.77%)</title><rect x="10.0" y="71" width="44.5" height="15.0" fill="rgb(154.321394788391,129.797360044333,129.797360044333)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >Cre..</text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (5,128 us, 0.13%)</title><rect x="1047.3" y="103" width="1.6" height="15.0" fill="rgb(149.101648531505,149.101648531505,114.877219806522)" rx="2" ry="2" />
<text  x="1050.28" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,307 us, 0.11%)</title><rect x="1055.0" y="119" width="1.3" height="15.0" fill="rgb(119.580898156036,148.039492114528,148.039492114528)" rx="2" ry="2" />
<text  x="1057.97" y="129.5" ></text>
</g>
<g >
<title>Mesh: reorder (4,342 us, 0.11%)</title><rect x="72.8" y="87" width="1.3" height="15.0" fill="rgb(133.578815631616,95.4207150560164,133.578815631616)" rx="2" ry="2" />
<text  x="75.77" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (97,284 us, 2.55%)</title><rect x="21.1" y="135" width="30.1" height="15.0" fill="rgb(145.907539065225,145.907539065225,155.659523690044)" rx="2" ry="2" />
<text  x="24.10" y="145.5" >p..</text>
</g>
<g >
<title>CreateMesh (20,627 us, 0.54%)</title><rect x="67.7" y="71" width="6.4" height="15.0" fill="rgb(153.983277851966,127.205130198405,127.205130198405)" rx="2" ry="2" />
<text  x="70.73" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (2,292 us, 0.06%)</title><rect x="1045.6" y="71" width="0.7" height="15.0" fill="rgb(115.438923440212,146.965646817833,146.965646817833)" rx="2" ry="2" />
<text  x="1048.60" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (697 us, 0.02%)</title><rect x="53.6" y="167" width="0.3" height="15.0" fill="rgb(153.73889711245,125.331544528786,125.331544528786)" rx="2" ry="2" />
<text  x="56.64" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,014 us, 0.03%)</title><rect x="54.2" y="87" width="0.3" height="15.0" fill="rgb(122.978085933168,148.920244501192,148.920244501192)" rx="2" ry="2" />
<text  x="57.15" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (694 us, 0.02%)</title><rect x="1046.1" y="87" width="0.2" height="15.0" fill="rgb(137.729761323034,161.29980629625,137.729761323034)" rx="2" ry="2" />
<text  x="1049.09" y="97.5" ></text>
</g>
<g >
<title>firedrake (3,815,795 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(137.078858703418,137.078858703418,153.950746845823)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>DMPlexSymmetrize (2,308 us, 0.06%)</title><rect x="81.9" y="87" width="0.7" height="15.0" fill="rgb(138.18003240192,161.226506353176,138.18003240192)" rx="2" ry="2" />
<text  x="84.92" y="97.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (429,274 us, 11.25%)</title><rect x="1057.3" y="119" width="132.7" height="15.0" fill="rgb(147.349534694441,147.349534694441,155.938619618279)" rx="2" ry="2" />
<text  x="1060.25" y="129.5" >firedrake.tsfc_..</text>
</g>
<g >
<title>CreateFunctionSpace (42,901 us, 1.12%)</title><rect x="54.5" y="71" width="13.2" height="15.0" fill="rgb(130.237926983884,150.80242551434,150.80242551434)" rx="2" ry="2" />
<text  x="57.47" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (7,425 us, 0.19%)</title><rect x="1187.7" y="135" width="2.3" height="15.0" fill="rgb(155.645400333326,139.948069222169,139.948069222169)" rx="2" ry="2" />
<text  x="1190.70" y="145.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (8,640 us, 0.23%)</title><rect x="51.2" y="103" width="2.7" height="15.0" fill="rgb(149.419760012685,136.013135032505,149.419760012685)" rx="2" ry="2" />
<text  x="54.19" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (8,269 us, 0.22%)</title><rect x="1046.3" y="71" width="2.6" height="15.0" fill="rgb(148.10588991021,148.10588991021,110.051620334094)" rx="2" ry="2" />
<text  x="1049.31" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (429,274 us, 11.25%)</title><rect x="1057.3" y="71" width="132.7" height="15.0" fill="rgb(154.490685830068,131.09525803052,131.09525803052)" rx="2" ry="2" />
<text  x="1060.25" y="81.5" >firedrake.varia..</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (16,032 us, 0.42%)</title><rect x="1048.9" y="71" width="4.9" height="15.0" fill="rgb(139.022579657726,139.022579657726,154.326950901495)" rx="2" ry="2" />
<text  x="1051.86" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (40,089 us, 1.05%)</title><rect x="55.3" y="103" width="12.4" height="15.0" fill="rgb(113.628351628711,146.496239311147,146.496239311147)" rx="2" ry="2" />
<text  x="58.34" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (97,911 us, 2.57%)</title><rect x="20.9" y="119" width="30.3" height="15.0" fill="rgb(152.638955382778,116.898657934634,116.898657934634)" rx="2" ry="2" />
<text  x="23.91" y="129.5" >P..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,088 us, 0.29%)</title><rect x="1050.4" y="87" width="3.4" height="15.0" fill="rgb(153.418172558417,153.418172558417,135.795759321559)" rx="2" ry="2" />
<text  x="1053.39" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (1,272 us, 0.03%)</title><rect x="1046.9" y="103" width="0.4" height="15.0" fill="rgb(133.947988612147,96.3667208186264,133.947988612147)" rx="2" ry="2" />
<text  x="1049.88" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,440 us, 0.04%)</title><rect x="1189.6" y="183" width="0.4" height="15.0" fill="rgb(139.264425753644,109.990090993712,139.264425753644)" rx="2" ry="2" />
<text  x="1192.55" y="193.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,374 us, 0.19%)</title><rect x="1055.0" y="103" width="2.3" height="15.0" fill="rgb(147.924501244409,147.924501244409,109.172582953673)" rx="2" ry="2" />
<text  x="1057.97" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (98,614 us, 2.58%)</title><rect x="20.7" y="103" width="30.5" height="15.0" fill="rgb(149.201753177182,149.201753177182,115.362342320189)" rx="2" ry="2" />
<text  x="23.69" y="113.5" >P..</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (8,640 us, 0.23%)</title><rect x="51.2" y="87" width="2.7" height="15.0" fill="rgb(141.599824752262,141.599824752262,154.825772532696)" rx="2" ry="2" />
<text  x="54.19" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (911 us, 0.02%)</title><rect x="67.5" y="151" width="0.2" height="15.0" fill="rgb(154.405225540929,154.405225540929,140.579169929116)" rx="2" ry="2" />
<text  x="70.45" y="161.5" ></text>
</g>
<g >
<title>firedrake.__init__ (3,113,944 us, 81.61%)</title><rect x="82.6" y="71" width="963.0" height="15.0" fill="rgb(143.49659511874,160.361019399275,143.49659511874)" rx="2" ry="2" />
<text  x="85.64" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,374 us, 0.19%)</title><rect x="1055.0" y="87" width="2.3" height="15.0" fill="rgb(155.917319679271,142.032784207745,142.032784207745)" rx="2" ry="2" />
<text  x="1057.97" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,640 us, 0.23%)</title><rect x="51.2" y="151" width="2.7" height="15.0" fill="rgb(143.889286617074,154.341666900723,154.341666900723)" rx="2" ry="2" />
<text  x="54.19" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,640 us, 0.23%)</title><rect x="51.2" y="119" width="2.7" height="15.0" fill="rgb(115.871231272238,147.077726626136,147.077726626136)" rx="2" ry="2" />
<text  x="54.19" y="129.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (807 us, 0.02%)</title><rect x="53.4" y="167" width="0.2" height="15.0" fill="rgb(155.741960729293,140.688365591246,140.688365591246)" rx="2" ry="2" />
<text  x="56.39" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (587 us, 0.02%)</title><rect x="1189.8" y="231" width="0.2" height="15.0" fill="rgb(150.923135388826,150.923135388826,123.704425345849)" rx="2" ry="2" />
<text  x="1192.82" y="241.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,640 us, 0.23%)</title><rect x="51.2" y="135" width="2.7" height="15.0" fill="rgb(143.393850746782,154.213220563981,154.213220563981)" rx="2" ry="2" />
<text  x="54.19" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (927 us, 0.02%)</title><rect x="54.7" y="87" width="0.3" height="15.0" fill="rgb(135.595220245343,161.647289727502,135.595220245343)" rx="2" ry="2" />
<text  x="57.73" y="97.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (1,111 us, 0.03%)</title><rect x="1053.5" y="119" width="0.3" height="15.0" fill="rgb(148.239428330089,148.239428330089,110.698768061199)" rx="2" ry="2" />
<text  x="1056.48" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (587 us, 0.02%)</title><rect x="1189.8" y="199" width="0.2" height="15.0" fill="rgb(141.649494937576,160.661710126441,141.649494937576)" rx="2" ry="2" />
<text  x="1192.82" y="209.5" ></text>
</g>
<g >
<title>PetscBarrier (27,570 us, 0.72%)</title><rect x="74.1" y="71" width="8.5" height="15.0" fill="rgb(152.914141367459,152.914141367459,133.353146626917)" rx="2" ry="2" />
<text  x="77.11" y="81.5" ></text>
</g>
<g >
<title>DMPlexStratify (579 us, 0.02%)</title><rect x="1048.7" y="135" width="0.2" height="15.0" fill="rgb(131.954853365812,131.954853365812,152.959003877254)" rx="2" ry="2" />
<text  x="1051.68" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (587 us, 0.02%)</title><rect x="1189.8" y="215" width="0.2" height="15.0" fill="rgb(145.837622188815,126.833906858838,145.837622188815)" rx="2" ry="2" />
<text  x="1192.82" y="225.5" ></text>
</g>
<g >
<title>CreateMesh (4,071 us, 0.11%)</title><rect x="69.3" y="87" width="1.2" height="15.0" fill="rgb(143.186297768632,154.159410532608,154.159410532608)" rx="2" ry="2" />
<text  x="72.29" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,067 us, 0.08%)</title><rect x="1056.3" y="119" width="1.0" height="15.0" fill="rgb(113.785588347552,113.785588347552,149.442371938236)" rx="2" ry="2" />
<text  x="1059.30" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (429,274 us, 11.25%)</title><rect x="1057.3" y="87" width="132.7" height="15.0" fill="rgb(122.169270568552,148.710551628884,148.710551628884)" rx="2" ry="2" />
<text  x="1060.25" y="97.5" >SNESSolve</text>
</g>
<g >
<title>SNESFunctionEval (429,274 us, 11.25%)</title><rect x="1057.3" y="103" width="132.7" height="15.0" fill="rgb(154.068770669931,154.068770669931,138.948657861972)" rx="2" ry="2" />
<text  x="1060.25" y="113.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,977 us, 0.26%)</title><rect x="1050.4" y="103" width="3.1" height="15.0" fill="rgb(149.264019891504,149.264019891504,115.664096397287)" rx="2" ry="2" />
<text  x="1053.39" y="113.5" ></text>
</g>
<g >
<title>DMPlexInterp (3,527 us, 0.09%)</title><rect x="1047.8" y="119" width="1.1" height="15.0" fill="rgb(131.533523460824,151.138320897251,151.138320897251)" rx="2" ry="2" />
<text  x="1050.77" y="129.5" ></text>
</g>
<g >
<title>DMPlexStratify (3,724 us, 0.10%)</title><rect x="80.8" y="87" width="1.1" height="15.0" fill="rgb(154.287807222528,129.539855372717,129.539855372717)" rx="2" ry="2" />
<text  x="83.77" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (41,136 us, 1.08%)</title><rect x="55.0" y="87" width="12.7" height="15.0" fill="rgb(130.470632006914,150.862756446237,150.862756446237)" rx="2" ry="2" />
<text  x="58.01" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (40,089 us, 1.05%)</title><rect x="55.3" y="119" width="12.4" height="15.0" fill="rgb(133.728556759533,133.728556759533,153.302301308297)" rx="2" ry="2" />
<text  x="58.34" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (956 us, 0.03%)</title><rect x="53.9" y="87" width="0.3" height="15.0" fill="rgb(155.129083650179,135.989641318037,135.989641318037)" rx="2" ry="2" />
<text  x="56.86" y="97.5" ></text>
</g>
</g>
</svg>
