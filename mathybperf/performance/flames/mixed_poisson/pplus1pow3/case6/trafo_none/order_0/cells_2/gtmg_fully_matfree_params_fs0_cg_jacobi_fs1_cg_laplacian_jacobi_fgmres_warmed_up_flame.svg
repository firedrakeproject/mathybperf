<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (869 us, 0.02%)</title><rect x="50.7" y="87" width="0.2" height="15.0" fill="rgb(138.875328466521,153.041751824654,153.041751824654)" rx="2" ry="2" />
<text  x="53.66" y="97.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (883 us, 0.02%)</title><rect x="50.2" y="167" width="0.3" height="15.0" fill="rgb(120.947690686852,120.947690686852,150.828585294229)" rx="2" ry="2" />
<text  x="53.23" y="177.5" ></text>
</g>
<g >
<title>ParLoopExecute (102,433 us, 2.46%)</title><rect x="19.2" y="103" width="29.1" height="15.0" fill="rgb(113.162646906283,113.162646906283,149.321802627022)" rx="2" ry="2" />
<text  x="22.23" y="113.5" >P..</text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (134,285 us, 3.22%)</title><rect x="10.2" y="87" width="38.1" height="15.0" fill="rgb(133.748576485431,161.947906153534,133.748576485431)" rx="2" ry="2" />
<text  x="13.21" y="97.5" >fi..</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (8,511 us, 0.20%)</title><rect x="48.3" y="87" width="2.4" height="15.0" fill="rgb(153.019210962651,119.81395071366,119.81395071366)" rx="2" ry="2" />
<text  x="51.25" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,511 us, 0.20%)</title><rect x="48.3" y="119" width="2.4" height="15.0" fill="rgb(153.862030269631,153.862030269631,137.946762075906)" rx="2" ry="2" />
<text  x="51.25" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,432 us, 0.03%)</title><rect x="1189.6" y="183" width="0.4" height="15.0" fill="rgb(150.614992099106,159.202210588518,150.614992099106)" rx="2" ry="2" />
<text  x="1192.59" y="193.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (1,018 us, 0.02%)</title><rect x="1053.3" y="119" width="0.3" height="15.0" fill="rgb(154.215638814553,154.215638814553,139.660403485911)" rx="2" ry="2" />
<text  x="1056.27" y="129.5" ></text>
</g>
<g >
<title>DMPlexSymmetrize (1,985 us, 0.05%)</title><rect x="76.9" y="87" width="0.6" height="15.0" fill="rgb(154.142317455273,154.142317455273,139.305076898629)" rx="2" ry="2" />
<text  x="79.92" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (893 us, 0.02%)</title><rect x="63.4" y="151" width="0.2" height="15.0" fill="rgb(129.549207429748,162.631524371901,129.549207429748)" rx="2" ry="2" />
<text  x="66.39" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,587 us, 0.06%)</title><rect x="1055.9" y="119" width="0.7" height="15.0" fill="rgb(151.367022467221,151.367022467221,125.855570418073)" rx="2" ry="2" />
<text  x="1058.88" y="129.5" ></text>
</g>
<g >
<title>DMPlexBuFrCeLi (669 us, 0.02%)</title><rect x="1047.6" y="119" width="0.1" height="15.0" fill="rgb(141.967429079197,116.916537015442,141.967429079197)" rx="2" ry="2" />
<text  x="1050.56" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (935 us, 0.02%)</title><rect x="50.9" y="87" width="0.3" height="15.0" fill="rgb(152.785292736337,144.637312636864,152.785292736337)" rx="2" ry="2" />
<text  x="53.91" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,159 us, 0.10%)</title><rect x="1054.7" y="119" width="1.2" height="15.0" fill="rgb(143.591250932371,143.591250932371,155.211209857878)" rx="2" ry="2" />
<text  x="1057.70" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (9,630 us, 0.23%)</title><rect x="1046.2" y="87" width="2.7" height="15.0" fill="rgb(130.9408869954,130.9408869954,152.76275232169)" rx="2" ry="2" />
<text  x="1049.18" y="97.5" ></text>
</g>
<g >
<title>DMPlexStratify (3,258 us, 0.08%)</title><rect x="76.0" y="87" width="0.9" height="15.0" fill="rgb(144.30645758938,144.30645758938,155.349636952783)" rx="2" ry="2" />
<text  x="79.00" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (651 us, 0.02%)</title><rect x="50.5" y="167" width="0.2" height="15.0" fill="rgb(138.910314323561,138.910314323561,154.305222127141)" rx="2" ry="2" />
<text  x="53.48" y="177.5" ></text>
</g>
<g >
<title>SNESSolve (470,804 us, 11.30%)</title><rect x="1056.6" y="87" width="133.4" height="15.0" fill="rgb(147.204877202926,147.204877202926,155.910621394115)" rx="2" ry="2" />
<text  x="1059.61" y="97.5" >SNESSolve</text>
</g>
<g >
<title>CreateMesh (23,715 us, 0.57%)</title><rect x="63.6" y="71" width="6.8" height="15.0" fill="rgb(153.794687805679,153.794687805679,137.620410135211)" rx="2" ry="2" />
<text  x="66.64" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (1,020 us, 0.02%)</title><rect x="51.4" y="87" width="0.3" height="15.0" fill="rgb(142.722954706877,160.486960861671,142.722954706877)" rx="2" ry="2" />
<text  x="54.41" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (5,245 us, 0.13%)</title><rect x="1048.9" y="87" width="1.5" height="15.0" fill="rgb(128.369644079822,162.823546312587,128.369644079822)" rx="2" ry="2" />
<text  x="1051.91" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (470,804 us, 11.30%)</title><rect x="1056.6" y="71" width="133.4" height="15.0" fill="rgb(155.033915695738,135.260020333995,135.260020333995)" rx="2" ry="2" />
<text  x="1059.61" y="81.5" >firedrake.varia..</text>
</g>
<g >
<title>CreateExtMesh (145,324 us, 3.49%)</title><rect x="10.0" y="71" width="41.2" height="15.0" fill="rgb(145.798966640475,159.986214732946,145.798966640475)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >Cre..</text>
</g>
<g >
<title>CreateFunctionSpace (44,005 us, 1.06%)</title><rect x="51.2" y="71" width="12.4" height="15.0" fill="rgb(150.325055211426,159.249409616745,150.325055211426)" rx="2" ry="2" />
<text  x="54.17" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (41,120 us, 0.99%)</title><rect x="52.0" y="103" width="11.6" height="15.0" fill="rgb(107.711805013593,144.962319818339,144.962319818339)" rx="2" ry="2" />
<text  x="54.99" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,164 us, 0.27%)</title><rect x="1050.4" y="87" width="3.2" height="15.0" fill="rgb(146.631781624712,128.868940413325,146.631781624712)" rx="2" ry="2" />
<text  x="1053.40" y="97.5" ></text>
</g>
<g >
<title>firedrake.__init__ (3,416,796 us, 82.04%)</title><rect x="77.5" y="71" width="968.0" height="15.0" fill="rgb(152.434335869629,115.329908333821,115.329908333821)" rx="2" ry="2" />
<text  x="80.48" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>DMPlexInterp (4,106 us, 0.10%)</title><rect x="1047.7" y="119" width="1.2" height="15.0" fill="rgb(145.862230729688,159.975915927725,145.862230729688)" rx="2" ry="2" />
<text  x="1050.75" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (5,906 us, 0.14%)</title><rect x="1188.3" y="135" width="1.7" height="15.0" fill="rgb(153.729494717115,125.259459497879,125.259459497879)" rx="2" ry="2" />
<text  x="1191.33" y="145.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (101,611 us, 2.44%)</title><rect x="19.5" y="135" width="28.8" height="15.0" fill="rgb(136.024978931706,152.302772315627,152.302772315627)" rx="2" ry="2" />
<text  x="22.46" y="145.5" >p..</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (6,746 us, 0.16%)</title><rect x="1054.7" y="103" width="1.9" height="15.0" fill="rgb(148.876928626671,148.876928626671,113.788192575404)" rx="2" ry="2" />
<text  x="1057.70" y="113.5" ></text>
</g>
<g >
<title>Mesh: numbering (8,302 us, 0.20%)</title><rect x="66.5" y="87" width="2.3" height="15.0" fill="rgb(117.995391327212,147.628434788536,147.628434788536)" rx="2" ry="2" />
<text  x="69.46" y="97.5" ></text>
</g>
<g >
<title>PetscBarrier (25,138 us, 0.60%)</title><rect x="70.4" y="71" width="7.1" height="15.0" fill="rgb(142.331705717909,142.331705717909,154.967426913144)" rx="2" ry="2" />
<text  x="73.36" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,430 us, 0.08%)</title><rect x="1189.0" y="151" width="1.0" height="15.0" fill="rgb(108.220824153624,145.094287743532,145.094287743532)" rx="2" ry="2" />
<text  x="1192.03" y="161.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (470,804 us, 11.30%)</title><rect x="1056.6" y="119" width="133.4" height="15.0" fill="rgb(152.288110363551,114.20884612056,114.20884612056)" rx="2" ry="2" />
<text  x="1059.61" y="129.5" >firedrake.tsfc_..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (10,776 us, 0.26%)</title><rect x="1053.6" y="71" width="3.0" height="15.0" fill="rgb(134.062187457659,161.896853204567,134.062187457659)" rx="2" ry="2" />
<text  x="1056.56" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (41,120 us, 0.99%)</title><rect x="52.0" y="119" width="11.6" height="15.0" fill="rgb(150.628683348315,150.628683348315,122.27746545722)" rx="2" ry="2" />
<text  x="54.99" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,432 us, 0.03%)</title><rect x="1189.6" y="167" width="0.4" height="15.0" fill="rgb(152.017613393719,112.135036018515,112.135036018515)" rx="2" ry="2" />
<text  x="1192.59" y="177.5" ></text>
</g>
<g >
<title>all (4,164,932 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(132.096985081236,162.216769870496,132.096985081236)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateMesh (1,329 us, 0.03%)</title><rect x="1046.8" y="103" width="0.4" height="15.0" fill="rgb(149.726265106864,149.726265106864,117.904207825573)" rx="2" ry="2" />
<text  x="1049.82" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (1,329 us, 0.03%)</title><rect x="1046.8" y="119" width="0.4" height="15.0" fill="rgb(156.177348898022,144.0263415515,144.0263415515)" rx="2" ry="2" />
<text  x="1049.82" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (16,409 us, 0.39%)</title><rect x="1048.9" y="71" width="4.7" height="15.0" fill="rgb(152.190831288515,152.190831288515,129.847874705883)" rx="2" ry="2" />
<text  x="1051.91" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,146 us, 0.24%)</title><rect x="1050.4" y="103" width="2.9" height="15.0" fill="rgb(109.431923844781,145.408276552351,145.408276552351)" rx="2" ry="2" />
<text  x="1053.40" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (2,335 us, 0.06%)</title><rect x="1045.5" y="71" width="0.7" height="15.0" fill="rgb(124.46279686495,124.46279686495,151.508928425474)" rx="2" ry="2" />
<text  x="1048.52" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (42,134 us, 1.01%)</title><rect x="51.7" y="87" width="11.9" height="15.0" fill="rgb(109.030866154276,109.030866154276,148.522103126634)" rx="2" ry="2" />
<text  x="54.70" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (21,190 us, 0.51%)</title><rect x="57.6" y="135" width="6.0" height="15.0" fill="rgb(137.538550804605,137.538550804605,154.039719510569)" rx="2" ry="2" />
<text  x="60.64" y="145.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (6,746 us, 0.16%)</title><rect x="1054.7" y="87" width="1.9" height="15.0" fill="rgb(151.792232421607,142.092595580368,151.792232421607)" rx="2" ry="2" />
<text  x="1057.70" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (8,511 us, 0.20%)</title><rect x="48.3" y="103" width="2.4" height="15.0" fill="rgb(155.541576740337,155.541576740337,146.08610266471)" rx="2" ry="2" />
<text  x="51.25" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,511 us, 0.20%)</title><rect x="48.3" y="135" width="2.4" height="15.0" fill="rgb(108.13258222065,145.071410205354,145.071410205354)" rx="2" ry="2" />
<text  x="51.25" y="145.5" ></text>
</g>
<g >
<title>DMPlexStratify (646 us, 0.02%)</title><rect x="1048.7" y="135" width="0.2" height="15.0" fill="rgb(152.800092035779,152.800092035779,132.800446019543)" rx="2" ry="2" />
<text  x="1051.73" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (767 us, 0.02%)</title><rect x="1189.8" y="199" width="0.2" height="15.0" fill="rgb(153.213962829677,121.307048360855,121.307048360855)" rx="2" ry="2" />
<text  x="1192.78" y="209.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,018 us, 0.02%)</title><rect x="1053.3" y="103" width="0.3" height="15.0" fill="rgb(154.934445130584,134.497412667809,134.497412667809)" rx="2" ry="2" />
<text  x="1056.27" y="113.5" ></text>
</g>
<g >
<title>firedrake (4,164,932 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(148.599501474362,148.599501474362,112.443737914214)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (101,611 us, 2.44%)</title><rect x="19.5" y="119" width="28.8" height="15.0" fill="rgb(148.498944488101,159.546683455425,148.498944488101)" rx="2" ry="2" />
<text  x="22.46" y="129.5" >P..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,511 us, 0.20%)</title><rect x="48.3" y="151" width="2.4" height="15.0" fill="rgb(153.600290837479,153.600290837479,136.678332520089)" rx="2" ry="2" />
<text  x="51.25" y="161.5" ></text>
</g>
<g >
<title>CreateMesh (3,388 us, 0.08%)</title><rect x="65.5" y="87" width="1.0" height="15.0" fill="rgb(153.281663137071,121.826084050881,121.826084050881)" rx="2" ry="2" />
<text  x="68.50" y="97.5" ></text>
</g>
<g >
<title>Mesh: reorder (5,472 us, 0.13%)</title><rect x="68.8" y="87" width="1.6" height="15.0" fill="rgb(118.806920653982,147.838831280662,147.838831280662)" rx="2" ry="2" />
<text  x="71.81" y="97.5" ></text>
</g>
<g >
<title>FunctionSpaceData: CreateElement (5,907 us, 0.14%)</title><rect x="56.0" y="135" width="1.6" height="15.0" fill="rgb(145.696348470269,145.696348470269,155.61864809102)" rx="2" ry="2" />
<text  x="58.96" y="145.5" ></text>
</g>
<g >
<title>SNESFunctionEval (470,804 us, 11.30%)</title><rect x="1056.6" y="103" width="133.4" height="15.0" fill="rgb(153.668784196134,124.794012170359,124.794012170359)" rx="2" ry="2" />
<text  x="1059.61" y="113.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (6,041 us, 0.15%)</title><rect x="1047.2" y="103" width="1.7" height="15.0" fill="rgb(146.337523927693,146.337523927693,155.74274656665)" rx="2" ry="2" />
<text  x="1050.20" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (9,630 us, 0.23%)</title><rect x="1046.2" y="71" width="2.7" height="15.0" fill="rgb(129.811453537879,162.588833144996,129.811453537879)" rx="2" ry="2" />
<text  x="1049.18" y="81.5" ></text>
</g>
</g>
</svg>
