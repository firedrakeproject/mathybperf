<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="283" onload="init(evt)" viewBox="0 0 1200 283" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="283.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="265" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="265" > </text>
<g id="frames">
<g >
<title>firedrake.interpolation.make_interpolator (41,512 us, 0.04%)</title><rect x="1054.2" y="151" width="0.5" height="15.0" fill="rgb(153.671132435261,124.812015336998,124.812015336998)" rx="2" ry="2" />
<text  x="1057.18" y="161.5" ></text>
</g>
<g >
<title>HybridInit (1,228,015 us, 1.19%)</title><rect x="1053.6" y="135" width="14.0" height="15.0" fill="rgb(155.580635366429,139.451537809289,139.451537809289)" rx="2" ry="2" />
<text  x="1056.55" y="145.5" ></text>
</g>
<g >
<title>perfsolve (98,571,662 us, 95.76%)</title><rect x="60.0" y="71" width="1130.0" height="15.0" fill="rgb(153.107291256745,120.48923296838,120.48923296838)" rx="2" ry="2" />
<text  x="63.04" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.ufl_expr.action (21,709 us, 0.02%)</title><rect x="59.4" y="87" width="0.2" height="15.0" fill="rgb(140.39242747808,153.435073790613,153.435073790613)" rx="2" ry="2" />
<text  x="62.39" y="97.5" ></text>
</g>
<g >
<title>SNESFunctionEval (10,674,936 us, 10.37%)</title><rect x="1067.6" y="119" width="122.4" height="15.0" fill="rgb(152.068645238356,152.068645238356,129.255742308958)" rx="2" ry="2" />
<text  x="1070.63" y="129.5" >SNESFunctionE..</text>
</g>
<g >
<title>KSPSolve (86,668,711 us, 84.20%)</title><rect x="60.0" y="119" width="993.6" height="15.0" fill="rgb(151.971963263878,151.971963263878,128.787206586485)" rx="2" ry="2" />
<text  x="63.04" y="129.5" >KSPSolve</text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (13,333 us, 0.01%)</title><rect x="59.9" y="87" width="0.1" height="15.0" fill="rgb(148.29977616211,148.29977616211,110.991222939457)" rx="2" ry="2" />
<text  x="62.89" y="97.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,625,450 us, 1.58%)</title><rect x="10.0" y="87" width="18.6" height="15.0" fill="rgb(129.0872803297,162.706721806793,129.0872803297)" rx="2" ry="2" />
<text  x="13.00" y="97.5" ></text>
</g>
<g >
<title>all (102,937,195 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(152.908110810851,118.962182883192,118.962182883192)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (10,618 us, 0.01%)</title><rect x="1189.9" y="151" width="0.1" height="15.0" fill="rgb(146.008939127464,159.952033165297,146.008939127464)" rx="2" ry="2" />
<text  x="1192.88" y="161.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,131,409 us, 1.10%)</title><rect x="1054.7" y="199" width="12.9" height="15.0" fill="rgb(153.345802244564,122.317817208322,122.317817208322)" rx="2" ry="2" />
<text  x="1057.66" y="209.5" ></text>
</g>
<g >
<title>SCForwardElim (86,668,711 us, 84.20%)</title><rect x="60.0" y="151" width="993.6" height="15.0" fill="rgb(156.294395273742,144.923697098687,144.923697098687)" rx="2" ry="2" />
<text  x="63.04" y="161.5" >SCForwardElim</text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (1,536,760 us, 1.49%)</title><rect x="60.0" y="215" width="17.7" height="15.0" fill="rgb(133.25771218388,133.25771218388,153.211170100106)" rx="2" ry="2" />
<text  x="63.04" y="225.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (25,693 us, 0.02%)</title><rect x="28.8" y="71" width="0.2" height="15.0" fill="rgb(133.711086334144,133.711086334144,153.298919935641)" rx="2" ry="2" />
<text  x="31.75" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (25,693 us, 0.02%)</title><rect x="28.8" y="87" width="0.2" height="15.0" fill="rgb(148.289869249928,159.580718959314,148.289869249928)" rx="2" ry="2" />
<text  x="31.75" y="97.5" ></text>
</g>
<g >
<title>firedrake.slate.slac.optimise.optimise (41,420 us, 0.04%)</title><rect x="772.7" y="183" width="0.5" height="15.0" fill="rgb(154.006048020662,127.379701491741,127.379701491741)" rx="2" ry="2" />
<text  x="775.68" y="193.5" ></text>
</g>
<g >
<title>HybridRHS (85,131,951 us, 82.70%)</title><rect x="77.7" y="167" width="975.9" height="15.0" fill="rgb(154.868381669932,133.990926136145,133.990926136145)" rx="2" ry="2" />
<text  x="80.66" y="177.5" >HybridRHS</text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (13,110 us, 0.01%)</title><rect x="1054.0" y="151" width="0.2" height="15.0" fill="rgb(153.401339449611,122.743602447019,122.743602447019)" rx="2" ry="2" />
<text  x="1057.03" y="161.5" ></text>
</g>
<g >
<title>PCApply (86,668,711 us, 84.20%)</title><rect x="60.0" y="135" width="993.6" height="15.0" fill="rgb(152.232328010891,152.232328010891,130.048974206625)" rx="2" ry="2" />
<text  x="63.04" y="145.5" >PCApply</text>
</g>
<g >
<title>CreateExtMesh (1,635,952 us, 1.59%)</title><rect x="10.0" y="71" width="18.8" height="15.0" fill="rgb(151.409663456912,151.409663456912,126.062215214266)" rx="2" ry="2" />
<text  x="13.00" y="81.5" ></text>
</g>
<g >
<title>firedrake (102,937,195 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(148.72653431533,159.509633948667,148.72653431533)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (13,110 us, 0.01%)</title><rect x="1054.0" y="167" width="0.2" height="15.0" fill="rgb(155.445806704652,138.417851402332,138.417851402332)" rx="2" ry="2" />
<text  x="1057.03" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (25,693 us, 0.02%)</title><rect x="28.8" y="103" width="0.2" height="15.0" fill="rgb(110.547476356072,110.547476356072,148.815640585046)" rx="2" ry="2" />
<text  x="31.75" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (49,060,134 us, 47.66%)</title><rect x="210.3" y="183" width="562.4" height="15.0" fill="rgb(136.443173790687,102.760632838635,136.443173790687)" rx="2" ry="2" />
<text  x="213.29" y="193.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.parloops.par_loop (1,536,760 us, 1.49%)</title><rect x="60.0" y="183" width="17.7" height="15.0" fill="rgb(153.81821482322,125.93964697802,125.93964697802)" rx="2" ry="2" />
<text  x="63.04" y="193.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (1,131,409 us, 1.10%)</title><rect x="1054.7" y="151" width="12.9" height="15.0" fill="rgb(144.311649440428,160.228336137605,144.311649440428)" rx="2" ry="2" />
<text  x="1057.66" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (25,693 us, 0.02%)</title><rect x="28.8" y="119" width="0.2" height="15.0" fill="rgb(153.618893037815,124.411513289912,124.411513289912)" rx="2" ry="2" />
<text  x="31.75" y="129.5" ></text>
</g>
<g >
<title>HybridBreak (1,536,760 us, 1.49%)</title><rect x="60.0" y="167" width="17.7" height="15.0" fill="rgb(124.842463947945,124.842463947945,151.582412377022)" rx="2" ry="2" />
<text  x="63.04" y="177.5" ></text>
</g>
<g >
<title>SNESSolve (98,571,662 us, 95.76%)</title><rect x="60.0" y="103" width="1130.0" height="15.0" fill="rgb(155.76954985534,155.76954985534,147.190895452803)" rx="2" ry="2" />
<text  x="63.04" y="113.5" >SNESSolve</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (3,539,242 us, 3.44%)</title><rect x="1122.5" y="167" width="40.6" height="15.0" fill="rgb(152.752686326062,152.752686326062,132.57071065707)" rx="2" ry="2" />
<text  x="1125.48" y="177.5" >pyo..</text>
</g>
<g >
<title>ParLoopExecute (1,131,409 us, 1.10%)</title><rect x="1054.7" y="167" width="12.9" height="15.0" fill="rgb(152.383586364017,152.383586364017,130.781995456389)" rx="2" ry="2" />
<text  x="1057.66" y="177.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (1,131,409 us, 1.10%)</title><rect x="1054.7" y="183" width="12.9" height="15.0" fill="rgb(130.544500751724,150.881907602299,150.881907602299)" rx="2" ry="2" />
<text  x="1057.66" y="193.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (13,110 us, 0.01%)</title><rect x="1054.0" y="183" width="0.2" height="15.0" fill="rgb(135.139896027153,161.72141227465,135.139896027153)" rx="2" ry="2" />
<text  x="1057.03" y="193.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (13,333 us, 0.01%)</title><rect x="59.9" y="71" width="0.1" height="15.0" fill="rgb(143.865278583862,154.335442595816,154.335442595816)" rx="2" ry="2" />
<text  x="62.89" y="81.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,536,760 us, 1.49%)</title><rect x="60.0" y="199" width="17.7" height="15.0" fill="rgb(156.587064881691,147.167497426295,147.167497426295)" rx="2" ry="2" />
<text  x="63.04" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (10,502 us, 0.01%)</title><rect x="28.6" y="119" width="0.2" height="15.0" fill="rgb(142.000049406848,142.000049406848,154.903235369067)" rx="2" ry="2" />
<text  x="31.63" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (4,785,077 us, 4.65%)</title><rect x="1067.6" y="151" width="54.9" height="15.0" fill="rgb(146.042193438008,146.042193438008,155.685585826711)" rx="2" ry="2" />
<text  x="1070.63" y="161.5" >Parlo..</text>
</g>
<g >
<title>CreateFunctionSpace (12,492 us, 0.01%)</title><rect x="1053.9" y="151" width="0.1" height="15.0" fill="rgb(109.716701982815,145.48210792147,145.48210792147)" rx="2" ry="2" />
<text  x="1056.89" y="161.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (24,460,594 us, 23.76%)</title><rect x="773.2" y="183" width="280.4" height="15.0" fill="rgb(144.020784520705,160.275686240815,144.020784520705)" rx="2" ry="2" />
<text  x="776.15" y="193.5" >firedrake.tsfc_interface.compile_f..</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (13,333 us, 0.01%)</title><rect x="59.9" y="103" width="0.1" height="15.0" fill="rgb(136.872124736907,136.872124736907,153.910733820046)" rx="2" ry="2" />
<text  x="62.89" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form1_cell_integral_otherwise (3,539,242 us, 3.44%)</title><rect x="1122.5" y="151" width="40.6" height="15.0" fill="rgb(128.615495100632,150.38179502609,150.38179502609)" rx="2" ry="2" />
<text  x="1125.48" y="161.5" >Par..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (10,502 us, 0.01%)</title><rect x="28.6" y="151" width="0.2" height="15.0" fill="rgb(119.646462373533,148.05649024499,148.05649024499)" rx="2" ry="2" />
<text  x="31.63" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (98,571,662 us, 95.76%)</title><rect x="60.0" y="87" width="1130.0" height="15.0" fill="rgb(153.030857353505,119.903239710203,119.903239710203)" rx="2" ry="2" />
<text  x="63.04" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>Parloop_Cells_wrap_slate_loopy_knl_0 (49,060,134 us, 47.66%)</title><rect x="210.3" y="199" width="562.4" height="15.0" fill="rgb(138.167800240797,152.858318580947,152.858318580947)" rx="2" ry="2" />
<text  x="213.29" y="209.5" >Parloop_Cells_wrap_slate_loopy_knl_0</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,536,760 us, 1.49%)</title><rect x="60.0" y="231" width="17.7" height="15.0" fill="rgb(127.355377101213,162.988659541663,127.355377101213)" rx="2" ry="2" />
<text  x="63.04" y="241.5" ></text>
</g>
<g >
<title>ParLoopExecute (8,324,319 us, 8.09%)</title><rect x="1067.6" y="135" width="95.5" height="15.0" fill="rgb(110.759439962159,110.759439962159,148.856665799128)" rx="2" ry="2" />
<text  x="1070.63" y="145.5" >ParLoopExe..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (4,785,077 us, 4.65%)</title><rect x="1067.6" y="167" width="54.9" height="15.0" fill="rgb(151.240524643908,151.240524643908,125.242542505095)" rx="2" ry="2" />
<text  x="1070.63" y="177.5" >pyop2..</text>
</g>
<g >
<title>ParLoopExecute (1,567,826 us, 1.52%)</title><rect x="10.7" y="103" width="17.9" height="15.0" fill="rgb(135.378695183617,161.682537993365,135.378695183617)" rx="2" ry="2" />
<text  x="13.66" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (22,131 us, 0.02%)</title><rect x="59.6" y="87" width="0.3" height="15.0" fill="rgb(134.502018658647,161.825252776499,134.502018658647)" rx="2" ry="2" />
<text  x="62.64" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (10,502 us, 0.01%)</title><rect x="28.6" y="103" width="0.2" height="15.0" fill="rgb(128.464667735635,128.464667735635,152.283484077865)" rx="2" ry="2" />
<text  x="31.63" y="113.5" ></text>
</g>
<g >
<title>PCSetUp (1,228,015 us, 1.19%)</title><rect x="1053.6" y="119" width="14.0" height="15.0" fill="rgb(124.542363878381,124.542363878381,151.52432849259)" rx="2" ry="2" />
<text  x="1056.55" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,567,826 us, 1.52%)</title><rect x="10.7" y="119" width="17.9" height="15.0" fill="rgb(135.553582901168,161.65406789981,135.553582901168)" rx="2" ry="2" />
<text  x="13.66" y="129.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (2,350,617 us, 2.28%)</title><rect x="1163.1" y="135" width="26.9" height="15.0" fill="rgb(108.575174974279,145.186156474813,145.186156474813)" rx="2" ry="2" />
<text  x="1166.05" y="145.5" >f..</text>
</g>
<g >
<title>firedrake.__init__ (2,646,715 us, 2.57%)</title><rect x="29.0" y="71" width="30.4" height="15.0" fill="rgb(124.892938257476,149.416687696383,149.416687696383)" rx="2" ry="2" />
<text  x="32.05" y="81.5" >f..</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (43,840 us, 0.04%)</title><rect x="59.4" y="71" width="0.5" height="15.0" fill="rgb(143.156386748976,160.416402157144,143.156386748976)" rx="2" ry="2" />
<text  x="62.39" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,567,826 us, 1.52%)</title><rect x="10.7" y="135" width="17.9" height="15.0" fill="rgb(128.839757925193,162.747016151713,128.839757925193)" rx="2" ry="2" />
<text  x="13.66" y="145.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (22,131 us, 0.02%)</title><rect x="59.6" y="103" width="0.3" height="15.0" fill="rgb(155.423032033653,138.243245591343,138.243245591343)" rx="2" ry="2" />
<text  x="62.64" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (10,502 us, 0.01%)</title><rect x="28.6" y="135" width="0.2" height="15.0" fill="rgb(156.03489178229,142.934170330892,142.934170330892)" rx="2" ry="2" />
<text  x="31.63" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (10,502 us, 0.01%)</title><rect x="28.6" y="87" width="0.2" height="15.0" fill="rgb(144.144607095819,154.407861098916,154.407861098916)" rx="2" ry="2" />
<text  x="31.63" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (49,060,134 us, 47.66%)</title><rect x="210.3" y="215" width="562.4" height="15.0" fill="rgb(127.547576734306,162.957371229299,127.547576734306)" rx="2" ry="2" />
<text  x="213.29" y="225.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
</g>
</svg>
