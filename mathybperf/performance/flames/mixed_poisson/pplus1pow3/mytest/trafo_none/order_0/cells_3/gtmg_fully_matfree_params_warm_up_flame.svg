<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="283" onload="init(evt)" viewBox="0 0 1200 283" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="283.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="265" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="265" > </text>
<g id="frames">
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (7,970 us, 0.01%)</title><rect x="1055.0" y="183" width="0.1" height="15.0" fill="rgb(111.77241814159,146.015071370042,146.015071370042)" rx="2" ry="2" />
<text  x="1057.99" y="193.5" ></text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (26,010 us, 0.04%)</title><rect x="1055.1" y="151" width="0.6" height="15.0" fill="rgb(143.892806630554,160.29651985084,143.892806630554)" rx="2" ry="2" />
<text  x="1058.15" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (21,200 us, 0.04%)</title><rect x="86.2" y="71" width="0.4" height="15.0" fill="rgb(155.861220630149,141.602691497812,141.602691497812)" rx="2" ry="2" />
<text  x="89.21" y="81.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form1_cell_integral_otherwise (2,267,891 us, 3.85%)</title><rect x="1125.1" y="151" width="45.4" height="15.0" fill="rgb(142.607831135309,160.505701908206,142.607831135309)" rx="2" ry="2" />
<text  x="1128.11" y="161.5" >Par..</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,249 us, 0.02%)</title><rect x="86.4" y="103" width="0.2" height="15.0" fill="rgb(144.990271447828,160.117862787563,144.990271447828)" rx="2" ry="2" />
<text  x="89.43" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (688,325 us, 1.17%)</title><rect x="1055.7" y="183" width="13.8" height="15.0" fill="rgb(111.015622251735,111.015622251735,148.906249468078)" rx="2" ry="2" />
<text  x="1058.67" y="193.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,660,030 us, 4.51%)</title><rect x="32.8" y="71" width="53.3" height="15.0" fill="rgb(156.504587439621,146.535170370428,146.535170370428)" rx="2" ry="2" />
<text  x="35.81" y="81.5" >fire..</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,453 us, 0.01%)</title><rect x="86.6" y="103" width="0.2" height="15.0" fill="rgb(121.707366912897,121.707366912897,150.975619402496)" rx="2" ry="2" />
<text  x="89.63" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_slate_loopy_knl_0 (30,601,658 us, 51.94%)</title><rect x="228.7" y="199" width="612.9" height="15.0" fill="rgb(134.009846471299,96.5252315827043,134.009846471299)" rx="2" ry="2" />
<text  x="231.70" y="209.5" >Parloop_Cells_wrap_slate_loopy_knl_0</text>
</g>
<g >
<title>SNESFunctionEval (6,019,391 us, 10.22%)</title><rect x="1069.5" y="119" width="120.5" height="15.0" fill="rgb(148.902832798417,148.902832798417,113.913728176946)" rx="2" ry="2" />
<text  x="1072.45" y="129.5" >SNESFunctionE..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (914,693 us, 1.55%)</title><rect x="86.8" y="231" width="18.3" height="15.0" fill="rgb(123.184605597421,123.184605597421,151.261536567243)" rx="2" ry="2" />
<text  x="89.78" y="241.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,707 us, 0.02%)</title><rect x="32.6" y="119" width="0.2" height="15.0" fill="rgb(135.2550559102,152.103162643385,152.103162643385)" rx="2" ry="2" />
<text  x="35.58" y="129.5" ></text>
</g>
<g >
<title>SCForwardElim (48,319,468 us, 82.01%)</title><rect x="86.8" y="151" width="967.7" height="15.0" fill="rgb(153.067705985076,120.185745885584,120.185745885584)" rx="2" ry="2" />
<text  x="89.78" y="161.5" >SCForwardElim</text>
</g>
<g >
<title>CreateFunctionSpace (9,301 us, 0.02%)</title><rect x="1054.8" y="151" width="0.2" height="15.0" fill="rgb(156.382455142101,145.59882275611,145.59882275611)" rx="2" ry="2" />
<text  x="1057.80" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,009 us, 0.01%)</title><rect x="32.4" y="151" width="0.2" height="15.0" fill="rgb(124.918841962422,124.918841962422,151.597195218533)" rx="2" ry="2" />
<text  x="35.44" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,278 us, 0.01%)</title><rect x="86.1" y="119" width="0.1" height="15.0" fill="rgb(130.817009038695,150.952557898921,150.952557898921)" rx="2" ry="2" />
<text  x="89.08" y="129.5" ></text>
</g>
<g >
<title>HybridBreak (914,693 us, 1.55%)</title><rect x="86.8" y="167" width="18.3" height="15.0" fill="rgb(130.867680015905,130.867680015905,152.748583228885)" rx="2" ry="2" />
<text  x="89.78" y="177.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,453 us, 0.01%)</title><rect x="86.6" y="87" width="0.2" height="15.0" fill="rgb(139.346470579149,153.163899779779,153.163899779779)" rx="2" ry="2" />
<text  x="89.63" y="97.5" ></text>
</g>
<g >
<title>HybridRHS (47,404,775 us, 80.45%)</title><rect x="105.1" y="167" width="949.4" height="15.0" fill="rgb(152.122658501161,112.940381842233,112.940381842233)" rx="2" ry="2" />
<text  x="108.10" y="177.5" >HybridRHS</text>
</g>
<g >
<title>Log_Event_form0_cell_integral_otherwise (8,899 us, 0.02%)</title><rect x="1069.6" y="167" width="0.2" height="15.0" fill="rgb(156.096849244395,143.409177540359,143.409177540359)" rx="2" ry="2" />
<text  x="1072.65" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (11,707 us, 0.02%)</title><rect x="32.6" y="71" width="0.2" height="15.0" fill="rgb(121.044778244165,121.044778244165,150.847376434354)" rx="2" ry="2" />
<text  x="35.58" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,707 us, 0.02%)</title><rect x="32.6" y="87" width="0.2" height="15.0" fill="rgb(133.11951266764,133.11951266764,153.18442180664)" rx="2" ry="2" />
<text  x="35.58" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (2,256,522 us, 3.83%)</title><rect x="1125.3" y="167" width="45.2" height="15.0" fill="rgb(123.053581346231,123.053581346231,151.236177034754)" rx="2" ry="2" />
<text  x="1128.34" y="177.5" >pyo..</text>
</g>
<g >
<title>firedrake.slate.slac.optimise.optimise (20,331 us, 0.03%)</title><rect x="841.6" y="183" width="0.4" height="15.0" fill="rgb(124.41097080111,149.291733170658,149.291733170658)" rx="2" ry="2" />
<text  x="844.55" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,278 us, 0.01%)</title><rect x="86.1" y="71" width="0.1" height="15.0" fill="rgb(151.211717874855,151.211717874855,125.102940470453)" rx="2" ry="2" />
<text  x="89.08" y="81.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (914,693 us, 1.55%)</title><rect x="86.8" y="183" width="18.3" height="15.0" fill="rgb(149.070787873963,159.45359267168,149.070787873963)" rx="2" ry="2" />
<text  x="89.78" y="193.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (7,970 us, 0.01%)</title><rect x="1055.0" y="167" width="0.1" height="15.0" fill="rgb(136.853885526806,136.853885526806,153.90720365035)" rx="2" ry="2" />
<text  x="1057.99" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,278 us, 0.01%)</title><rect x="86.1" y="87" width="0.1" height="15.0" fill="rgb(114.202946119719,114.202946119719,149.523150861881)" rx="2" ry="2" />
<text  x="89.08" y="97.5" ></text>
</g>
<g >
<title>SNESSolve (55,087,612 us, 93.49%)</title><rect x="86.8" y="103" width="1103.2" height="15.0" fill="rgb(117.299286309666,117.299286309666,150.122442511548)" rx="2" ry="2" />
<text  x="89.78" y="113.5" >SNESSolve</text>
</g>
<g >
<title>PCSetUp (748,753 us, 1.27%)</title><rect x="1054.5" y="119" width="15.0" height="15.0" fill="rgb(153.013745605398,119.772049641385,119.772049641385)" rx="2" ry="2" />
<text  x="1057.46" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (914,693 us, 1.55%)</title><rect x="86.8" y="215" width="18.3" height="15.0" fill="rgb(152.962390696631,152.962390696631,133.586970299056)" rx="2" ry="2" />
<text  x="89.78" y="225.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (688,325 us, 1.17%)</title><rect x="1055.7" y="199" width="13.8" height="15.0" fill="rgb(131.625810495088,151.162247165393,151.162247165393)" rx="2" ry="2" />
<text  x="1058.67" y="209.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (2,779,136 us, 4.72%)</title><rect x="1069.5" y="151" width="55.6" height="15.0" fill="rgb(155.059519355902,155.059519355902,143.749978417061)" rx="2" ry="2" />
<text  x="1072.45" y="161.5" >Parlo..</text>
</g>
<g >
<title>ParLoopExecute (5,047,027 us, 8.57%)</title><rect x="1069.5" y="135" width="101.0" height="15.0" fill="rgb(145.589394426836,160.020331139817,145.589394426836)" rx="2" ry="2" />
<text  x="1072.45" y="145.5" >ParLoopExec..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (10,951 us, 0.02%)</title><rect x="86.2" y="87" width="0.2" height="15.0" fill="rgb(154.926990287024,154.926990287024,143.107722160195)" rx="2" ry="2" />
<text  x="89.21" y="97.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,127,320 us, 1.91%)</title><rect x="10.0" y="71" width="22.6" height="15.0" fill="rgb(137.539998441519,152.695555151505,152.695555151505)" rx="2" ry="2" />
<text  x="13.00" y="81.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,081,307 us, 1.84%)</title><rect x="10.8" y="103" width="21.6" height="15.0" fill="rgb(143.745339082499,154.304347169537,154.304347169537)" rx="2" ry="2" />
<text  x="13.78" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (7,453 us, 0.01%)</title><rect x="86.6" y="71" width="0.2" height="15.0" fill="rgb(147.842996106329,147.842996106329,156.034128278644)" rx="2" ry="2" />
<text  x="89.63" y="81.5" ></text>
</g>
<g >
<title>KSPSolve (48,319,468 us, 82.01%)</title><rect x="86.8" y="119" width="967.7" height="15.0" fill="rgb(113.502701084731,146.463663244189,146.463663244189)" rx="2" ry="2" />
<text  x="89.78" y="129.5" >KSPSolve</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (10,610,808 us, 18.01%)</title><rect x="842.0" y="183" width="212.5" height="15.0" fill="rgb(134.192161125686,161.87569470047,134.192161125686)" rx="2" ry="2" />
<text  x="844.96" y="193.5" >firedrake.tsfc_interface...</text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,120,311 us, 1.90%)</title><rect x="10.0" y="87" width="22.4" height="15.0" fill="rgb(154.686675430505,132.597844967204,132.597844967204)" rx="2" ry="2" />
<text  x="13.00" y="97.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (972,364 us, 1.65%)</title><rect x="1170.5" y="135" width="19.5" height="15.0" fill="rgb(153.593967863906,124.22042028995,124.22042028995)" rx="2" ry="2" />
<text  x="1173.53" y="145.5" ></text>
</g>
<g >
<title>ParLoopExecute (688,325 us, 1.17%)</title><rect x="1055.7" y="167" width="13.8" height="15.0" fill="rgb(149.383540567789,149.383540567789,116.243311982362)" rx="2" ry="2" />
<text  x="1058.67" y="177.5" ></text>
</g>
<g >
<title>HybridInit (748,753 us, 1.27%)</title><rect x="1054.5" y="135" width="15.0" height="15.0" fill="rgb(156.657985670763,147.711223475852,147.711223475852)" rx="2" ry="2" />
<text  x="1057.46" y="145.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (2,760,415 us, 4.68%)</title><rect x="1069.8" y="167" width="55.3" height="15.0" fill="rgb(125.126151660837,125.126151660837,151.637319676291)" rx="2" ry="2" />
<text  x="1072.83" y="177.5" >pyop2..</text>
</g>
<g >
<title>perfsolve (55,087,612 us, 93.49%)</title><rect x="86.8" y="71" width="1103.2" height="15.0" fill="rgb(113.682877344142,113.682877344142,149.422492389189)" rx="2" ry="2" />
<text  x="89.78" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (7,970 us, 0.01%)</title><rect x="1055.0" y="151" width="0.1" height="15.0" fill="rgb(131.657146674426,151.170371360036,151.170371360036)" rx="2" ry="2" />
<text  x="1057.99" y="161.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (30,601,658 us, 51.94%)</title><rect x="228.7" y="215" width="612.9" height="15.0" fill="rgb(154.365763909079,130.137523302939,130.137523302939)" rx="2" ry="2" />
<text  x="231.70" y="225.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,009 us, 0.01%)</title><rect x="32.4" y="135" width="0.2" height="15.0" fill="rgb(138.676388782198,138.676388782198,154.259946215909)" rx="2" ry="2" />
<text  x="35.44" y="145.5" ></text>
</g>
<g >
<title>firedrake (58,921,600 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(126.664354801835,126.664354801835,151.935036413258)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,009 us, 0.01%)</title><rect x="32.4" y="119" width="0.2" height="15.0" fill="rgb(143.999560501683,143.999560501683,155.290237516455)" rx="2" ry="2" />
<text  x="35.44" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (55,087,612 us, 93.49%)</title><rect x="86.8" y="87" width="1103.2" height="15.0" fill="rgb(134.979515123177,161.747520793902,134.979515123177)" rx="2" ry="2" />
<text  x="89.78" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,009 us, 0.01%)</title><rect x="32.4" y="87" width="0.2" height="15.0" fill="rgb(147.185363407824,159.760522235936,147.185363407824)" rx="2" ry="2" />
<text  x="35.44" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,707 us, 0.02%)</title><rect x="32.6" y="103" width="0.2" height="15.0" fill="rgb(155.96270904511,142.380769345842,142.380769345842)" rx="2" ry="2" />
<text  x="35.58" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,278 us, 0.01%)</title><rect x="86.1" y="103" width="0.1" height="15.0" fill="rgb(150.423992436933,150.423992436933,121.285501809754)" rx="2" ry="2" />
<text  x="89.08" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,278 us, 0.01%)</title><rect x="86.1" y="135" width="0.1" height="15.0" fill="rgb(154.745508984334,133.048902213229,133.048902213229)" rx="2" ry="2" />
<text  x="89.08" y="145.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,081,307 us, 1.84%)</title><rect x="10.8" y="119" width="21.6" height="15.0" fill="rgb(153.067211409123,120.181954136611,120.181954136611)" rx="2" ry="2" />
<text  x="13.78" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,561 us, 0.01%)</title><rect x="1189.9" y="151" width="0.1" height="15.0" fill="rgb(139.205126205502,139.205126205502,154.362282491388)" rx="2" ry="2" />
<text  x="1192.87" y="161.5" ></text>
</g>
<g >
<title>ParLoopExecute (914,693 us, 1.55%)</title><rect x="86.8" y="199" width="18.3" height="15.0" fill="rgb(151.621257928665,151.621257928665,127.087634577379)" rx="2" ry="2" />
<text  x="89.78" y="209.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (688,325 us, 1.17%)</title><rect x="1055.7" y="151" width="13.8" height="15.0" fill="rgb(155.3020836585,137.315974715163,137.315974715163)" rx="2" ry="2" />
<text  x="1058.67" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,249 us, 0.02%)</title><rect x="86.4" y="87" width="0.2" height="15.0" fill="rgb(127.108553039224,149.991106343502,149.991106343502)" rx="2" ry="2" />
<text  x="89.43" y="97.5" ></text>
</g>
<g >
<title>PCApply (48,319,468 us, 82.01%)</title><rect x="86.8" y="135" width="967.7" height="15.0" fill="rgb(126.35739675472,149.796362121594,149.796362121594)" rx="2" ry="2" />
<text  x="89.78" y="145.5" >PCApply</text>
</g>
<g >
<title>ParLoopExecute (30,601,658 us, 51.94%)</title><rect x="228.7" y="183" width="612.9" height="15.0" fill="rgb(129.996981571915,150.739958185311,150.739958185311)" rx="2" ry="2" />
<text  x="231.70" y="193.5" >ParLoopExecute</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,081,307 us, 1.84%)</title><rect x="10.8" y="135" width="21.6" height="15.0" fill="rgb(155.578433534468,155.578433534468,146.264716359344)" rx="2" ry="2" />
<text  x="13.78" y="145.5" ></text>
</g>
<g >
<title>all (58,921,600 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(150.494690435703,150.494690435703,121.628115188409)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (7,009 us, 0.01%)</title><rect x="32.4" y="103" width="0.2" height="15.0" fill="rgb(150.213829185812,150.213829185812,120.267018362013)" rx="2" ry="2" />
<text  x="35.44" y="113.5" ></text>
</g>
</g>
</svg>
