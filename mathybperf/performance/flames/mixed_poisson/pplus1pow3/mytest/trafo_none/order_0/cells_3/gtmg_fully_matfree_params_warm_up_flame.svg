<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="283" onload="init(evt)" viewBox="0 0 1200 283" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="283.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="265" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="265" > </text>
<g id="frames">
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,382 us, 0.16%)</title><rect x="1032.4" y="71" width="1.9" height="15.0" fill="rgb(112.942655618029,112.942655618029,149.279223668006)" rx="2" ry="2" />
<text  x="1035.42" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,239 us, 0.03%)</title><rect x="1032.0" y="71" width="0.4" height="15.0" fill="rgb(141.482270403924,160.688932724943,141.482270403924)" rx="2" ry="2" />
<text  x="1035.05" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,846 us, 0.17%)</title><rect x="337.9" y="135" width="2.1" height="15.0" fill="rgb(134.350729027893,134.350729027893,153.422721747334)" rx="2" ry="2" />
<text  x="340.93" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,382 us, 0.16%)</title><rect x="1032.4" y="103" width="1.9" height="15.0" fill="rgb(149.605239077615,149.605239077615,117.317697068442)" rx="2" ry="2" />
<text  x="1035.42" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,003 us, 0.15%)</title><rect x="1188.2" y="151" width="1.8" height="15.0" fill="rgb(137.421352258044,152.664795029863,152.664795029863)" rx="2" ry="2" />
<text  x="1191.20" y="161.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,282,967 us, 58.16%)</title><rect x="345.7" y="71" width="686.3" height="15.0" fill="rgb(129.561257770553,129.561257770553,152.49572731043)" rx="2" ry="2" />
<text  x="348.71" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,064 us, 0.05%)</title><rect x="1034.3" y="71" width="0.7" height="15.0" fill="rgb(119.223850481887,147.946924199008,147.946924199008)" rx="2" ry="2" />
<text  x="1037.34" y="81.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,099,582 us, 28.01%)</title><rect x="10.0" y="71" width="330.6" height="15.0" fill="rgb(137.360528166787,152.649025821019,152.649025821019)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (752 us, 0.02%)</title><rect x="1034.1" y="167" width="0.2" height="15.0" fill="rgb(129.018429498782,129.018429498782,152.390663773958)" rx="2" ry="2" />
<text  x="1037.11" y="177.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (468,306 us, 11.93%)</title><rect x="1049.2" y="87" width="140.8" height="15.0" fill="rgb(151.881626926605,151.881626926605,128.349422798162)" rx="2" ry="2" />
<text  x="1052.21" y="97.5" >firedrake.variat..</text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,064 us, 0.05%)</title><rect x="1034.3" y="87" width="0.7" height="15.0" fill="rgb(140.610247256919,140.610247256919,154.634241404565)" rx="2" ry="2" />
<text  x="1037.34" y="97.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (13,059 us, 0.33%)</title><rect x="1045.3" y="87" width="3.9" height="15.0" fill="rgb(125.262183203946,163.329412036567,125.262183203946)" rx="2" ry="2" />
<text  x="1048.29" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (2,316 us, 0.06%)</title><rect x="1043.9" y="103" width="0.7" height="15.0" fill="rgb(131.759278736734,162.271745321927,131.759278736734)" rx="2" ry="2" />
<text  x="1046.90" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (2,289 us, 0.06%)</title><rect x="344.7" y="71" width="0.7" height="15.0" fill="rgb(147.310886657133,159.740088218606,147.310886657133)" rx="2" ry="2" />
<text  x="347.68" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (552 us, 0.01%)</title><rect x="344.9" y="87" width="0.2" height="15.0" fill="rgb(116.199328688551,147.162788919254,147.162788919254)" rx="2" ry="2" />
<text  x="347.92" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (555 us, 0.01%)</title><rect x="1032.3" y="87" width="0.1" height="15.0" fill="rgb(127.021449300119,149.968523892623,149.968523892623)" rx="2" ry="2" />
<text  x="1035.25" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,846 us, 0.17%)</title><rect x="337.9" y="87" width="2.1" height="15.0" fill="rgb(153.818645510263,125.942948912016,125.942948912016)" rx="2" ry="2" />
<text  x="340.93" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (12,471 us, 0.32%)</title><rect x="340.9" y="87" width="3.8" height="15.0" fill="rgb(154.838134978089,133.759034832015,133.759034832015)" rx="2" ry="2" />
<text  x="343.93" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,950 us, 0.30%)</title><rect x="341.1" y="103" width="3.6" height="15.0" fill="rgb(148.817140186932,148.817140186932,113.498448598208)" rx="2" ry="2" />
<text  x="344.09" y="113.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,049,639 us, 26.74%)</title><rect x="22.4" y="135" width="315.5" height="15.0" fill="rgb(139.611438643407,153.232595203846,153.232595203846)" rx="2" ry="2" />
<text  x="25.38" y="145.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,660 us, 0.07%)</title><rect x="1033.5" y="151" width="0.8" height="15.0" fill="rgb(154.448681163699,154.448681163699,140.789762562543)" rx="2" ry="2" />
<text  x="1036.54" y="161.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (2,316 us, 0.06%)</title><rect x="1043.9" y="119" width="0.7" height="15.0" fill="rgb(156.395983575475,145.702540745307,145.702540745307)" rx="2" ry="2" />
<text  x="1046.90" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (468,306 us, 11.93%)</title><rect x="1049.2" y="103" width="140.8" height="15.0" fill="rgb(136.849568003771,161.443093580781,136.849568003771)" rx="2" ry="2" />
<text  x="1052.21" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (18,566 us, 0.47%)</title><rect x="1039.0" y="87" width="5.6" height="15.0" fill="rgb(129.265915132579,129.265915132579,152.438564219209)" rx="2" ry="2" />
<text  x="1042.02" y="97.5" ></text>
</g>
<g >
<title>firedrake (3,925,066 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(138.817341251739,108.84443695758,138.817341251739)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (15,707 us, 0.40%)</title><rect x="1039.2" y="103" width="4.7" height="15.0" fill="rgb(134.092231616,134.092231616,153.372689990194)" rx="2" ry="2" />
<text  x="1042.18" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (470 us, 0.01%)</title><rect x="1189.9" y="231" width="0.1" height="15.0" fill="rgb(151.148794550038,151.148794550038,124.798004357875)" rx="2" ry="2" />
<text  x="1192.86" y="241.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,950 us, 0.30%)</title><rect x="341.1" y="119" width="3.6" height="15.0" fill="rgb(153.039266001792,119.967706013739,119.967706013739)" rx="2" ry="2" />
<text  x="344.09" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,846 us, 0.17%)</title><rect x="337.9" y="103" width="2.1" height="15.0" fill="rgb(152.203808817018,152.203808817018,129.910765805548)" rx="2" ry="2" />
<text  x="340.93" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (711 us, 0.02%)</title><rect x="1034.7" y="103" width="0.3" height="15.0" fill="rgb(118.353327328424,147.721233011073,147.721233011073)" rx="2" ry="2" />
<text  x="1037.74" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,382 us, 0.16%)</title><rect x="1032.4" y="87" width="1.9" height="15.0" fill="rgb(134.550693321898,151.920550120492,151.920550120492)" rx="2" ry="2" />
<text  x="1035.42" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,382 us, 0.16%)</title><rect x="1032.4" y="119" width="1.9" height="15.0" fill="rgb(148.425893796629,148.425893796629,111.60240839905)" rx="2" ry="2" />
<text  x="1035.42" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (610 us, 0.02%)</title><rect x="339.8" y="167" width="0.2" height="15.0" fill="rgb(127.019537609513,163.043331086824,127.019537609513)" rx="2" ry="2" />
<text  x="342.81" y="177.5" ></text>
</g>
<g >
<title>CreateMesh (543 us, 0.01%)</title><rect x="1034.6" y="103" width="0.1" height="15.0" fill="rgb(153.276638800373,153.276638800373,135.109864955652)" rx="2" ry="2" />
<text  x="1037.58" y="113.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (13,059 us, 0.33%)</title><rect x="1045.3" y="103" width="3.9" height="15.0" fill="rgb(156.731925336949,148.27809424994,148.27809424994)" rx="2" ry="2" />
<text  x="1048.29" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,063 us, 0.03%)</title><rect x="1189.7" y="183" width="0.3" height="15.0" fill="rgb(142.431991204045,160.534327013295,142.431991204045)" rx="2" ry="2" />
<text  x="1192.68" y="193.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (15,351 us, 0.39%)</title><rect x="1044.6" y="71" width="4.6" height="15.0" fill="rgb(150.180242779238,150.180242779238,120.104253468614)" rx="2" ry="2" />
<text  x="1047.60" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (825 us, 0.02%)</title><rect x="340.0" y="87" width="0.2" height="15.0" fill="rgb(154.16048819317,154.16048819317,139.393135089979)" rx="2" ry="2" />
<text  x="342.99" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,167 us, 0.08%)</title><rect x="1189.0" y="167" width="1.0" height="15.0" fill="rgb(119.426343866041,119.426343866041,150.534131070847)" rx="2" ry="2" />
<text  x="1192.05" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,666 us, 0.35%)</title><rect x="340.6" y="71" width="4.1" height="15.0" fill="rgb(115.808441528559,147.061447803701,147.061447803701)" rx="2" ry="2" />
<text  x="343.57" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (525 us, 0.01%)</title><rect x="340.8" y="87" width="0.1" height="15.0" fill="rgb(140.065182519143,112.042030205303,140.065182519143)" rx="2" ry="2" />
<text  x="343.77" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,051,002 us, 26.78%)</title><rect x="22.0" y="103" width="315.9" height="15.0" fill="rgb(145.427374236384,154.740430357581,154.740430357581)" rx="2" ry="2" />
<text  x="24.97" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (468,306 us, 11.93%)</title><rect x="1049.2" y="135" width="140.8" height="15.0" fill="rgb(154.211044318382,128.95133977426,128.95133977426)" rx="2" ry="2" />
<text  x="1052.21" y="145.5" >firedrake.tsfc_i..</text>
</g>
<g >
<title>SNESFunctionEval (468,306 us, 11.93%)</title><rect x="1049.2" y="119" width="140.8" height="15.0" fill="rgb(144.159586543285,144.159586543285,155.3212102987)" rx="2" ry="2" />
<text  x="1052.21" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,846 us, 0.17%)</title><rect x="337.9" y="119" width="2.1" height="15.0" fill="rgb(123.774976591378,163.571515438613,123.774976591378)" rx="2" ry="2" />
<text  x="340.93" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (543 us, 0.01%)</title><rect x="1034.6" y="119" width="0.1" height="15.0" fill="rgb(150.022984505526,159.298583917705,150.022984505526)" rx="2" ry="2" />
<text  x="1037.58" y="129.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,090,177 us, 27.77%)</title><rect x="10.2" y="87" width="327.7" height="15.0" fill="rgb(154.42926263238,154.42926263238,140.695657372305)" rx="2" ry="2" />
<text  x="13.19" y="97.5" >firedrake.extrusion_utils.make_extruded_..</text>
</g>
<g >
<title>all (3,925,066 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(148.391988646793,148.391988646793,111.438098826765)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (32,062 us, 0.82%)</title><rect x="1035.0" y="71" width="9.6" height="15.0" fill="rgb(150.585491296777,159.207013044711,150.585491296777)" rx="2" ry="2" />
<text  x="1037.96" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,430 us, 0.11%)</title><rect x="1045.3" y="119" width="1.3" height="15.0" fill="rgb(125.825960764956,149.658582420544,149.658582420544)" rx="2" ry="2" />
<text  x="1048.29" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (470 us, 0.01%)</title><rect x="1189.9" y="215" width="0.1" height="15.0" fill="rgb(148.861382391072,148.861382391072,113.712853125963)" rx="2" ry="2" />
<text  x="1192.86" y="225.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,063 us, 0.03%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(131.474463129724,151.123008959558,151.123008959558)" rx="2" ry="2" />
<text  x="1192.68" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,846 us, 0.17%)</title><rect x="337.9" y="151" width="2.1" height="15.0" fill="rgb(139.909782563524,153.30994362758,153.30994362758)" rx="2" ry="2" />
<text  x="340.93" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,382 us, 0.16%)</title><rect x="1032.4" y="135" width="1.9" height="15.0" fill="rgb(156.336542128327,145.246822983838,145.246822983838)" rx="2" ry="2" />
<text  x="1035.42" y="145.5" ></text>
</g>
<g >
<title>perfsolve (468,306 us, 11.93%)</title><rect x="1049.2" y="71" width="140.8" height="15.0" fill="rgb(154.055409407611,127.758138791685,127.758138791685)" rx="2" ry="2" />
<text  x="1052.21" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,106 us, 0.03%)</title><rect x="340.2" y="87" width="0.4" height="15.0" fill="rgb(104.926360473993,144.240167530294,144.240167530294)" rx="2" ry="2" />
<text  x="343.24" y="97.5" ></text>
</g>
<g >
<title>Mesh: numbering (935 us, 0.02%)</title><rect x="345.1" y="87" width="0.3" height="15.0" fill="rgb(138.220354320509,152.871943712725,152.871943712725)" rx="2" ry="2" />
<text  x="348.08" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (8,629 us, 0.22%)</title><rect x="1046.6" y="119" width="2.6" height="15.0" fill="rgb(156.68925154019,147.950928474794,147.950928474794)" rx="2" ry="2" />
<text  x="1049.62" y="129.5" ></text>
</g>
<g >
<title>PetscBarrier (1,158 us, 0.03%)</title><rect x="345.4" y="71" width="0.3" height="15.0" fill="rgb(129.436634577411,129.436634577411,152.471606692402)" rx="2" ry="2" />
<text  x="348.37" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (12,979 us, 0.33%)</title><rect x="1035.1" y="87" width="3.9" height="15.0" fill="rgb(114.391164222952,114.391164222952,149.559580172184)" rx="2" ry="2" />
<text  x="1038.11" y="97.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,050,326 us, 26.76%)</title><rect x="22.2" y="119" width="315.7" height="15.0" fill="rgb(145.88044104204,145.88044104204,155.654278911363)" rx="2" ry="2" />
<text  x="25.17" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_uniform..</text>
</g>
</g>
</svg>
