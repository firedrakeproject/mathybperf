<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="267" onload="init(evt)" viewBox="0 0 1200 267" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="267.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="249" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="249" > </text>
<g id="frames">
<g >
<title>PetscBarrier (968 us, 0.02%)</title><rect x="285.5" y="71" width="0.3" height="15.0" fill="rgb(154.109835734786,154.109835734786,139.147665483962)" rx="2" ry="2" />
<text  x="288.55" y="81.5" ></text>
</g>
<g >
<title>firedrake (4,453,413 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(111.412530834176,145.921767253305,145.921767253305)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>CreateMesh (493 us, 0.01%)</title><rect x="746.4" y="103" width="0.1" height="15.0" fill="rgb(156.08648168679,143.32969293206,143.32969293206)" rx="2" ry="2" />
<text  x="749.40" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (597 us, 0.01%)</title><rect x="281.0" y="167" width="0.1" height="15.0" fill="rgb(144.885645698663,124.394467102824,144.885645698663)" rx="2" ry="2" />
<text  x="283.97" y="177.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,187 us, 0.07%)</title><rect x="1189.2" y="167" width="0.8" height="15.0" fill="rgb(123.224850978947,123.224850978947,151.269325995925)" rx="2" ry="2" />
<text  x="1192.16" y="177.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (1,043 us, 0.02%)</title><rect x="752.2" y="119" width="0.3" height="15.0" fill="rgb(137.524752972257,105.532179491409,137.524752972257)" rx="2" ry="2" />
<text  x="755.19" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,207 us, 0.09%)</title><rect x="752.9" y="119" width="1.1" height="15.0" fill="rgb(155.261379631782,137.003910510329,137.003910510329)" rx="2" ry="2" />
<text  x="755.89" y="129.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,025,473 us, 23.03%)</title><rect x="10.0" y="71" width="271.7" height="15.0" fill="rgb(127.57277074271,127.57277074271,152.110858853428)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,206 us, 0.14%)</title><rect x="279.5" y="135" width="1.6" height="15.0" fill="rgb(151.344264977922,140.944679005924,151.344264977922)" rx="2" ry="2" />
<text  x="282.49" y="145.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,016,441 us, 22.82%)</title><rect x="10.2" y="87" width="269.3" height="15.0" fill="rgb(152.729424458316,117.592254180421,117.592254180421)" rx="2" ry="2" />
<text  x="13.17" y="97.5" >firedrake.extrusion_utils.make_ex..</text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (1,043 us, 0.02%)</title><rect x="752.2" y="103" width="0.3" height="15.0" fill="rgb(153.818911504726,125.944988202898,125.944988202898)" rx="2" ry="2" />
<text  x="755.19" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (675,364 us, 15.17%)</title><rect x="754.9" y="151" width="178.9" height="15.0" fill="rgb(117.937508659213,147.613428170907,147.613428170907)" rx="2" ry="2" />
<text  x="757.87" y="161.5" >Parloop_Cells_wrap_fo..</text>
</g>
<g >
<title>ParLoopExecute (983,625 us, 22.09%)</title><rect x="18.9" y="103" width="260.6" height="15.0" fill="rgb(134.91115257082,161.758649581494,134.91115257082)" rx="2" ry="2" />
<text  x="21.86" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,536 us, 0.26%)</title><rect x="282.0" y="103" width="3.1" height="15.0" fill="rgb(125.600292921716,149.600075942667,149.600075942667)" rx="2" ry="2" />
<text  x="285.00" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,206 us, 0.14%)</title><rect x="279.5" y="151" width="1.6" height="15.0" fill="rgb(153.537635839563,123.788541436648,123.788541436648)" rx="2" ry="2" />
<text  x="282.49" y="161.5" ></text>
</g>
<g >
<title>CreateMesh (493 us, 0.01%)</title><rect x="746.4" y="119" width="0.1" height="15.0" fill="rgb(144.355715438983,160.221162602956,144.355715438983)" rx="2" ry="2" />
<text  x="749.40" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,215 us, 0.03%)</title><rect x="744.4" y="71" width="0.3" height="15.0" fill="rgb(138.856122793088,161.116445126707,138.856122793088)" rx="2" ry="2" />
<text  x="747.42" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,536 us, 0.26%)</title><rect x="282.0" y="87" width="3.1" height="15.0" fill="rgb(114.540033112349,114.540033112349,149.588393505616)" rx="2" ry="2" />
<text  x="285.00" y="97.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (982,934 us, 22.07%)</title><rect x="19.0" y="119" width="260.5" height="15.0" fill="rgb(143.594354566002,160.345105070651,143.594354566002)" rx="2" ry="2" />
<text  x="22.04" y="129.5" >Parloop_Cells_wrap_pyop2_kernel..</text>
</g>
<g >
<title>CreateFunctionSpace (1,163 us, 0.03%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(149.266400626034,159.421748735297,149.266400626034)" rx="2" ry="2" />
<text  x="1192.69" y="209.5" ></text>
</g>
<g >
<title>Mesh: numbering (773 us, 0.02%)</title><rect x="285.3" y="87" width="0.2" height="15.0" fill="rgb(139.048063506219,139.048063506219,154.331883259268)" rx="2" ry="2" />
<text  x="288.34" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (5,563 us, 0.12%)</title><rect x="744.7" y="103" width="1.5" height="15.0" fill="rgb(130.93893202664,130.93893202664,152.76237394064)" rx="2" ry="2" />
<text  x="747.74" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (1,828 us, 0.04%)</title><rect x="746.2" y="87" width="0.5" height="15.0" fill="rgb(137.422589842111,152.665115884992,152.665115884992)" rx="2" ry="2" />
<text  x="749.21" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (678 us, 0.02%)</title><rect x="746.0" y="167" width="0.2" height="15.0" fill="rgb(135.073487202111,135.073487202111,153.562610426215)" rx="2" ry="2" />
<text  x="749.03" y="177.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,439 us, 0.05%)</title><rect x="745.6" y="151" width="0.6" height="15.0" fill="rgb(130.529262162342,162.471980578223,130.529262162342)" rx="2" ry="2" />
<text  x="748.57" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (5,563 us, 0.12%)</title><rect x="744.7" y="135" width="1.5" height="15.0" fill="rgb(155.661050226782,140.068051738663,140.068051738663)" rx="2" ry="2" />
<text  x="747.74" y="145.5" ></text>
</g>
<g >
<title>CreateMesh (1,863 us, 0.04%)</title><rect x="285.1" y="71" width="0.4" height="15.0" fill="rgb(133.794221297651,133.794221297651,153.315010573739)" rx="2" ry="2" />
<text  x="288.05" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (9,064 us, 0.20%)</title><rect x="752.5" y="71" width="2.4" height="15.0" fill="rgb(152.925019656545,152.925019656545,133.405864489411)" rx="2" ry="2" />
<text  x="755.47" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,845 us, 0.22%)</title><rect x="749.6" y="103" width="2.6" height="15.0" fill="rgb(113.650101061053,113.650101061053,149.416148592462)" rx="2" ry="2" />
<text  x="752.58" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,163 us, 0.03%)</title><rect x="1189.7" y="183" width="0.3" height="15.0" fill="rgb(142.743250092406,154.044546320254,154.044546320254)" rx="2" ry="2" />
<text  x="1192.69" y="193.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (966,861 us, 21.71%)</title><rect x="933.8" y="135" width="256.2" height="15.0" fill="rgb(145.276461218787,160.071273755081,145.276461218787)" rx="2" ry="2" />
<text  x="936.82" y="145.5" >firedrake.tsfc_interface.compil..</text>
</g>
<g >
<title>firedrake.__init__ (1,730,840 us, 38.87%)</title><rect x="285.8" y="71" width="458.6" height="15.0" fill="rgb(117.330542491307,147.45606657182,147.45606657182)" rx="2" ry="2" />
<text  x="288.81" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (21,768 us, 0.49%)</title><rect x="746.7" y="71" width="5.8" height="15.0" fill="rgb(146.046619758971,154.900975493066,154.900975493066)" rx="2" ry="2" />
<text  x="749.70" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (644 us, 0.01%)</title><rect x="746.5" y="103" width="0.2" height="15.0" fill="rgb(149.036032097474,135.029832249777,149.036032097474)" rx="2" ry="2" />
<text  x="749.53" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (1,642,225 us, 36.88%)</title><rect x="754.9" y="87" width="435.1" height="15.0" fill="rgb(126.198455998309,163.176995535159,126.198455998309)" rx="2" ry="2" />
<text  x="757.87" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolve..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (675,364 us, 15.17%)</title><rect x="754.9" y="167" width="178.9" height="15.0" fill="rgb(134.586871459462,161.811439529855,134.586871459462)" rx="2" ry="2" />
<text  x="757.87" y="177.5" >pyop2.global_kernel.G..</text>
</g>
<g >
<title>SNESFunctionEval (1,642,225 us, 36.88%)</title><rect x="754.9" y="119" width="435.1" height="15.0" fill="rgb(151.122802489979,151.122802489979,124.672042836051)" rx="2" ry="2" />
<text  x="757.87" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (1,828 us, 0.04%)</title><rect x="746.2" y="71" width="0.5" height="15.0" fill="rgb(156.135457751994,143.70517609862,143.70517609862)" rx="2" ry="2" />
<text  x="749.21" y="81.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,465 us, 0.17%)</title><rect x="752.9" y="87" width="2.0" height="15.0" fill="rgb(148.298025626157,148.298025626157,110.982739572912)" rx="2" ry="2" />
<text  x="755.89" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,206 us, 0.14%)</title><rect x="279.5" y="103" width="1.6" height="15.0" fill="rgb(140.735952991129,153.524135960663,153.524135960663)" rx="2" ry="2" />
<text  x="282.49" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,258 us, 0.07%)</title><rect x="754.0" y="119" width="0.9" height="15.0" fill="rgb(155.109787288638,135.841702546222,135.841702546222)" rx="2" ry="2" />
<text  x="757.00" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,206 us, 0.14%)</title><rect x="279.5" y="87" width="1.6" height="15.0" fill="rgb(149.619029505389,159.364344034006,149.619029505389)" rx="2" ry="2" />
<text  x="282.49" y="97.5" ></text>
</g>
<g >
<title>all (4,453,413 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(150.745955625806,150.745955625806,122.845784955828)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (12,606 us, 0.28%)</title><rect x="281.7" y="71" width="3.4" height="15.0" fill="rgb(106.018040982801,144.523195810356,144.523195810356)" rx="2" ry="2" />
<text  x="284.71" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,888 us, 0.24%)</title><rect x="749.6" y="87" width="2.9" height="15.0" fill="rgb(154.486314217089,154.486314217089,140.972138128967)" rx="2" ry="2" />
<text  x="752.58" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (517 us, 0.01%)</title><rect x="744.6" y="87" width="0.1" height="15.0" fill="rgb(147.491157999288,147.491157999288,155.966030580507)" rx="2" ry="2" />
<text  x="747.60" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (675,364 us, 15.17%)</title><rect x="754.9" y="135" width="178.9" height="15.0" fill="rgb(149.869651961575,149.869651961575,118.599082583019)" rx="2" ry="2" />
<text  x="757.87" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (5,563 us, 0.12%)</title><rect x="744.7" y="119" width="1.5" height="15.0" fill="rgb(153.77575712304,153.77575712304,137.528669134735)" rx="2" ry="2" />
<text  x="747.74" y="129.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,465 us, 0.17%)</title><rect x="752.9" y="103" width="2.0" height="15.0" fill="rgb(128.793977179463,128.793977179463,152.347221389573)" rx="2" ry="2" />
<text  x="755.89" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,206 us, 0.14%)</title><rect x="279.5" y="119" width="1.6" height="15.0" fill="rgb(152.717980697494,117.504518680788,117.504518680788)" rx="2" ry="2" />
<text  x="282.49" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,536 us, 0.26%)</title><rect x="282.0" y="119" width="3.1" height="15.0" fill="rgb(145.643005659832,160.011603729795,145.643005659832)" rx="2" ry="2" />
<text  x="285.00" y="129.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,275 us, 0.03%)</title><rect x="281.4" y="87" width="0.3" height="15.0" fill="rgb(154.854774505914,154.854774505914,142.757753374815)" rx="2" ry="2" />
<text  x="284.38" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (982,223 us, 22.06%)</title><rect x="19.2" y="135" width="260.3" height="15.0" fill="rgb(149.408470455546,149.408470455546,116.364126053801)" rx="2" ry="2" />
<text  x="22.23" y="145.5" >pyop2.global_kernel.GlobalKerne..</text>
</g>
<g >
<title>perfsolve (1,642,225 us, 36.88%)</title><rect x="754.9" y="71" width="435.1" height="15.0" fill="rgb(152.906420649888,118.949224982478,118.949224982478)" rx="2" ry="2" />
<text  x="757.87" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (5,563 us, 0.12%)</title><rect x="744.7" y="71" width="1.5" height="15.0" fill="rgb(153.415665259766,153.415665259766,135.783608566561)" rx="2" ry="2" />
<text  x="747.74" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (922 us, 0.02%)</title><rect x="281.1" y="87" width="0.3" height="15.0" fill="rgb(139.290759286274,110.057570671077,139.290759286274)" rx="2" ry="2" />
<text  x="284.13" y="97.5" ></text>
</g>
<g >
<title>SNESSolve (1,642,225 us, 36.88%)</title><rect x="754.9" y="103" width="435.1" height="15.0" fill="rgb(148.781442441112,148.781442441112,113.325451830006)" rx="2" ry="2" />
<text  x="757.87" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.ufl_expr.action (10,880 us, 0.24%)</title><rect x="746.7" y="87" width="2.9" height="15.0" fill="rgb(153.78150037039,125.658169506321,125.658169506321)" rx="2" ry="2" />
<text  x="749.70" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (5,563 us, 0.12%)</title><rect x="744.7" y="87" width="1.5" height="15.0" fill="rgb(156.137544099037,143.721171425954,143.721171425954)" rx="2" ry="2" />
<text  x="747.74" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (5,568 us, 0.13%)</title><rect x="1188.5" y="151" width="1.5" height="15.0" fill="rgb(154.656862405711,154.656862405711,141.798640889214)" rx="2" ry="2" />
<text  x="1191.52" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (591 us, 0.01%)</title><rect x="1189.8" y="215" width="0.2" height="15.0" fill="rgb(136.748738247842,152.490413619811,152.490413619811)" rx="2" ry="2" />
<text  x="1192.84" y="225.5" ></text>
</g>
</g>
</svg>
