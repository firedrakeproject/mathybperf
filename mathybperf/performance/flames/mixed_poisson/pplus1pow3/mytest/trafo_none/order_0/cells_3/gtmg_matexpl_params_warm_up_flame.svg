<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="299" onload="init(evt)" viewBox="0 0 1200 299" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="299.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="281" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="281" > </text>
<g id="frames">
<g >
<title>firedrake.assemble.allocate_matrix (13,479 us, 0.26%)</title><rect x="1090.7" y="87" width="3.2" height="15.0" fill="rgb(156.019264078496,142.814357935139,142.814357935139)" rx="2" ry="2" />
<text  x="1093.74" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (668 us, 0.01%)</title><rect x="1074.4" y="103" width="0.1" height="15.0" fill="rgb(151.977525146384,151.977525146384,128.814160324784)" rx="2" ry="2" />
<text  x="1077.36" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (29,899 us, 0.59%)</title><rect x="346.6" y="71" width="6.9" height="15.0" fill="rgb(146.140087642797,159.930683406986,146.140087642797)" rx="2" ry="2" />
<text  x="349.56" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (26,271 us, 0.52%)</title><rect x="347.4" y="87" width="6.1" height="15.0" fill="rgb(129.471673521316,162.644146170949,129.471673521316)" rx="2" ry="2" />
<text  x="350.40" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (18,694 us, 0.37%)</title><rect x="1085.4" y="103" width="4.3" height="15.0" fill="rgb(133.621892167235,133.621892167235,153.281656548497)" rx="2" ry="2" />
<text  x="1088.41" y="113.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (13,479 us, 0.26%)</title><rect x="1090.7" y="103" width="3.2" height="15.0" fill="rgb(153.681197293258,124.889179248314,124.889179248314)" rx="2" ry="2" />
<text  x="1093.74" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (8,029 us, 0.16%)</title><rect x="344.1" y="103" width="1.9" height="15.0" fill="rgb(138.508338420689,161.17306118733,138.508338420689)" rx="2" ry="2" />
<text  x="347.15" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,650 us, 0.13%)</title><rect x="1074.5" y="87" width="1.6" height="15.0" fill="rgb(151.361997692004,151.361997692004,125.831219584329)" rx="2" ry="2" />
<text  x="1077.51" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (719 us, 0.01%)</title><rect x="347.2" y="87" width="0.2" height="15.0" fill="rgb(123.864017489553,163.557020408677,123.864017489553)" rx="2" ry="2" />
<text  x="350.23" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (8,029 us, 0.16%)</title><rect x="344.1" y="87" width="1.9" height="15.0" fill="rgb(154.610859822575,154.610859822575,141.575705294019)" rx="2" ry="2" />
<text  x="347.15" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,382,528 us, 27.11%)</title><rect x="24.3" y="135" width="319.8" height="15.0" fill="rgb(136.707325812741,136.707325812741,153.878837254079)" rx="2" ry="2" />
<text  x="27.30" y="145.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (59,079 us, 1.16%)</title><rect x="1076.6" y="71" width="13.7" height="15.0" fill="rgb(155.284208502057,137.178931849107,137.178931849107)" rx="2" ry="2" />
<text  x="1079.63" y="81.5" ></text>
</g>
<g >
<title>PetscBarrier (1,396 us, 0.03%)</title><rect x="354.0" y="71" width="0.3" height="15.0" fill="rgb(137.775443442164,152.756596447968,152.756596447968)" rx="2" ry="2" />
<text  x="357.03" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (8,866 us, 0.17%)</title><rect x="1090.7" y="119" width="2.1" height="15.0" fill="rgb(124.509606944674,149.317305504175,149.317305504175)" rx="2" ry="2" />
<text  x="1093.74" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (25,450 us, 0.50%)</title><rect x="347.6" y="103" width="5.9" height="15.0" fill="rgb(156.346881932933,145.326094819153,145.326094819153)" rx="2" ry="2" />
<text  x="350.59" y="113.5" ></text>
</g>
<g >
<title>all (5,100,456 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(153.551693722707,153.551693722707,136.442823425428)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,443,523 us, 28.30%)</title><rect x="10.2" y="87" width="333.9" height="15.0" fill="rgb(123.757898261964,149.122418067917,149.122418067917)" rx="2" ry="2" />
<text  x="13.18" y="97.5" >firedrake.extrusion_utils.make_extruded_c..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (668 us, 0.01%)</title><rect x="1074.4" y="119" width="0.1" height="15.0" fill="rgb(121.038049388288,148.41727206363,148.41727206363)" rx="2" ry="2" />
<text  x="1077.36" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,650 us, 0.13%)</title><rect x="1074.5" y="119" width="1.6" height="15.0" fill="rgb(132.72487588737,162.114555088103,132.72487588737)" rx="2" ry="2" />
<text  x="1077.51" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,650 us, 0.13%)</title><rect x="1074.5" y="103" width="1.6" height="15.0" fill="rgb(134.137125919941,96.8513851698485,134.137125919941)" rx="2" ry="2" />
<text  x="1077.51" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (881 us, 0.02%)</title><rect x="1076.4" y="103" width="0.2" height="15.0" fill="rgb(149.555066939085,149.555066939085,117.074555166334)" rx="2" ry="2" />
<text  x="1079.42" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (25,450 us, 0.50%)</title><rect x="347.6" y="119" width="5.9" height="15.0" fill="rgb(153.413206187081,122.834580767621,122.834580767621)" rx="2" ry="2" />
<text  x="350.59" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (14,166 us, 0.28%)</title><rect x="1186.7" y="151" width="3.3" height="15.0" fill="rgb(132.634391735551,162.129285066306,132.634391735551)" rx="2" ry="2" />
<text  x="1189.72" y="161.5" ></text>
</g>
<g >
<title>SNESFunctionEval (415,563 us, 8.15%)</title><rect x="1093.9" y="119" width="96.1" height="15.0" fill="rgb(116.319533059006,147.193953015298,147.193953015298)" rx="2" ry="2" />
<text  x="1096.86" y="129.5" >SNESFuncti..</text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (844 us, 0.02%)</title><rect x="345.8" y="167" width="0.2" height="15.0" fill="rgb(151.473133529276,151.473133529276,126.36980094957)" rx="2" ry="2" />
<text  x="348.81" y="177.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (2,400 us, 0.05%)</title><rect x="1089.7" y="103" width="0.6" height="15.0" fill="rgb(142.62538861225,160.502843714285,142.62538861225)" rx="2" ry="2" />
<text  x="1092.74" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,471 us, 0.05%)</title><rect x="1076.1" y="87" width="0.5" height="15.0" fill="rgb(128.146387574524,128.146387574524,152.221881466037)" rx="2" ry="2" />
<text  x="1079.05" y="97.5" ></text>
</g>
<g >
<title>SNESSolve (415,563 us, 8.15%)</title><rect x="1093.9" y="103" width="96.1" height="15.0" fill="rgb(115.001196504634,146.852162056757,146.852162056757)" rx="2" ry="2" />
<text  x="1096.86" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (6,206 us, 0.12%)</title><rect x="1188.6" y="183" width="1.4" height="15.0" fill="rgb(147.850488055695,147.850488055695,108.813903654521)" rx="2" ry="2" />
<text  x="1191.56" y="193.5" ></text>
</g>
<g >
<title>perfsolve (415,563 us, 8.15%)</title><rect x="1093.9" y="71" width="96.1" height="15.0" fill="rgb(126.049788620036,149.716611864454,149.716611864454)" rx="2" ry="2" />
<text  x="1096.86" y="81.5" >perfsolve</text>
</g>
<g >
<title>Mesh: numbering (970 us, 0.02%)</title><rect x="353.8" y="87" width="0.2" height="15.0" fill="rgb(148.360553020611,148.360553020611,111.285756946036)" rx="2" ry="2" />
<text  x="356.80" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (2,374 us, 0.05%)</title><rect x="353.5" y="71" width="0.5" height="15.0" fill="rgb(136.461408567498,152.415920739722,152.415920739722)" rx="2" ry="2" />
<text  x="356.48" y="81.5" ></text>
</g>
<g >
<title>firedrake.__init__ (3,111,005 us, 60.99%)</title><rect x="354.3" y="71" width="719.8" height="15.0" fill="rgb(146.031058280631,127.329586844116,146.031058280631)" rx="2" ry="2" />
<text  x="357.35" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.function.Function.split (1,724 us, 0.03%)</title><rect x="1089.9" y="119" width="0.4" height="15.0" fill="rgb(152.571565770948,116.382004243936,116.382004243936)" rx="2" ry="2" />
<text  x="1092.89" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (2,478 us, 0.05%)</title><rect x="1189.4" y="231" width="0.6" height="15.0" fill="rgb(118.817197709664,147.841495702506,147.841495702506)" rx="2" ry="2" />
<text  x="1192.43" y="241.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,345 us, 0.03%)</title><rect x="346.2" y="87" width="0.4" height="15.0" fill="rgb(138.395681611917,161.191400667827,138.395681611917)" rx="2" ry="2" />
<text  x="349.25" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (813 us, 0.02%)</title><rect x="1075.9" y="167" width="0.2" height="15.0" fill="rgb(129.757091949562,150.677764579516,150.677764579516)" rx="2" ry="2" />
<text  x="1078.87" y="177.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,385,205 us, 27.16%)</title><rect x="23.7" y="119" width="320.4" height="15.0" fill="rgb(104.871318167549,144.225897302698,144.225897302698)" rx="2" ry="2" />
<text  x="26.68" y="129.5" >Parloop_Cells_wrap_pyop2_kernel_uniform..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (2,478 us, 0.05%)</title><rect x="1189.4" y="247" width="0.6" height="15.0" fill="rgb(113.036072244098,113.036072244098,149.297304305309)" rx="2" ry="2" />
<text  x="1192.43" y="257.5" ></text>
</g>
<g >
<title>CreateMesh (632 us, 0.01%)</title><rect x="1076.3" y="119" width="0.1" height="15.0" fill="rgb(153.516391778833,123.625670304388,123.625670304388)" rx="2" ry="2" />
<text  x="1079.28" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (21,094 us, 0.41%)</title><rect x="1085.4" y="87" width="4.9" height="15.0" fill="rgb(133.213199411318,151.573792439971,151.573792439971)" rx="2" ry="2" />
<text  x="1088.41" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (632 us, 0.01%)</title><rect x="1076.3" y="103" width="0.1" height="15.0" fill="rgb(137.85456510709,161.279489401171,137.85456510709)" rx="2" ry="2" />
<text  x="1079.28" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (8,029 us, 0.16%)</title><rect x="344.1" y="135" width="1.9" height="15.0" fill="rgb(144.540116663631,123.509048950554,144.540116663631)" rx="2" ry="2" />
<text  x="347.15" y="145.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,385,945 us, 27.17%)</title><rect x="23.5" y="103" width="320.6" height="15.0" fill="rgb(111.069775762576,145.832904827334,145.832904827334)" rx="2" ry="2" />
<text  x="26.50" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,650 us, 0.13%)</title><rect x="1074.5" y="135" width="1.6" height="15.0" fill="rgb(141.244116927812,115.063049627519,141.244116927812)" rx="2" ry="2" />
<text  x="1077.51" y="145.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (1,059 us, 0.02%)</title><rect x="346.0" y="87" width="0.2" height="15.0" fill="rgb(154.542017867855,131.488803653554,131.488803653554)" rx="2" ry="2" />
<text  x="349.00" y="97.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,454,750 us, 28.52%)</title><rect x="10.0" y="71" width="336.6" height="15.0" fill="rgb(119.252112902122,119.252112902122,150.500408948798)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (4,613 us, 0.09%)</title><rect x="1092.8" y="119" width="1.1" height="15.0" fill="rgb(154.612406412221,132.028449160363,132.028449160363)" rx="2" ry="2" />
<text  x="1095.79" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (668 us, 0.01%)</title><rect x="1074.4" y="87" width="0.1" height="15.0" fill="rgb(121.145686432505,148.445177963983,148.445177963983)" rx="2" ry="2" />
<text  x="1077.36" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,029 us, 0.16%)</title><rect x="344.1" y="119" width="1.9" height="15.0" fill="rgb(114.618620266688,146.752975624697,146.752975624697)" rx="2" ry="2" />
<text  x="347.15" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (9,858 us, 0.19%)</title><rect x="1187.7" y="167" width="2.3" height="15.0" fill="rgb(132.288902116708,151.334159808036,151.334159808036)" rx="2" ry="2" />
<text  x="1190.72" y="177.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (415,563 us, 8.15%)</title><rect x="1093.9" y="87" width="96.1" height="15.0" fill="rgb(125.118470040773,149.47515889946,149.47515889946)" rx="2" ry="2" />
<text  x="1096.86" y="97.5" >firedrake...</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (3,660 us, 0.07%)</title><rect x="1189.2" y="215" width="0.8" height="15.0" fill="rgb(136.437451205961,102.745968715274,136.437451205961)" rx="2" ry="2" />
<text  x="1192.15" y="225.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (8,029 us, 0.16%)</title><rect x="344.1" y="151" width="1.9" height="15.0" fill="rgb(138.027962212661,138.027962212661,154.134444299225)" rx="2" ry="2" />
<text  x="347.15" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (37,387 us, 0.73%)</title><rect x="1076.8" y="87" width="8.6" height="15.0" fill="rgb(135.557506872243,161.653429113821,135.557506872243)" rx="2" ry="2" />
<text  x="1079.76" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (604 us, 0.01%)</title><rect x="353.7" y="87" width="0.1" height="15.0" fill="rgb(150.915192309032,139.845180291896,150.915192309032)" rx="2" ry="2" />
<text  x="356.66" y="97.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,471 us, 0.05%)</title><rect x="1076.1" y="71" width="0.5" height="15.0" fill="rgb(148.172873784072,148.172873784072,110.37623449204)" rx="2" ry="2" />
<text  x="1079.05" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (935 us, 0.02%)</title><rect x="1188.9" y="215" width="0.3" height="15.0" fill="rgb(149.077231523359,135.135405778608,149.077231523359)" rx="2" ry="2" />
<text  x="1191.94" y="225.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (15,412 us, 0.30%)</title><rect x="1090.3" y="71" width="3.6" height="15.0" fill="rgb(150.448851389829,150.448851389829,121.405972119942)" rx="2" ry="2" />
<text  x="1093.29" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (5,614 us, 0.11%)</title><rect x="1188.7" y="199" width="1.3" height="15.0" fill="rgb(153.2428702987,121.528672290037,121.528672290037)" rx="2" ry="2" />
<text  x="1191.70" y="209.5" ></text>
</g>
<g >
<title>firedrake (5,100,456 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(142.380709087704,142.380709087704,154.97691143633)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,872 us, 0.06%)</title><rect x="1075.4" y="151" width="0.7" height="15.0" fill="rgb(119.011837937657,119.011837937657,150.453904116966)" rx="2" ry="2" />
<text  x="1078.39" y="161.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (415,563 us, 8.15%)</title><rect x="1093.9" y="135" width="96.1" height="15.0" fill="rgb(127.006437717183,163.045463627435,127.006437717183)" rx="2" ry="2" />
<text  x="1096.86" y="145.5" >firedrake...</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,650 us, 0.13%)</title><rect x="1074.5" y="71" width="1.6" height="15.0" fill="rgb(125.994318666664,149.702230765431,149.702230765431)" rx="2" ry="2" />
<text  x="1077.51" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,857 us, 0.04%)</title><rect x="1074.1" y="71" width="0.4" height="15.0" fill="rgb(144.375944042749,144.375944042749,155.363085943758)" rx="2" ry="2" />
<text  x="1077.09" y="81.5" ></text>
</g>
</g>
</svg>
