<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,146 us, 0.12%)</title><rect x="856.6" y="71" width="1.3" height="15.0" fill="rgb(136.811500880177,161.44929055439,136.811500880177)" rx="2" ry="2" />
<text  x="859.56" y="81.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,117,179 us, 18.18%)</title><rect x="10.0" y="87" width="214.5" height="15.0" fill="rgb(126.135437401436,149.738817104076,149.738817104076)" rx="2" ry="2" />
<text  x="13.00" y="97.5" >firedrake.extrusion_utils..</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (996,553 us, 16.22%)</title><rect x="998.6" y="135" width="191.4" height="15.0" fill="rgb(128.205143191346,162.85032552699,128.205143191346)" rx="2" ry="2" />
<text  x="1001.62" y="145.5" >firedrake.tsfc_interfa..</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,076,922 us, 17.53%)</title><rect x="17.7" y="119" width="206.8" height="15.0" fill="rgb(149.405419241381,149.405419241381,116.349339400541)" rx="2" ry="2" />
<text  x="20.73" y="129.5" >Parloop_Cells_wrap_pyop2..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,769 us, 0.11%)</title><rect x="224.5" y="119" width="1.3" height="15.0" fill="rgb(150.840202323871,150.840202323871,123.302518954142)" rx="2" ry="2" />
<text  x="227.55" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,860 us, 0.05%)</title><rect x="857.9" y="71" width="0.6" height="15.0" fill="rgb(155.12368099583,155.12368099583,144.060915595178)" rx="2" ry="2" />
<text  x="860.94" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,146 us, 0.12%)</title><rect x="856.6" y="135" width="1.3" height="15.0" fill="rgb(136.178704920709,161.552303850117,136.178704920709)" rx="2" ry="2" />
<text  x="859.56" y="145.5" ></text>
</g>
<g >
<title>SNESSolve (1,695,779 us, 27.60%)</title><rect x="864.3" y="103" width="325.7" height="15.0" fill="rgb(145.206567784861,125.216829948706,145.206567784861)" rx="2" ry="2" />
<text  x="867.34" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,769 us, 0.11%)</title><rect x="224.5" y="87" width="1.3" height="15.0" fill="rgb(135.218857684135,161.70855805142,135.218857684135)" rx="2" ry="2" />
<text  x="227.55" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (835 us, 0.01%)</title><rect x="857.8" y="167" width="0.1" height="15.0" fill="rgb(154.451085668858,154.451085668858,140.801415164465)" rx="2" ry="2" />
<text  x="860.78" y="177.5" ></text>
</g>
<g >
<title>Mesh: numbering (956 us, 0.02%)</title><rect x="229.0" y="87" width="0.2" height="15.0" fill="rgb(126.944959834395,149.948693290399,149.948693290399)" rx="2" ry="2" />
<text  x="231.98" y="97.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,325 us, 0.02%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(127.465366397649,150.083613510502,150.083613510502)" rx="2" ry="2" />
<text  x="1192.75" y="209.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (847 us, 0.01%)</title><rect x="225.8" y="87" width="0.2" height="15.0" fill="rgb(130.270625030996,150.810902785814,150.810902785814)" rx="2" ry="2" />
<text  x="228.85" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,076,922 us, 17.53%)</title><rect x="17.7" y="135" width="206.8" height="15.0" fill="rgb(135.379933700615,152.135538366826,152.135538366826)" rx="2" ry="2" />
<text  x="20.73" y="145.5" >pyop2.global_kernel.Glob..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,845 us, 0.18%)</title><rect x="860.6" y="87" width="2.1" height="15.0" fill="rgb(150.962611785921,150.962611785921,123.895734039464)" rx="2" ry="2" />
<text  x="863.62" y="97.5" ></text>
</g>
<g >
<title>CreateExtMesh (1,125,813 us, 18.32%)</title><rect x="10.0" y="71" width="216.2" height="15.0" fill="rgb(156.582783690036,147.134674956945,147.134674956945)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,769 us, 0.11%)</title><rect x="224.5" y="135" width="1.3" height="15.0" fill="rgb(137.798333397703,106.233229331614,137.798333397703)" rx="2" ry="2" />
<text  x="227.55" y="145.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (3,903 us, 0.06%)</title><rect x="863.0" y="119" width="0.7" height="15.0" fill="rgb(135.071305106463,135.071305106463,153.562188085122)" rx="2" ry="2" />
<text  x="865.99" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,769 us, 0.11%)</title><rect x="224.5" y="151" width="1.3" height="15.0" fill="rgb(137.757445206975,161.295299617469,137.757445206975)" rx="2" ry="2" />
<text  x="227.55" y="161.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,031 us, 0.11%)</title><rect x="863.0" y="87" width="1.3" height="15.0" fill="rgb(142.046787220567,160.597034638512,142.046787220567)" rx="2" ry="2" />
<text  x="865.99" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,941 us, 0.19%)</title><rect x="226.4" y="87" width="2.3" height="15.0" fill="rgb(152.430740753097,115.30234577374,115.30234577374)" rx="2" ry="2" />
<text  x="229.41" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,076,922 us, 17.53%)</title><rect x="17.7" y="103" width="206.8" height="15.0" fill="rgb(141.426474117934,160.698015841267,141.426474117934)" rx="2" ry="2" />
<text  x="20.73" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (865 us, 0.01%)</title><rect x="862.5" y="103" width="0.2" height="15.0" fill="rgb(147.075458991485,147.075458991485,155.885572708029)" rx="2" ry="2" />
<text  x="865.54" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (1,695,779 us, 27.60%)</title><rect x="864.3" y="87" width="325.7" height="15.0" fill="rgb(142.825214876229,154.065796449393,154.065796449393)" rx="2" ry="2" />
<text  x="867.34" y="97.5" >firedrake.variational_solver.NonlinearVa..</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,128 us, 0.05%)</title><rect x="863.7" y="119" width="0.6" height="15.0" fill="rgb(124.578417789831,163.440722685376,124.578417789831)" rx="2" ry="2" />
<text  x="866.74" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,017 us, 0.21%)</title><rect x="226.2" y="71" width="2.5" height="15.0" fill="rgb(149.748013981679,159.343346561122,149.748013981679)" rx="2" ry="2" />
<text  x="229.20" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,941 us, 0.19%)</title><rect x="226.4" y="103" width="2.3" height="15.0" fill="rgb(136.934260832802,104.019043384055,136.934260832802)" rx="2" ry="2" />
<text  x="229.41" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,769 us, 0.11%)</title><rect x="224.5" y="103" width="1.3" height="15.0" fill="rgb(126.732211008173,149.893536187304,149.893536187304)" rx="2" ry="2" />
<text  x="227.55" y="113.5" ></text>
</g>
<g >
<title>firedrake.__init__ (3,264,423 us, 53.13%)</title><rect x="229.4" y="71" width="626.9" height="15.0" fill="rgb(145.50565416304,160.033963275784,145.50565416304)" rx="2" ry="2" />
<text  x="232.43" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.function.Function.split (865 us, 0.01%)</title><rect x="862.5" y="119" width="0.2" height="15.0" fill="rgb(148.325175976312,148.325175976312,111.114314346741)" rx="2" ry="2" />
<text  x="865.54" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (2,418 us, 0.04%)</title><rect x="228.7" y="71" width="0.5" height="15.0" fill="rgb(111.762695196561,111.762695196561,149.050844231592)" rx="2" ry="2" />
<text  x="231.70" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,548 us, 0.06%)</title><rect x="1189.3" y="167" width="0.7" height="15.0" fill="rgb(154.120644909091,154.120644909091,139.200048405592)" rx="2" ry="2" />
<text  x="1192.32" y="177.5" ></text>
</g>
<g >
<title>firedrake (6,144,477 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(145.043706360752,160.109164080808,145.043706360752)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,179 us, 0.02%)</title><rect x="856.3" y="71" width="0.3" height="15.0" fill="rgb(130.717052566298,130.717052566298,152.719429528961)" rx="2" ry="2" />
<text  x="859.34" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,325 us, 0.02%)</title><rect x="1189.7" y="183" width="0.3" height="15.0" fill="rgb(132.898826453181,93.6782427862758,132.898826453181)" rx="2" ry="2" />
<text  x="1192.75" y="193.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,018 us, 0.02%)</title><rect x="226.0" y="87" width="0.2" height="15.0" fill="rgb(155.128182804796,135.982734836771,135.982734836771)" rx="2" ry="2" />
<text  x="229.01" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,941 us, 0.19%)</title><rect x="226.4" y="119" width="2.3" height="15.0" fill="rgb(128.380114075859,150.320770315964,150.320770315964)" rx="2" ry="2" />
<text  x="229.41" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (699,226 us, 11.38%)</title><rect x="864.3" y="151" width="134.3" height="15.0" fill="rgb(153.542115484829,123.82288538369,123.82288538369)" rx="2" ry="2" />
<text  x="867.34" y="161.5" >Parloop_Cells_w..</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (21,978 us, 0.36%)</title><rect x="858.5" y="71" width="4.2" height="15.0" fill="rgb(137.306624153672,152.635050706507,152.635050706507)" rx="2" ry="2" />
<text  x="861.48" y="81.5" ></text>
</g>
<g >
<title>perfsolve (1,695,779 us, 27.60%)</title><rect x="864.3" y="71" width="325.7" height="15.0" fill="rgb(104.424213907241,144.109981383359,144.109981383359)" rx="2" ry="2" />
<text  x="867.34" y="81.5" >perfsolve</text>
</g>
<g >
<title>PetscBarrier (1,361 us, 0.02%)</title><rect x="229.2" y="71" width="0.2" height="15.0" fill="rgb(147.312973874865,147.312973874865,155.931543330619)" rx="2" ry="2" />
<text  x="232.17" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (699,226 us, 11.38%)</title><rect x="864.3" y="167" width="134.3" height="15.0" fill="rgb(148.199093926794,132.88517818741,148.199093926794)" rx="2" ry="2" />
<text  x="867.34" y="177.5" >pyop2.global_ke..</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,146 us, 0.12%)</title><rect x="856.6" y="119" width="1.3" height="15.0" fill="rgb(153.78603088766,125.692903472057,125.692903472057)" rx="2" ry="2" />
<text  x="859.56" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,860 us, 0.05%)</title><rect x="857.9" y="87" width="0.6" height="15.0" fill="rgb(147.344318136012,130.69481522353,147.344318136012)" rx="2" ry="2" />
<text  x="860.94" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (1,091 us, 0.02%)</title><rect x="858.1" y="103" width="0.2" height="15.0" fill="rgb(129.973998563975,162.562372326795,129.973998563975)" rx="2" ry="2" />
<text  x="861.12" y="113.5" ></text>
</g>
<g >
<title>SNESFunctionEval (1,695,779 us, 27.60%)</title><rect x="864.3" y="119" width="325.7" height="15.0" fill="rgb(153.15151248541,153.15151248541,134.503483583142)" rx="2" ry="2" />
<text  x="867.34" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>ParLoopExecute (699,226 us, 11.38%)</title><rect x="864.3" y="135" width="134.3" height="15.0" fill="rgb(117.190176694113,117.190176694113,150.101324521441)" rx="2" ry="2" />
<text  x="867.34" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,031 us, 0.11%)</title><rect x="863.0" y="103" width="1.3" height="15.0" fill="rgb(134.852959865713,151.998915520741,151.998915520741)" rx="2" ry="2" />
<text  x="865.99" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,007 us, 0.10%)</title><rect x="1188.8" y="151" width="1.2" height="15.0" fill="rgb(153.011959969525,119.758359766355,119.758359766355)" rx="2" ry="2" />
<text  x="1191.85" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,503 us, 0.14%)</title><rect x="862.7" y="71" width="1.6" height="15.0" fill="rgb(153.259198242683,121.653853193902,121.653853193902)" rx="2" ry="2" />
<text  x="865.71" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,133 us, 0.18%)</title><rect x="858.5" y="87" width="2.1" height="15.0" fill="rgb(142.255427168716,142.255427168716,154.952663322977)" rx="2" ry="2" />
<text  x="861.48" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,876 us, 0.05%)</title><rect x="857.4" y="151" width="0.5" height="15.0" fill="rgb(155.511341849743,155.511341849743,145.939579733372)" rx="2" ry="2" />
<text  x="860.38" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,146 us, 0.12%)</title><rect x="856.6" y="103" width="1.3" height="15.0" fill="rgb(126.494659833984,149.831948845848,149.831948845848)" rx="2" ry="2" />
<text  x="859.56" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,980 us, 0.16%)</title><rect x="860.6" y="103" width="1.9" height="15.0" fill="rgb(148.388898132964,148.388898132964,111.423121721287)" rx="2" ry="2" />
<text  x="863.62" y="113.5" ></text>
</g>
<g >
<title>all (6,144,477 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(141.620643804905,141.620643804905,154.829802026756)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (7,146 us, 0.12%)</title><rect x="856.6" y="87" width="1.3" height="15.0" fill="rgb(146.68338571964,146.68338571964,155.80968755864)" rx="2" ry="2" />
<text  x="859.56" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (835 us, 0.01%)</title><rect x="858.3" y="103" width="0.2" height="15.0" fill="rgb(137.724154392975,152.743299287068,152.743299287068)" rx="2" ry="2" />
<text  x="861.32" y="113.5" ></text>
</g>
</g>
</svg>
