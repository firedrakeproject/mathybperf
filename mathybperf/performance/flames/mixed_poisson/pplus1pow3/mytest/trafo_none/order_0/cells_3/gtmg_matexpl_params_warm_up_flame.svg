<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>ParLoopExecute (2,474,190 us, 13.88%)</title><rect x="15.4" y="103" width="163.8" height="15.0" fill="rgb(142.205185750668,160.571248831287,142.205185750668)" rx="2" ry="2" />
<text  x="18.38" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (53,510 us, 0.30%)</title><rect x="506.1" y="71" width="3.6" height="15.0" fill="rgb(155.172319761824,136.32111817398,136.32111817398)" rx="2" ry="2" />
<text  x="509.13" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (4,909 us, 0.03%)</title><rect x="505.5" y="151" width="0.3" height="15.0" fill="rgb(143.209445415668,120.099203877649,143.209445415668)" rx="2" ry="2" />
<text  x="508.46" y="161.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (2,242 us, 0.01%)</title><rect x="180.1" y="87" width="0.2" height="15.0" fill="rgb(136.477700513089,161.503630149032,136.477700513089)" rx="2" ry="2" />
<text  x="183.12" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (10,645 us, 0.06%)</title><rect x="509.9" y="119" width="0.7" height="15.0" fill="rgb(154.928830118777,134.454364243959,134.454364243959)" rx="2" ry="2" />
<text  x="512.87" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (6,325 us, 0.04%)</title><rect x="510.6" y="119" width="0.4" height="15.0" fill="rgb(149.844931390754,149.844931390754,118.479282893653)" rx="2" ry="2" />
<text  x="513.58" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (11,797 us, 0.07%)</title><rect x="505.0" y="71" width="0.8" height="15.0" fill="rgb(128.676509947479,162.773591403899,128.676509947479)" rx="2" ry="2" />
<text  x="508.00" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (3,185 us, 0.02%)</title><rect x="1189.8" y="199" width="0.2" height="15.0" fill="rgb(155.999016133304,142.659123688661,142.659123688661)" rx="2" ry="2" />
<text  x="1192.79" y="209.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (2,474,190 us, 13.88%)</title><rect x="15.4" y="119" width="163.8" height="15.0" fill="rgb(124.458571947923,124.458571947923,151.508110699598)" rx="2" ry="2" />
<text  x="18.38" y="129.5" >Parloop_Cells_wrap_..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (2,474,190 us, 13.88%)</title><rect x="15.4" y="135" width="163.8" height="15.0" fill="rgb(155.197316894999,136.512762861658,136.512762861658)" rx="2" ry="2" />
<text  x="18.38" y="145.5" >pyop2.global_kernel..</text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (16,970 us, 0.10%)</title><rect x="509.9" y="103" width="1.1" height="15.0" fill="rgb(148.222872905169,148.222872905169,110.618537925051)" rx="2" ry="2" />
<text  x="512.87" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (12,660 us, 0.07%)</title><rect x="1189.2" y="151" width="0.8" height="15.0" fill="rgb(131.741810470735,131.741810470735,152.917769768529)" rx="2" ry="2" />
<text  x="1192.16" y="161.5" ></text>
</g>
<g >
<title>PetscBarrier (2,765 us, 0.02%)</title><rect x="183.2" y="71" width="0.2" height="15.0" fill="rgb(145.895692999386,159.970468581495,145.895692999386)" rx="2" ry="2" />
<text  x="186.24" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (11,797 us, 0.07%)</title><rect x="505.0" y="87" width="0.8" height="15.0" fill="rgb(133.26500327841,133.26500327841,153.212581279692)" rx="2" ry="2" />
<text  x="508.00" y="97.5" ></text>
</g>
<g >
<title>all (17,825,886 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(138.816497518623,138.816497518623,154.287064035863)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (20,035 us, 0.11%)</title><rect x="509.7" y="71" width="1.3" height="15.0" fill="rgb(155.790403508646,155.790403508646,147.291955464975)" rx="2" ry="2" />
<text  x="512.67" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (3,185 us, 0.02%)</title><rect x="1189.8" y="183" width="0.2" height="15.0" fill="rgb(150.531221857345,150.531221857345,121.805152077905)" rx="2" ry="2" />
<text  x="1192.79" y="193.5" ></text>
</g>
<g >
<title>CreateExtMesh (2,574,924 us, 14.44%)</title><rect x="10.0" y="71" width="170.4" height="15.0" fill="rgb(141.338485485672,153.680348088878,153.680348088878)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (16,970 us, 0.10%)</title><rect x="509.9" y="87" width="1.1" height="15.0" fill="rgb(154.164570570495,154.164570570495,139.412918918552)" rx="2" ry="2" />
<text  x="512.87" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (35,042 us, 0.20%)</title><rect x="180.6" y="103" width="2.3" height="15.0" fill="rgb(154.159713699975,128.557805033144,128.557805033144)" rx="2" ry="2" />
<text  x="183.61" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,797 us, 0.07%)</title><rect x="505.0" y="103" width="0.8" height="15.0" fill="rgb(148.058659445555,148.058659445555,109.822734236151)" rx="2" ry="2" />
<text  x="508.00" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (35,042 us, 0.20%)</title><rect x="180.6" y="119" width="2.3" height="15.0" fill="rgb(148.853431412446,148.853431412446,113.674321460317)" rx="2" ry="2" />
<text  x="183.61" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (1,939 us, 0.01%)</title><rect x="506.0" y="103" width="0.1" height="15.0" fill="rgb(133.715028623584,161.95336743337,133.715028623584)" rx="2" ry="2" />
<text  x="509.00" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (7,096,180 us, 39.81%)</title><rect x="511.0" y="135" width="469.7" height="15.0" fill="rgb(129.200411392807,162.688305122101,129.200411392807)" rx="2" ry="2" />
<text  x="514.00" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (2,479 us, 0.01%)</title><rect x="504.8" y="71" width="0.2" height="15.0" fill="rgb(153.465099427018,123.232428940474,123.232428940474)" rx="2" ry="2" />
<text  x="507.84" y="81.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (5,190 us, 0.03%)</title><rect x="505.8" y="87" width="0.3" height="15.0" fill="rgb(147.042052151939,147.042052151939,155.879106868117)" rx="2" ry="2" />
<text  x="508.79" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,797 us, 0.07%)</title><rect x="505.0" y="119" width="0.8" height="15.0" fill="rgb(106.920875782478,144.757264091754,144.757264091754)" rx="2" ry="2" />
<text  x="508.00" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (26,381 us, 0.15%)</title><rect x="507.9" y="87" width="1.8" height="15.0" fill="rgb(142.220819861478,142.220819861478,154.94596513448)" rx="2" ry="2" />
<text  x="510.93" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (4,703 us, 0.03%)</title><rect x="182.9" y="71" width="0.3" height="15.0" fill="rgb(106.08778190857,144.541276791111,144.541276791111)" rx="2" ry="2" />
<text  x="185.93" y="81.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (7,096,180 us, 39.81%)</title><rect x="511.0" y="151" width="469.7" height="15.0" fill="rgb(127.47734822218,127.47734822218,152.092389978486)" rx="2" ry="2" />
<text  x="514.00" y="161.5" >Parloop_Cells_wrap_form0_cell_integral_otherwise</text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (2,555,475 us, 14.34%)</title><rect x="10.0" y="87" width="169.2" height="15.0" fill="rgb(148.159540689812,148.159540689812,110.311620266011)" rx="2" ry="2" />
<text  x="13.00" y="97.5" >firedrake.extrusion_..</text>
</g>
<g >
<title>CreateFunctionSpace (37,508 us, 0.21%)</title><rect x="180.4" y="71" width="2.5" height="15.0" fill="rgb(138.017531485337,161.252959990759,138.017531485337)" rx="2" ry="2" />
<text  x="183.45" y="81.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (5,190 us, 0.03%)</title><rect x="505.8" y="71" width="0.3" height="15.0" fill="rgb(153.45956666641,123.190011109145,123.190011109145)" rx="2" ry="2" />
<text  x="508.79" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (24,202 us, 0.14%)</title><rect x="507.9" y="103" width="1.6" height="15.0" fill="rgb(131.255143039026,151.066148195303,151.066148195303)" rx="2" ry="2" />
<text  x="510.93" y="113.5" ></text>
</g>
<g >
<title>perfsolve (10,257,473 us, 57.54%)</title><rect x="511.0" y="71" width="679.0" height="15.0" fill="rgb(156.696412384442,148.005828280723,148.005828280723)" rx="2" ry="2" />
<text  x="514.00" y="81.5" >perfsolve</text>
</g>
<g >
<title>SNESSolve (10,257,473 us, 57.54%)</title><rect x="511.0" y="103" width="679.0" height="15.0" fill="rgb(155.415345569167,138.184316030278,138.184316030278)" rx="2" ry="2" />
<text  x="514.00" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.__init__ (4,855,502 us, 27.24%)</title><rect x="183.4" y="71" width="321.4" height="15.0" fill="rgb(129.568301646903,129.568301646903,152.497090641336)" rx="2" ry="2" />
<text  x="186.43" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (2,704 us, 0.02%)</title><rect x="180.3" y="87" width="0.1" height="15.0" fill="rgb(150.850471103652,150.850471103652,123.352283040777)" rx="2" ry="2" />
<text  x="183.27" y="97.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (2,179 us, 0.01%)</title><rect x="509.5" y="119" width="0.2" height="15.0" fill="rgb(149.284051044796,149.284051044796,115.761170447856)" rx="2" ry="2" />
<text  x="512.53" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (2,179 us, 0.01%)</title><rect x="509.5" y="103" width="0.2" height="15.0" fill="rgb(127.340946294486,150.051356446719,150.051356446719)" rx="2" ry="2" />
<text  x="512.53" y="113.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (3,161,293 us, 17.73%)</title><rect x="980.7" y="135" width="209.3" height="15.0" fill="rgb(130.588334775665,162.462364106287,130.588334775665)" rx="2" ry="2" />
<text  x="983.74" y="145.5" >firedrake.tsfc_interface...</text>
</g>
<g >
<title>CreateFunctionSpace (14,503 us, 0.08%)</title><rect x="179.2" y="103" width="0.9" height="15.0" fill="rgb(152.234389513742,113.796986272021,113.796986272021)" rx="2" ry="2" />
<text  x="182.16" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (7,177 us, 0.04%)</title><rect x="1189.5" y="167" width="0.5" height="15.0" fill="rgb(137.112602244075,104.476043250442,137.112602244075)" rx="2" ry="2" />
<text  x="1192.52" y="177.5" ></text>
</g>
<g >
<title>SNESFunctionEval (10,257,473 us, 57.54%)</title><rect x="511.0" y="119" width="679.0" height="15.0" fill="rgb(152.412024648589,115.158855639181,115.158855639181)" rx="2" ry="2" />
<text  x="514.00" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (14,503 us, 0.08%)</title><rect x="179.2" y="119" width="0.9" height="15.0" fill="rgb(153.668023097875,153.668023097875,137.006573474316)" rx="2" ry="2" />
<text  x="182.16" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (14,503 us, 0.08%)</title><rect x="179.2" y="151" width="0.9" height="15.0" fill="rgb(156.646213718942,147.620971845225,147.620971845225)" rx="2" ry="2" />
<text  x="182.16" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (10,257,473 us, 57.54%)</title><rect x="511.0" y="87" width="679.0" height="15.0" fill="rgb(142.063822636039,153.868398461195,153.868398461195)" rx="2" ry="2" />
<text  x="514.00" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,797 us, 0.07%)</title><rect x="505.0" y="135" width="0.8" height="15.0" fill="rgb(108.48147728554,145.161864481436,145.161864481436)" rx="2" ry="2" />
<text  x="508.00" y="145.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (7,096,180 us, 39.81%)</title><rect x="511.0" y="167" width="469.7" height="15.0" fill="rgb(156.657301188533,147.705975778749,147.705975778749)" rx="2" ry="2" />
<text  x="514.00" y="177.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (14,503 us, 0.08%)</title><rect x="179.2" y="87" width="0.9" height="15.0" fill="rgb(135.187212328418,99.5422315915706,135.187212328418)" rx="2" ry="2" />
<text  x="182.16" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (14,503 us, 0.08%)</title><rect x="179.2" y="135" width="0.9" height="15.0" fill="rgb(132.652249653034,151.428361021157,151.428361021157)" rx="2" ry="2" />
<text  x="182.16" y="145.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (27,129 us, 0.15%)</title><rect x="506.1" y="87" width="1.8" height="15.0" fill="rgb(152.668039975584,152.668039975584,132.16050142014)" rx="2" ry="2" />
<text  x="509.13" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (35,042 us, 0.20%)</title><rect x="180.6" y="87" width="2.3" height="15.0" fill="rgb(133.609818891762,133.609818891762,153.279319785502)" rx="2" ry="2" />
<text  x="183.61" y="97.5" ></text>
</g>
<g >
<title>firedrake (17,825,886 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(146.911904302173,159.80503883453,146.911904302173)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
</g>
</svg>
