<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="251" onload="init(evt)" viewBox="0 0 1200 251" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="251.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="233" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="233" > </text>
<g id="frames">
<g >
<title>firedrake.mesh._from_cell_list (950 us, 0.02%)</title><rect x="846.6" y="103" width="0.1" height="15.0" fill="rgb(134.701373466904,161.792799668178,134.701373466904)" rx="2" ry="2" />
<text  x="849.55" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,997 us, 0.15%)</title><rect x="851.3" y="71" width="1.8" height="15.0" fill="rgb(139.606619225564,160.994271288862,139.606619225564)" rx="2" ry="2" />
<text  x="854.30" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (12,776 us, 0.22%)</title><rect x="246.1" y="103" width="2.6" height="15.0" fill="rgb(126.515447587498,163.125392253198,126.515447587498)" rx="2" ry="2" />
<text  x="249.11" y="113.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,960,756 us, 50.39%)</title><rect x="249.5" y="71" width="594.6" height="15.0" fill="rgb(154.268179962608,129.389379713328,129.389379713328)" rx="2" ry="2" />
<text  x="252.47" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>CreateFunctionSpace (9,333 us, 0.16%)</title><rect x="844.4" y="87" width="1.8" height="15.0" fill="rgb(130.573175677938,150.889341842428,150.889341842428)" rx="2" ry="2" />
<text  x="847.35" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (694 us, 0.01%)</title><rect x="245.4" y="167" width="0.1" height="15.0" fill="rgb(155.240785432017,136.846021645467,136.846021645467)" rx="2" ry="2" />
<text  x="248.35" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (12,776 us, 0.22%)</title><rect x="246.1" y="119" width="2.6" height="15.0" fill="rgb(156.762770903682,148.51457692823,148.51457692823)" rx="2" ry="2" />
<text  x="249.11" y="129.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,110,465 us, 18.90%)</title><rect x="21.0" y="135" width="223.0" height="15.0" fill="rgb(128.961489589874,128.961489589874,152.379643146427)" rx="2" ry="2" />
<text  x="23.95" y="145.5" >pyop2.global_kernel.GlobalK..</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,317 us, 0.02%)</title><rect x="1189.7" y="183" width="0.3" height="15.0" fill="rgb(155.504074677367,155.504074677367,145.904361898011)" rx="2" ry="2" />
<text  x="1192.74" y="193.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (1,013 us, 0.02%)</title><rect x="245.7" y="87" width="0.2" height="15.0" fill="rgb(153.346960874966,122.326700041402,122.326700041402)" rx="2" ry="2" />
<text  x="248.67" y="97.5" ></text>
</g>
<g >
<title>SNESFunctionEval (1,677,422 us, 28.55%)</title><rect x="853.1" y="119" width="336.9" height="15.0" fill="rgb(155.016260364632,135.124662795512,135.124662795512)" rx="2" ry="2" />
<text  x="856.11" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,543 us, 0.13%)</title><rect x="244.0" y="119" width="1.5" height="15.0" fill="rgb(155.843770609381,155.843770609381,147.550580645462)" rx="2" ry="2" />
<text  x="246.98" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,212 us, 0.07%)</title><rect x="851.6" y="119" width="0.9" height="15.0" fill="rgb(128.91850136695,162.734197451892,128.91850136695)" rx="2" ry="2" />
<text  x="854.61" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,543 us, 0.13%)</title><rect x="244.0" y="135" width="1.5" height="15.0" fill="rgb(131.80945546855,162.263577016748,131.80945546855)" rx="2" ry="2" />
<text  x="246.98" y="145.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,238 us, 0.06%)</title><rect x="852.5" y="119" width="0.6" height="15.0" fill="rgb(131.780662158896,151.202393893047,151.202393893047)" rx="2" ry="2" />
<text  x="855.46" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (663 us, 0.01%)</title><rect x="846.4" y="119" width="0.2" height="15.0" fill="rgb(136.537431124112,161.493906561191,136.537431124112)" rx="2" ry="2" />
<text  x="849.42" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,567 us, 0.04%)</title><rect x="846.2" y="71" width="0.5" height="15.0" fill="rgb(137.02118037808,152.561046764687,152.561046764687)" rx="2" ry="2" />
<text  x="849.23" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (1,677,422 us, 28.55%)</title><rect x="853.1" y="87" width="336.9" height="15.0" fill="rgb(121.00902391273,121.00902391273,150.840456241173)" rx="2" ry="2" />
<text  x="856.11" y="97.5" >firedrake.variational_solver.NonlinearVar..</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (3,472 us, 0.06%)</title><rect x="845.5" y="151" width="0.7" height="15.0" fill="rgb(143.442240173483,160.369867878735,143.442240173483)" rx="2" ry="2" />
<text  x="848.53" y="161.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,450 us, 0.13%)</title><rect x="851.6" y="87" width="1.5" height="15.0" fill="rgb(125.240854044825,163.332884225261,125.240854044825)" rx="2" ry="2" />
<text  x="854.61" y="97.5" ></text>
</g>
<g >
<title>all (5,875,308 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(139.640469177979,160.988760831492,139.640469177979)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>perfsolve (1,677,422 us, 28.55%)</title><rect x="853.1" y="71" width="336.9" height="15.0" fill="rgb(154.384111673701,154.384111673701,140.476848880241)" rx="2" ry="2" />
<text  x="856.11" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (907 us, 0.02%)</title><rect x="245.5" y="87" width="0.2" height="15.0" fill="rgb(153.949963517775,153.949963517775,138.372900124601)" rx="2" ry="2" />
<text  x="248.49" y="97.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (975,451 us, 16.60%)</title><rect x="994.1" y="135" width="195.9" height="15.0" fill="rgb(152.406338098811,115.115258757554,115.115258757554)" rx="2" ry="2" />
<text  x="997.09" y="145.5" >firedrake.tsfc_interfac..</text>
</g>
<g >
<title>CreateFunctionSpace (13,911 us, 0.24%)</title><rect x="245.9" y="71" width="2.8" height="15.0" fill="rgb(131.333251237764,162.341098635713,131.333251237764)" rx="2" ry="2" />
<text  x="248.88" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,371 us, 0.18%)</title><rect x="849.0" y="103" width="2.1" height="15.0" fill="rgb(142.100828521005,153.87799257952,153.87799257952)" rx="2" ry="2" />
<text  x="852.04" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (701,971 us, 11.95%)</title><rect x="853.1" y="151" width="141.0" height="15.0" fill="rgb(149.813775331327,159.332641225133,149.813775331327)" rx="2" ry="2" />
<text  x="856.11" y="161.5" >Parloop_Cells_wr..</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,203 us, 0.02%)</title><rect x="844.1" y="71" width="0.3" height="15.0" fill="rgb(150.939548919326,150.939548919326,123.783967839812)" rx="2" ry="2" />
<text  x="847.11" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (701,971 us, 11.95%)</title><rect x="853.1" y="167" width="141.0" height="15.0" fill="rgb(110.993594406007,145.813154105261,145.813154105261)" rx="2" ry="2" />
<text  x="856.11" y="177.5" >pyop2.global_ker..</text>
</g>
<g >
<title>CreateExtMesh (1,174,456 us, 19.99%)</title><rect x="10.0" y="71" width="235.9" height="15.0" fill="rgb(138.127052623491,152.847754383868,152.847754383868)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >CreateExtMesh</text>
</g>
<g >
<title>CreateMesh (2,637 us, 0.04%)</title><rect x="248.7" y="71" width="0.5" height="15.0" fill="rgb(133.89370927184,133.89370927184,153.334266310679)" rx="2" ry="2" />
<text  x="251.67" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (12,776 us, 0.22%)</title><rect x="246.1" y="87" width="2.6" height="15.0" fill="rgb(145.601703500817,145.601703500817,155.600329709835)" rx="2" ry="2" />
<text  x="249.11" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (11,238 us, 0.19%)</title><rect x="849.0" y="87" width="2.3" height="15.0" fill="rgb(134.058001557891,161.897534630111,134.058001557891)" rx="2" ry="2" />
<text  x="852.04" y="97.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,111,221 us, 18.91%)</title><rect x="20.8" y="119" width="223.2" height="15.0" fill="rgb(131.477232624777,131.477232624777,152.866561153183)" rx="2" ry="2" />
<text  x="23.80" y="129.5" >Parloop_Cells_wrap_pyop2_ke..</text>
</g>
<g >
<title>PetscBarrier (1,332 us, 0.02%)</title><rect x="249.2" y="71" width="0.3" height="15.0" fill="rgb(126.973317812093,163.050855239892,126.973317812093)" rx="2" ry="2" />
<text  x="252.20" y="81.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,164,304 us, 19.82%)</title><rect x="10.1" y="87" width="233.9" height="15.0" fill="rgb(136.70717506499,103.437136104038,136.70717506499)" rx="2" ry="2" />
<text  x="13.14" y="97.5" >firedrake.extrusion_utils.ma..</text>
</g>
<g >
<title>firedrake (5,875,308 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(138.210963519618,138.210963519618,154.169863907023)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (9,333 us, 0.16%)</title><rect x="844.4" y="103" width="1.8" height="15.0" fill="rgb(155.977149421816,142.491478900587,142.491478900587)" rx="2" ry="2" />
<text  x="847.35" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,543 us, 0.13%)</title><rect x="244.0" y="151" width="1.5" height="15.0" fill="rgb(106.455728123007,144.636670254113,144.636670254113)" rx="2" ry="2" />
<text  x="246.98" y="161.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (1,006 us, 0.02%)</title><rect x="846.0" y="167" width="0.2" height="15.0" fill="rgb(126.283425596358,126.283425596358,151.86130817994)" rx="2" ry="2" />
<text  x="849.02" y="177.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,567 us, 0.04%)</title><rect x="846.2" y="87" width="0.5" height="15.0" fill="rgb(142.759326007977,154.048714150216,154.048714150216)" rx="2" ry="2" />
<text  x="849.23" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,543 us, 0.13%)</title><rect x="244.0" y="87" width="1.5" height="15.0" fill="rgb(154.274441809941,129.437387209551,129.437387209551)" rx="2" ry="2" />
<text  x="246.98" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (867 us, 0.01%)</title><rect x="851.1" y="103" width="0.2" height="15.0" fill="rgb(146.621656666067,155.050059135647,155.050059135647)" rx="2" ry="2" />
<text  x="854.12" y="113.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,365 us, 0.06%)</title><rect x="1189.3" y="167" width="0.7" height="15.0" fill="rgb(124.9468510826,124.9468510826,151.602616338568)" rx="2" ry="2" />
<text  x="1192.32" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (7,543 us, 0.13%)</title><rect x="244.0" y="103" width="1.5" height="15.0" fill="rgb(127.592050051379,150.116457420728,150.116457420728)" rx="2" ry="2" />
<text  x="246.98" y="113.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,450 us, 0.13%)</title><rect x="851.6" y="103" width="1.5" height="15.0" fill="rgb(142.945105852798,119.421833747796,142.945105852798)" rx="2" ry="2" />
<text  x="854.61" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (9,333 us, 0.16%)</title><rect x="844.4" y="71" width="1.8" height="15.0" fill="rgb(138.268077471254,161.212173434912,138.268077471254)" rx="2" ry="2" />
<text  x="847.35" y="81.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (1,317 us, 0.02%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(114.706676583469,114.706676583469,149.620647080671)" rx="2" ry="2" />
<text  x="1192.74" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (9,333 us, 0.16%)</title><rect x="844.4" y="119" width="1.8" height="15.0" fill="rgb(142.384143207541,160.542116222028,142.384143207541)" rx="2" ry="2" />
<text  x="847.35" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (1,677,422 us, 28.55%)</title><rect x="853.1" y="103" width="336.9" height="15.0" fill="rgb(129.322060656013,129.322060656013,152.449431094712)" rx="2" ry="2" />
<text  x="856.11" y="113.5" >SNESSolve</text>
</g>
<g >
<title>ParLoopExecute (701,971 us, 11.95%)</title><rect x="853.1" y="135" width="141.0" height="15.0" fill="rgb(146.742732063424,146.742732063424,155.821173947759)" rx="2" ry="2" />
<text  x="856.11" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>ParLoopExecute (1,111,221 us, 18.91%)</title><rect x="20.8" y="103" width="223.2" height="15.0" fill="rgb(136.399918879434,102.649792128548,136.399918879434)" rx="2" ry="2" />
<text  x="23.80" y="113.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (9,333 us, 0.16%)</title><rect x="844.4" y="135" width="1.8" height="15.0" fill="rgb(127.783606373147,150.166120170816,150.166120170816)" rx="2" ry="2" />
<text  x="847.35" y="145.5" ></text>
</g>
<g >
<title>CreateMesh (663 us, 0.01%)</title><rect x="846.4" y="103" width="0.2" height="15.0" fill="rgb(152.817059286908,152.817059286908,132.882671928864)" rx="2" ry="2" />
<text  x="849.42" y="113.5" ></text>
</g>
<g >
<title>Mesh: numbering (1,123 us, 0.02%)</title><rect x="249.0" y="87" width="0.2" height="15.0" fill="rgb(136.45381205239,102.787893384248,136.45381205239)" rx="2" ry="2" />
<text  x="251.98" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,456 us, 0.19%)</title><rect x="846.7" y="87" width="2.3" height="15.0" fill="rgb(139.767214384686,111.278486860757,139.767214384686)" rx="2" ry="2" />
<text  x="849.74" y="97.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (867 us, 0.01%)</title><rect x="851.1" y="119" width="0.2" height="15.0" fill="rgb(138.095453127079,138.095453127079,154.147507056854)" rx="2" ry="2" />
<text  x="854.12" y="129.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (22,694 us, 0.39%)</title><rect x="846.7" y="71" width="4.6" height="15.0" fill="rgb(142.862809819995,142.862809819995,155.070221255483)" rx="2" ry="2" />
<text  x="849.74" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,966 us, 0.12%)</title><rect x="1188.6" y="151" width="1.4" height="15.0" fill="rgb(117.337715084452,147.457926133006,147.457926133006)" rx="2" ry="2" />
<text  x="1191.60" y="161.5" ></text>
</g>
</g>
</svg>
