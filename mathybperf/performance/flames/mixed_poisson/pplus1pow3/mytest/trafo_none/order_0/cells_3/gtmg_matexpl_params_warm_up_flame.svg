<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="267" onload="init(evt)" viewBox="0 0 1200 267" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="267.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="249" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="249" > </text>
<g id="frames">
<g >
<title>Log_Event_form0_cell_integral_otherwise (8,076 us, 0.03%)</title><rect x="902.9" y="167" width="0.4" height="15.0" fill="rgb(146.679676658945,146.679676658945,155.808969675925)" rx="2" ry="2" />
<text  x="905.94" y="177.5" ></text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (25,379 us, 0.10%)</title><rect x="867.5" y="151" width="1.2" height="15.0" fill="rgb(148.275292588649,159.583091904173,148.275292588649)" rx="2" ry="2" />
<text  x="870.47" y="161.5" ></text>
</g>
<g >
<title>perfsolve (20,935,567 us, 85.80%)</title><rect x="177.5" y="71" width="1012.5" height="15.0" fill="rgb(139.724343226424,160.975106916629,139.724343226424)" rx="2" ry="2" />
<text  x="180.52" y="81.5" >perfsolve</text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (1,124,761 us, 4.61%)</title><rect x="12.5" y="119" width="54.4" height="15.0" fill="rgb(104.536764709001,144.139161220852,144.139161220852)" rx="2" ry="2" />
<text  x="15.54" y="129.5" >Parlo..</text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,579 us, 0.01%)</title><rect x="175.9" y="87" width="0.2" height="15.0" fill="rgb(155.837223631444,141.418714507734,141.418714507734)" rx="2" ry="2" />
<text  x="178.95" y="97.5" ></text>
</g>
<g >
<title>firedrake.parloops.par_loop (694,811 us, 2.85%)</title><rect x="868.7" y="151" width="33.6" height="15.0" fill="rgb(142.832578964441,154.067705657448,154.067705657448)" rx="2" ry="2" />
<text  x="871.70" y="161.5" >fi..</text>
</g>
<g >
<title>PCSetUp (14,986,678 us, 61.42%)</title><rect x="177.5" y="119" width="724.8" height="15.0" fill="rgb(153.221159214353,121.362220643373,121.362220643373)" rx="2" ry="2" />
<text  x="180.52" y="129.5" >PCSetUp</text>
</g>
<g >
<title>CreateFunctionSpace (11,742 us, 0.05%)</title><rect x="67.4" y="71" width="0.6" height="15.0" fill="rgb(125.232295147713,125.232295147713,151.657863576977)" rx="2" ry="2" />
<text  x="70.40" y="81.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (1,174,387 us, 4.81%)</title><rect x="10.1" y="87" width="56.8" height="15.0" fill="rgb(145.039988179097,145.039988179097,155.491610615309)" rx="2" ry="2" />
<text  x="13.14" y="97.5" >fired..</text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,737 us, 0.02%)</title><rect x="177.1" y="119" width="0.3" height="15.0" fill="rgb(140.241308604813,153.39589482347,153.39589482347)" rx="2" ry="2" />
<text  x="180.12" y="129.5" ></text>
</g>
<g >
<title>firedrake (24,399,391 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(119.659176138221,148.059786406205,148.059786406205)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>CreateFunctionSpace (9,493 us, 0.04%)</title><rect x="66.9" y="103" width="0.5" height="15.0" fill="rgb(149.115023476828,159.446391527028,149.115023476828)" rx="2" ry="2" />
<text  x="69.94" y="113.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,238 us, 0.05%)</title><rect x="176.1" y="87" width="0.5" height="15.0" fill="rgb(129.614936500477,129.614936500477,152.506116742028)" rx="2" ry="2" />
<text  x="179.07" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (2,731 us, 0.01%)</title><rect x="867.3" y="215" width="0.2" height="15.0" fill="rgb(154.249764168521,129.248191958665,129.248191958665)" rx="2" ry="2" />
<text  x="870.34" y="225.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (4,818 us, 0.02%)</title><rect x="178.3" y="183" width="0.2" height="15.0" fill="rgb(137.341195873415,137.341195873415,154.001521781951)" rx="2" ry="2" />
<text  x="181.30" y="193.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (20,935,567 us, 85.80%)</title><rect x="177.5" y="87" width="1012.5" height="15.0" fill="rgb(149.034566993964,135.026077922032,149.034566993964)" rx="2" ry="2" />
<text  x="180.52" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (9,396 us, 0.04%)</title><rect x="175.5" y="135" width="0.4" height="15.0" fill="rgb(137.413856807606,137.413856807606,154.015585188569)" rx="2" ry="2" />
<text  x="178.50" y="145.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (2,657,666 us, 10.89%)</title><rect x="903.3" y="167" width="128.6" height="15.0" fill="rgb(112.104256845654,146.101103626651,146.101103626651)" rx="2" ry="2" />
<text  x="906.33" y="177.5" >pyop2.global_k..</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,369 us, 0.01%)</title><rect x="177.4" y="119" width="0.1" height="15.0" fill="rgb(138.461797680522,161.180637586892,138.461797680522)" rx="2" ry="2" />
<text  x="180.35" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_par_loop_kernel (689,308 us, 2.83%)</title><rect x="869.0" y="183" width="33.3" height="15.0" fill="rgb(152.748945035479,117.74191193867,117.74191193867)" rx="2" ry="2" />
<text  x="871.96" y="193.5" >Pa..</text>
</g>
<g >
<title>CreateFunctionSpace (9,396 us, 0.04%)</title><rect x="175.5" y="87" width="0.4" height="15.0" fill="rgb(141.049860574025,160.759325022833,141.049860574025)" rx="2" ry="2" />
<text  x="178.50" y="97.5" ></text>
</g>
<g >
<title>CreateMesh (3,596 us, 0.01%)</title><rect x="68.0" y="71" width="0.1" height="15.0" fill="rgb(147.030325132385,155.156010219507,155.156010219507)" rx="2" ry="2" />
<text  x="70.97" y="81.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (979,004 us, 4.01%)</title><rect x="1142.7" y="135" width="47.3" height="15.0" fill="rgb(149.705251100649,149.705251100649,117.80237071853)" rx="2" ry="2" />
<text  x="1145.65" y="145.5" >fire..</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (4,632 us, 0.02%)</title><rect x="175.7" y="151" width="0.2" height="15.0" fill="rgb(149.497196070244,149.497196070244,116.79410403272)" rx="2" ry="2" />
<text  x="178.73" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (9,396 us, 0.04%)</title><rect x="175.5" y="103" width="0.4" height="15.0" fill="rgb(108.89804533052,145.269863604209,145.269863604209)" rx="2" ry="2" />
<text  x="178.50" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (9,396 us, 0.04%)</title><rect x="175.5" y="71" width="0.4" height="15.0" fill="rgb(141.094678498408,160.752029081655,141.094678498408)" rx="2" ry="2" />
<text  x="178.50" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,682 us, 0.02%)</title><rect x="1189.8" y="167" width="0.2" height="15.0" fill="rgb(152.433245913763,115.321552005513,115.321552005513)" rx="2" ry="2" />
<text  x="1192.82" y="177.5" ></text>
</g>
<g >
<title>SNESSolve (20,935,567 us, 85.80%)</title><rect x="177.5" y="103" width="1012.5" height="15.0" fill="rgb(128.818067870039,150.434313892232,150.434313892232)" rx="2" ry="2" />
<text  x="180.52" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (21,721 us, 0.09%)</title><rect x="176.1" y="71" width="1.0" height="15.0" fill="rgb(116.572312422635,147.259488405868,147.259488405868)" rx="2" ry="2" />
<text  x="179.07" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (11,742 us, 0.05%)</title><rect x="67.4" y="119" width="0.6" height="15.0" fill="rgb(139.332547786792,161.038887569592,139.332547786792)" rx="2" ry="2" />
<text  x="70.40" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (9,493 us, 0.04%)</title><rect x="66.9" y="135" width="0.5" height="15.0" fill="rgb(156.510156965844,146.577870071468,146.577870071468)" rx="2" ry="2" />
<text  x="69.94" y="145.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (6,480 us, 0.03%)</title><rect x="866.6" y="151" width="0.4" height="15.0" fill="rgb(155.61756297599,139.734649482594,139.734649482594)" rx="2" ry="2" />
<text  x="869.64" y="161.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,124,761 us, 4.61%)</title><rect x="12.5" y="103" width="54.4" height="15.0" fill="rgb(153.740944608822,125.347242000965,125.347242000965)" rx="2" ry="2" />
<text  x="15.54" y="113.5" >ParLo..</text>
</g>
<g >
<title>CreateFunctionSpace (5,322 us, 0.02%)</title><rect x="867.2" y="199" width="0.3" height="15.0" fill="rgb(141.199033858642,114.947524262769,141.199033858642)" rx="2" ry="2" />
<text  x="870.21" y="209.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (8,154 us, 0.03%)</title><rect x="178.1" y="151" width="0.4" height="15.0" fill="rgb(155.912910972468,141.998984122252,141.998984122252)" rx="2" ry="2" />
<text  x="181.14" y="161.5" ></text>
</g>
<g >
<title>SNESFunctionEval (5,948,889 us, 24.38%)</title><rect x="902.3" y="119" width="287.7" height="15.0" fill="rgb(118.180479107382,147.676420509321,147.676420509321)" rx="2" ry="2" />
<text  x="905.30" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>CreateExtMesh (1,186,842 us, 4.86%)</title><rect x="10.0" y="71" width="57.4" height="15.0" fill="rgb(141.479902161166,141.479902161166,154.802561708613)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >Creat..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (11,742 us, 0.05%)</title><rect x="67.4" y="87" width="0.6" height="15.0" fill="rgb(153.712292614118,153.712292614118,137.221110360727)" rx="2" ry="2" />
<text  x="70.40" y="97.5" ></text>
</g>
<g >
<title>firedrake.__init__ (2,219,842 us, 9.10%)</title><rect x="68.1" y="71" width="107.4" height="15.0" fill="rgb(152.964290661659,119.392895072721,119.392895072721)" rx="2" ry="2" />
<text  x="71.14" y="81.5" >firedrake._..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (2,279,800 us, 9.34%)</title><rect x="1032.4" y="167" width="110.3" height="15.0" fill="rgb(143.237774947167,154.172756467784,154.172756467784)" rx="2" ry="2" />
<text  x="1035.40" y="177.5" >pyop2.global..</text>
</g>
<g >
<title>Parloop_Cells_wrap_form1_cell_integral_otherwise (2,291,026 us, 9.39%)</title><rect x="1031.9" y="151" width="110.8" height="15.0" fill="rgb(133.023435202226,151.524594311688,151.524594311688)" rx="2" ry="2" />
<text  x="1034.86" y="161.5" >Parloop_Cell..</text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (10,640 us, 0.04%)</title><rect x="867.0" y="151" width="0.5" height="15.0" fill="rgb(156.080333851289,143.282559526547,143.282559526547)" rx="2" ry="2" />
<text  x="869.96" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (9,493 us, 0.04%)</title><rect x="66.9" y="119" width="0.5" height="15.0" fill="rgb(154.420423316058,130.556578756443,130.556578756443)" rx="2" ry="2" />
<text  x="69.94" y="129.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (10,420,376 us, 42.71%)</title><rect x="255.0" y="199" width="503.9" height="15.0" fill="rgb(132.665447585369,162.124229462847,132.665447585369)" rx="2" ry="2" />
<text  x="257.98" y="209.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>ParLoopExecute (4,966,602 us, 20.36%)</title><rect x="902.5" y="135" width="240.2" height="15.0" fill="rgb(125.89192876032,163.226895318087,125.89192876032)" rx="2" ry="2" />
<text  x="905.46" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>HybridInit (14,986,678 us, 61.42%)</title><rect x="177.5" y="135" width="724.8" height="15.0" fill="rgb(153.661378675367,153.661378675367,136.974373580624)" rx="2" ry="2" />
<text  x="180.52" y="145.5" >HybridInit</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (689,308 us, 2.83%)</title><rect x="869.0" y="199" width="33.3" height="15.0" fill="rgb(113.78814341578,146.537666811499,146.537666811499)" rx="2" ry="2" />
<text  x="871.96" y="209.5" >py..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (4,818 us, 0.02%)</title><rect x="178.3" y="199" width="0.2" height="15.0" fill="rgb(126.076148224056,126.076148224056,151.82118997885)" rx="2" ry="2" />
<text  x="181.30" y="209.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (4,818 us, 0.02%)</title><rect x="178.3" y="167" width="0.2" height="15.0" fill="rgb(147.054493221769,159.781826684828,147.054493221769)" rx="2" ry="2" />
<text  x="181.30" y="177.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,579 us, 0.01%)</title><rect x="175.9" y="71" width="0.2" height="15.0" fill="rgb(129.584555321418,162.625770063955,129.584555321418)" rx="2" ry="2" />
<text  x="178.95" y="81.5" ></text>
</g>
<g >
<title>HybridOperatorAssembly (14,228,260 us, 58.31%)</title><rect x="178.5" y="151" width="688.1" height="15.0" fill="rgb(135.339082017885,161.688986648251,135.339082017885)" rx="2" ry="2" />
<text  x="181.54" y="161.5" >HybridOperatorAssembly</text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (2,675,576 us, 10.97%)</title><rect x="902.5" y="151" width="129.4" height="15.0" fill="rgb(138.506217382741,161.173406472577,138.506217382741)" rx="2" ry="2" />
<text  x="905.46" y="161.5" >Parloop_Cells_..</text>
</g>
<g >
<title>CreateSparsity (6,480 us, 0.03%)</title><rect x="866.6" y="167" width="0.4" height="15.0" fill="rgb(104.991332011298,144.257012002929,144.257012002929)" rx="2" ry="2" />
<text  x="869.64" y="177.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (10,640 us, 0.04%)</title><rect x="867.0" y="167" width="0.5" height="15.0" fill="rgb(154.899693756106,134.230985463478,134.230985463478)" rx="2" ry="2" />
<text  x="869.96" y="177.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,124,761 us, 4.61%)</title><rect x="12.5" y="135" width="54.4" height="15.0" fill="rgb(147.072360211971,147.072360211971,155.884972944252)" rx="2" ry="2" />
<text  x="15.54" y="145.5" >pyop2..</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (8,103 us, 0.03%)</title><rect x="867.1" y="183" width="0.4" height="15.0" fill="rgb(149.941595201441,149.941595201441,118.947730591597)" rx="2" ry="2" />
<text  x="870.08" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (11,742 us, 0.05%)</title><rect x="67.4" y="103" width="0.6" height="15.0" fill="rgb(149.621969682806,149.621969682806,117.398776155138)" rx="2" ry="2" />
<text  x="70.40" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,483 us, 0.04%)</title><rect x="176.6" y="87" width="0.5" height="15.0" fill="rgb(153.487429197543,123.403623847832,123.403623847832)" rx="2" ry="2" />
<text  x="179.62" y="97.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (8,106 us, 0.03%)</title><rect x="177.1" y="103" width="0.4" height="15.0" fill="rgb(149.949424359147,149.949424359147,118.985671894327)" rx="2" ry="2" />
<text  x="180.12" y="113.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,106 us, 0.03%)</title><rect x="177.1" y="71" width="0.4" height="15.0" fill="rgb(153.601503689117,153.601503689117,136.68421018572)" rx="2" ry="2" />
<text  x="180.12" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (3,336 us, 0.01%)</title><rect x="178.1" y="167" width="0.2" height="15.0" fill="rgb(125.274392548655,125.274392548655,151.66601146103)" rx="2" ry="2" />
<text  x="181.14" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (9,493 us, 0.04%)</title><rect x="66.9" y="87" width="0.5" height="15.0" fill="rgb(109.557150210317,109.557150210317,148.623964556836)" rx="2" ry="2" />
<text  x="69.94" y="97.5" ></text>
</g>
<g >
<title>all (24,399,391 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(154.985147085421,134.886127654897,134.886127654897)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (9,493 us, 0.04%)</title><rect x="66.9" y="151" width="0.5" height="15.0" fill="rgb(123.60755265806,123.60755265806,151.343397288657)" rx="2" ry="2" />
<text  x="69.94" y="161.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,106 us, 0.03%)</title><rect x="177.1" y="87" width="0.4" height="15.0" fill="rgb(154.226762186922,129.071843433066,129.071843433066)" rx="2" ry="2" />
<text  x="180.12" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (10,420,376 us, 42.71%)</title><rect x="255.0" y="167" width="503.9" height="15.0" fill="rgb(147.477728994711,159.71292783807,147.477728994711)" rx="2" ry="2" />
<text  x="257.98" y="177.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (10,483 us, 0.04%)</title><rect x="176.6" y="103" width="0.5" height="15.0" fill="rgb(144.292709619812,144.292709619812,155.346976055447)" rx="2" ry="2" />
<text  x="179.62" y="113.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (2,227,156 us, 9.13%)</title><rect x="758.9" y="167" width="107.7" height="15.0" fill="rgb(152.150113039245,113.150866634215,113.150866634215)" rx="2" ry="2" />
<text  x="761.93" y="177.5" >firedrake.ts..</text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,404 us, 0.03%)</title><rect x="1189.7" y="151" width="0.3" height="15.0" fill="rgb(110.11415063992,145.585150165905,145.585150165905)" rx="2" ry="2" />
<text  x="1192.69" y="161.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_slate_wrapper (10,420,376 us, 42.71%)</title><rect x="255.0" y="183" width="503.9" height="15.0" fill="rgb(129.483204899099,129.483204899099,152.480620303051)" rx="2" ry="2" />
<text  x="257.98" y="193.5" >Parloop_Cells_wrap_slate_wrapper</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (9,396 us, 0.04%)</title><rect x="175.5" y="119" width="0.4" height="15.0" fill="rgb(154.98324559342,134.871549549552,134.871549549552)" rx="2" ry="2" />
<text  x="178.50" y="129.5" ></text>
</g>
<g >
<title>ParLoopExecute (689,308 us, 2.83%)</title><rect x="869.0" y="167" width="33.3" height="15.0" fill="rgb(137.723373743933,161.300846134709,137.723373743933)" rx="2" ry="2" />
<text  x="871.96" y="177.5" >Pa..</text>
</g>
</g>
</svg>
