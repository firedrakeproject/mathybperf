<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="299" onload="init(evt)" viewBox="0 0 1200 299" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="299.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="281" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="281" > </text>
<g id="frames">
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,625 us, 0.04%)</title><rect x="18.9" y="87" width="0.5" height="15.0" fill="rgb(123.889870500789,149.156633092797,149.156633092797)" rx="2" ry="2" />
<text  x="21.91" y="97.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (11,616,105 us, 78.23%)</title><rect x="266.9" y="87" width="923.1" height="15.0" fill="rgb(154.095841914792,154.095841914792,139.079849279375)" rx="2" ry="2" />
<text  x="269.88" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (2,114 us, 0.01%)</title><rect x="267.8" y="167" width="0.1" height="15.0" fill="rgb(149.610704436014,149.610704436014,117.344183036068)" rx="2" ry="2" />
<text  x="270.78" y="177.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (2,114 us, 0.01%)</title><rect x="267.8" y="183" width="0.1" height="15.0" fill="rgb(108.872749002442,108.872749002442,148.491499806924)" rx="2" ry="2" />
<text  x="270.78" y="193.5" ></text>
</g>
<g >
<title>ParLoopExecute (11,268,416 us, 75.89%)</title><rect x="284.1" y="167" width="895.5" height="15.0" fill="rgb(112.881863434332,146.302705334827,146.302705334827)" rx="2" ry="2" />
<text  x="287.12" y="177.5" >ParLoopExecute</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (8,840 us, 0.06%)</title><rect x="266.2" y="71" width="0.7" height="15.0" fill="rgb(134.950168959963,98.9348079599064,134.950168959963)" rx="2" ry="2" />
<text  x="269.18" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (1,728 us, 0.01%)</title><rect x="1186.1" y="167" width="0.1" height="15.0" fill="rgb(141.196460587923,114.940930256554,141.196460587923)" rx="2" ry="2" />
<text  x="1189.06" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (7,059 us, 0.05%)</title><rect x="263.7" y="103" width="0.6" height="15.0" fill="rgb(131.061259242956,131.061259242956,152.786050176056)" rx="2" ry="2" />
<text  x="266.71" y="113.5" ></text>
</g>
<g >
<title>HybridInit (11,545,352 us, 77.75%)</title><rect x="266.9" y="135" width="917.5" height="15.0" fill="rgb(117.216092158666,117.216092158666,150.106340417806)" rx="2" ry="2" />
<text  x="269.88" y="145.5" >HybridInit</text>
</g>
<g >
<title>Parloop_Cells_wrap_slate_wrapper (11,268,416 us, 75.89%)</title><rect x="284.1" y="183" width="895.5" height="15.0" fill="rgb(125.056043726068,163.362969625989,125.056043726068)" rx="2" ry="2" />
<text  x="287.12" y="193.5" >Parloop_Cells_wrap_slate_wrapper</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (3,011 us, 0.02%)</title><rect x="264.0" y="151" width="0.3" height="15.0" fill="rgb(140.245335610033,153.396938861861,153.396938861861)" rx="2" ry="2" />
<text  x="267.04" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (1,745 us, 0.01%)</title><rect x="1180.8" y="247" width="0.1" height="15.0" fill="rgb(142.660210352987,154.023017498923,154.023017498923)" rx="2" ry="2" />
<text  x="1183.80" y="257.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (9,630 us, 0.06%)</title><rect x="265.4" y="87" width="0.8" height="15.0" fill="rgb(143.475700245214,143.475700245214,155.188845208751)" rx="2" ry="2" />
<text  x="268.41" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (7,059 us, 0.05%)</title><rect x="263.7" y="71" width="0.6" height="15.0" fill="rgb(130.809690513457,130.809690513457,152.737359454217)" rx="2" ry="2" />
<text  x="266.71" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (5,720 us, 0.04%)</title><rect x="1189.5" y="151" width="0.5" height="15.0" fill="rgb(155.017514673788,135.134279165709,135.134279165709)" rx="2" ry="2" />
<text  x="1192.55" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,059 us, 0.05%)</title><rect x="263.7" y="119" width="0.6" height="15.0" fill="rgb(133.946913367025,133.946913367025,153.344563877489)" rx="2" ry="2" />
<text  x="266.71" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (68,519 us, 0.46%)</title><rect x="13.5" y="119" width="5.4" height="15.0" fill="rgb(145.457687062204,154.748289238349,154.748289238349)" rx="2" ry="2" />
<text  x="16.46" y="129.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (19,503 us, 0.13%)</title><rect x="1184.6" y="151" width="1.6" height="15.0" fill="rgb(115.259833374976,146.919216060179,146.919216060179)" rx="2" ry="2" />
<text  x="1187.65" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,630 us, 0.06%)</title><rect x="265.4" y="103" width="0.8" height="15.0" fill="rgb(136.303666334516,152.375024605245,152.375024605245)" rx="2" ry="2" />
<text  x="268.41" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (68,519 us, 0.46%)</title><rect x="13.5" y="103" width="5.4" height="15.0" fill="rgb(117.335463519541,117.335463519541,150.129444552169)" rx="2" ry="2" />
<text  x="16.46" y="113.5" ></text>
</g>
<g >
<title>SNESFunctionEval (70,753 us, 0.48%)</title><rect x="1184.4" y="119" width="5.6" height="15.0" fill="rgb(118.408606200377,147.735564570468,147.735564570468)" rx="2" ry="2" />
<text  x="1187.38" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (4,006 us, 0.03%)</title><rect x="267.9" y="167" width="0.4" height="15.0" fill="rgb(113.681970308498,146.510140450351,146.510140450351)" rx="2" ry="2" />
<text  x="270.94" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,625 us, 0.04%)</title><rect x="18.9" y="119" width="0.5" height="15.0" fill="rgb(139.898504793885,160.946755033554,139.898504793885)" rx="2" ry="2" />
<text  x="21.91" y="129.5" ></text>
</g>
<g >
<title>SNESSolve (11,616,105 us, 78.23%)</title><rect x="266.9" y="103" width="923.1" height="15.0" fill="rgb(111.156931257066,111.156931257066,148.933599598142)" rx="2" ry="2" />
<text  x="269.88" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,314 us, 0.02%)</title><rect x="1189.7" y="167" width="0.3" height="15.0" fill="rgb(154.312345745415,154.312345745415,140.129060150858)" rx="2" ry="2" />
<text  x="1192.74" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (13,269 us, 0.09%)</title><rect x="19.4" y="103" width="1.1" height="15.0" fill="rgb(141.693030813387,153.772267247915,153.772267247915)" rx="2" ry="2" />
<text  x="22.43" y="113.5" ></text>
</g>
<g >
<title>Log_Event_form0_cell_integral_otherwise (8,287 us, 0.06%)</title><rect x="1185.4" y="167" width="0.7" height="15.0" fill="rgb(147.57422474876,147.57422474876,155.982108015889)" rx="2" ry="2" />
<text  x="1188.40" y="177.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,790 us, 0.02%)</title><rect x="264.3" y="87" width="0.2" height="15.0" fill="rgb(106.255538449686,144.584769227696,144.584769227696)" rx="2" ry="2" />
<text  x="267.27" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (4,006 us, 0.03%)</title><rect x="267.9" y="183" width="0.4" height="15.0" fill="rgb(142.637103529252,160.500936634773,142.637103529252)" rx="2" ry="2" />
<text  x="270.94" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (13,269 us, 0.09%)</title><rect x="19.4" y="119" width="1.1" height="15.0" fill="rgb(124.223715958635,163.498464843943,124.223715958635)" rx="2" ry="2" />
<text  x="22.43" y="129.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (11,268,416 us, 75.89%)</title><rect x="284.1" y="199" width="895.5" height="15.0" fill="rgb(136.830135130095,161.446257071845,136.830135130095)" rx="2" ry="2" />
<text  x="287.12" y="209.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>CreateFunctionSpace (7,059 us, 0.05%)</title><rect x="263.7" y="87" width="0.6" height="15.0" fill="rgb(109.86131760948,109.86131760948,148.682835666351)" rx="2" ry="2" />
<text  x="266.71" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (31,792 us, 0.21%)</title><rect x="1184.6" y="135" width="2.6" height="15.0" fill="rgb(131.847873928679,131.847873928679,152.938298179744)" rx="2" ry="2" />
<text  x="1187.65" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (8,821 us, 0.06%)</title><rect x="1180.2" y="167" width="0.7" height="15.0" fill="rgb(152.908908566678,118.968299011196,118.968299011196)" rx="2" ry="2" />
<text  x="1183.24" y="177.5" ></text>
</g>
<g >
<title>CreateSparsity (6,088 us, 0.04%)</title><rect x="1179.6" y="167" width="0.5" height="15.0" fill="rgb(117.955232318625,147.618023193717,147.618023193717)" rx="2" ry="2" />
<text  x="1182.61" y="177.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form1_cell_integral_otherwise (12,289 us, 0.08%)</title><rect x="1186.2" y="151" width="1.0" height="15.0" fill="rgb(112.215607852378,112.215607852378,149.138504745621)" rx="2" ry="2" />
<text  x="1189.20" y="161.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,945 us, 0.05%)</title><rect x="1179.6" y="151" width="0.6" height="15.0" fill="rgb(137.171007157544,152.599890744549,152.599890744549)" rx="2" ry="2" />
<text  x="1182.61" y="161.5" ></text>
</g>
<g >
<title>firedrake (14,848,580 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(135.377513310212,152.134910858203,152.134910858203)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>all (14,848,580 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(149.527207539465,149.527207539465,116.939544229716)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (13,269 us, 0.09%)</title><rect x="19.4" y="71" width="1.1" height="15.0" fill="rgb(155.450567970521,138.45435444066,138.45435444066)" rx="2" ry="2" />
<text  x="22.43" y="81.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (6,351 us, 0.04%)</title><rect x="1180.4" y="183" width="0.5" height="15.0" fill="rgb(147.058586034717,147.058586034717,155.882306974461)" rx="2" ry="2" />
<text  x="1183.44" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,059 us, 0.05%)</title><rect x="263.7" y="135" width="0.6" height="15.0" fill="rgb(155.050256660592,135.385301064535,135.385301064535)" rx="2" ry="2" />
<text  x="266.71" y="145.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (109,505 us, 0.74%)</title><rect x="10.2" y="87" width="8.7" height="15.0" fill="rgb(149.627635017004,149.627635017004,117.426231236251)" rx="2" ry="2" />
<text  x="13.20" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,625 us, 0.04%)</title><rect x="18.9" y="151" width="0.5" height="15.0" fill="rgb(156.226729767126,144.404928214631,144.404928214631)" rx="2" ry="2" />
<text  x="21.91" y="161.5" ></text>
</g>
<g >
<title>CreateExtMesh (118,682 us, 0.80%)</title><rect x="10.0" y="71" width="9.4" height="15.0" fill="rgb(154.098644016318,128.089604125101,128.089604125101)" rx="2" ry="2" />
<text  x="13.00" y="81.5" ></text>
</g>
<g >
<title>HybridOperatorAssembly (11,467,995 us, 77.23%)</title><rect x="268.3" y="151" width="911.3" height="15.0" fill="rgb(145.592855782791,126.206692943402,145.592855782791)" rx="2" ry="2" />
<text  x="271.26" y="161.5" >HybridOperatorAssembly</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (68,519 us, 0.46%)</title><rect x="13.5" y="135" width="5.4" height="15.0" fill="rgb(154.511516750518,131.254961753969,131.254961753969)" rx="2" ry="2" />
<text  x="16.46" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (8,821 us, 0.06%)</title><rect x="1180.2" y="151" width="0.7" height="15.0" fill="rgb(143.91344604947,160.293159945435,143.91344604947)" rx="2" ry="2" />
<text  x="1183.24" y="161.5" ></text>
</g>
<g >
<title>perfsolve (11,616,105 us, 78.23%)</title><rect x="266.9" y="71" width="923.1" height="15.0" fill="rgb(154.726839192485,154.726839192485,142.13775916358)" rx="2" ry="2" />
<text  x="269.88" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.__init__ (3,058,122 us, 20.60%)</title><rect x="20.7" y="71" width="243.0" height="15.0" fill="rgb(133.852510073102,161.930986732286,133.852510073102)" rx="2" ry="2" />
<text  x="23.69" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.parloops.par_loop (5,838 us, 0.04%)</title><rect x="1183.9" y="151" width="0.5" height="15.0" fill="rgb(136.41526663531,136.41526663531,153.82230967135)" rx="2" ry="2" />
<text  x="1186.91" y="161.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,543 us, 0.08%)</title><rect x="264.5" y="87" width="0.9" height="15.0" fill="rgb(108.810310545358,108.810310545358,148.479414944263)" rx="2" ry="2" />
<text  x="267.50" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (2,840 us, 0.02%)</title><rect x="266.7" y="119" width="0.2" height="15.0" fill="rgb(153.010052932261,119.743739147332,119.743739147332)" rx="2" ry="2" />
<text  x="269.66" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (4,252 us, 0.03%)</title><rect x="1180.6" y="199" width="0.3" height="15.0" fill="rgb(117.202026965936,147.422747731909,147.422747731909)" rx="2" ry="2" />
<text  x="1183.61" y="209.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (7,170 us, 0.05%)</title><rect x="266.3" y="103" width="0.6" height="15.0" fill="rgb(153.091105811293,120.365144553249,120.365144553249)" rx="2" ry="2" />
<text  x="269.31" y="113.5" ></text>
</g>
<g >
<title>MatZeroInitial (1,857 us, 0.01%)</title><rect x="1180.1" y="167" width="0.1" height="15.0" fill="rgb(146.731263203042,146.731263203042,155.818954168331)" rx="2" ry="2" />
<text  x="1183.09" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (4,006 us, 0.03%)</title><rect x="267.9" y="199" width="0.4" height="15.0" fill="rgb(155.468148617236,138.589139398812,138.589139398812)" rx="2" ry="2" />
<text  x="270.94" y="209.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (35,590 us, 0.24%)</title><rect x="1187.2" y="135" width="2.8" height="15.0" fill="rgb(149.659696098595,159.357723890926,149.659696098595)" rx="2" ry="2" />
<text  x="1190.17" y="145.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,120 us, 0.04%)</title><rect x="267.8" y="151" width="0.5" height="15.0" fill="rgb(123.542262638014,149.066512535781,149.066512535781)" rx="2" ry="2" />
<text  x="270.78" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (1,745 us, 0.01%)</title><rect x="1180.8" y="231" width="0.1" height="15.0" fill="rgb(152.318894353337,152.318894353337,130.468488020016)" rx="2" ry="2" />
<text  x="1183.80" y="241.5" ></text>
</g>
<g >
<title>PCSetUp (11,545,352 us, 77.75%)</title><rect x="266.9" y="119" width="917.5" height="15.0" fill="rgb(149.024439672916,149.024439672916,114.503053799515)" rx="2" ry="2" />
<text  x="269.88" y="129.5" >PCSetUp</text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,790 us, 0.02%)</title><rect x="264.3" y="71" width="0.2" height="15.0" fill="rgb(152.426956660634,152.426956660634,130.992174586149)" rx="2" ry="2" />
<text  x="267.27" y="81.5" ></text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (37,378 us, 0.25%)</title><rect x="1180.9" y="151" width="3.0" height="15.0" fill="rgb(154.021636732287,127.499214947535,127.499214947535)" rx="2" ry="2" />
<text  x="1183.94" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (21,173 us, 0.14%)</title><rect x="264.5" y="71" width="1.7" height="15.0" fill="rgb(134.440921944175,161.835198753274,134.440921944175)" rx="2" ry="2" />
<text  x="267.50" y="81.5" ></text>
</g>
<g >
<title>CreateMesh (2,540 us, 0.02%)</title><rect x="20.5" y="71" width="0.2" height="15.0" fill="rgb(153.838570810295,126.095709545597,126.095709545597)" rx="2" ry="2" />
<text  x="23.49" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (4,330 us, 0.03%)</title><rect x="266.3" y="119" width="0.4" height="15.0" fill="rgb(126.833706320302,163.073582692044,126.833706320302)" rx="2" ry="2" />
<text  x="269.31" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,625 us, 0.04%)</title><rect x="18.9" y="103" width="0.5" height="15.0" fill="rgb(153.033659616421,153.033659616421,133.93235044881)" rx="2" ry="2" />
<text  x="21.91" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (1,745 us, 0.01%)</title><rect x="1180.8" y="215" width="0.1" height="15.0" fill="rgb(126.311371150255,163.158613998796,126.311371150255)" rx="2" ry="2" />
<text  x="1183.80" y="225.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (7,170 us, 0.05%)</title><rect x="266.3" y="87" width="0.6" height="15.0" fill="rgb(153.121568616778,120.59869272863,120.59869272863)" rx="2" ry="2" />
<text  x="269.31" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,625 us, 0.04%)</title><rect x="18.9" y="135" width="0.5" height="15.0" fill="rgb(153.308266948228,122.030046603079,122.030046603079)" rx="2" ry="2" />
<text  x="21.91" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (13,269 us, 0.09%)</title><rect x="19.4" y="87" width="1.1" height="15.0" fill="rgb(130.032599558315,130.032599558315,152.586954753222)" rx="2" ry="2" />
<text  x="22.43" y="97.5" ></text>
</g>
</g>
</svg>
