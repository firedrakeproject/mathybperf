<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="267" onload="init(evt)" viewBox="0 0 1200 267" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="267.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="249" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="249" > </text>
<g id="frames">
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (16,088 us, 0.12%)</title><rect x="560.7" y="135" width="1.4" height="15.0" fill="rgb(146.742836734707,159.832561461792,146.742836734707)" rx="2" ry="2" />
<text  x="563.68" y="145.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (4,807 us, 0.04%)</title><rect x="562.1" y="87" width="0.5" height="15.0" fill="rgb(106.501667670109,144.648580507065,144.648580507065)" rx="2" ry="2" />
<text  x="565.13" y="97.5" ></text>
</g>
<g >
<title>firedrake (13,061,586 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(151.501023231678,141.346372031174,151.501023231678)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>firedrake.ufl_expr.action (31,478 us, 0.24%)</title><rect x="562.6" y="87" width="2.8" height="15.0" fill="rgb(152.17695644739,113.356666096656,113.356666096656)" rx="2" ry="2" />
<text  x="565.57" y="97.5" ></text>
</g>
<g >
<title>PetscBarrier (2,706 us, 0.02%)</title><rect x="39.5" y="71" width="0.2" height="15.0" fill="rgb(151.550751030965,151.550751030965,126.745947303907)" rx="2" ry="2" />
<text  x="42.46" y="81.5" ></text>
</g>
<g >
<title>perfsolve (6,849,076 us, 52.44%)</title><rect x="571.2" y="71" width="618.8" height="15.0" fill="rgb(147.625033455959,147.625033455959,107.72131597888)" rx="2" ry="2" />
<text  x="574.25" y="81.5" >perfsolve</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (14,994 us, 0.11%)</title><rect x="33.7" y="135" width="1.3" height="15.0" fill="rgb(154.873909503423,154.873909503423,142.850484516587)" rx="2" ry="2" />
<text  x="36.68" y="145.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (28,917 us, 0.22%)</title><rect x="568.6" y="71" width="2.6" height="15.0" fill="rgb(154.930604373271,134.467966861747,134.467966861747)" rx="2" ry="2" />
<text  x="571.63" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (2,250 us, 0.02%)</title><rect x="561.9" y="167" width="0.2" height="15.0" fill="rgb(135.068862120162,99.238959182915,135.068862120162)" rx="2" ry="2" />
<text  x="564.93" y="177.5" ></text>
</g>
<g >
<title>CreateExtMesh (281,389 us, 2.15%)</title><rect x="10.0" y="71" width="25.4" height="15.0" fill="rgb(148.142722712811,148.142722712811,110.230117762083)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >C..</text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (2,129 us, 0.02%)</title><rect x="35.0" y="87" width="0.2" height="15.0" fill="rgb(146.222240339631,159.917309712153,146.222240339631)" rx="2" ry="2" />
<text  x="38.03" y="97.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (159,789 us, 1.22%)</title><rect x="19.2" y="135" width="14.5" height="15.0" fill="rgb(123.709430930864,163.582185662418,123.709430930864)" rx="2" ry="2" />
<text  x="22.24" y="145.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (99,078 us, 0.76%)</title><rect x="1181.0" y="135" width="9.0" height="15.0" fill="rgb(106.441273856165,144.632922851598,144.632922851598)" rx="2" ry="2" />
<text  x="1184.05" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (1,443 us, 0.01%)</title><rect x="560.6" y="87" width="0.1" height="15.0" fill="rgb(133.918100237742,161.920309263623,133.918100237742)" rx="2" ry="2" />
<text  x="563.55" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (14,994 us, 0.11%)</title><rect x="33.7" y="151" width="1.3" height="15.0" fill="rgb(132.447497632335,151.375277163939,151.375277163939)" rx="2" ry="2" />
<text  x="36.68" y="161.5" ></text>
</g>
<g >
<title>firedrake.__init__ (5,763,214 us, 44.12%)</title><rect x="39.7" y="71" width="520.7" height="15.0" fill="rgb(153.349761506974,122.348171553465,122.348171553465)" rx="2" ry="2" />
<text  x="42.70" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>firedrake.function.Function.split (2,493 us, 0.02%)</title><rect x="568.4" y="119" width="0.2" height="15.0" fill="rgb(108.823705477833,145.250590309068,145.250590309068)" rx="2" ry="2" />
<text  x="571.41" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (16,088 us, 0.12%)</title><rect x="560.7" y="103" width="1.4" height="15.0" fill="rgb(125.51598888749,149.578219341201,149.578219341201)" rx="2" ry="2" />
<text  x="563.68" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (161,590 us, 1.24%)</title><rect x="19.1" y="119" width="14.6" height="15.0" fill="rgb(137.630934351021,152.719131128042,152.719131128042)" rx="2" ry="2" />
<text  x="22.08" y="129.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (33,166 us, 0.25%)</title><rect x="565.4" y="103" width="3.0" height="15.0" fill="rgb(123.461130588722,149.04547830078,149.04547830078)" rx="2" ry="2" />
<text  x="568.41" y="113.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (6,749,998 us, 51.68%)</title><rect x="571.2" y="167" width="609.8" height="15.0" fill="rgb(131.99579343948,131.99579343948,152.96692776248)" rx="2" ry="2" />
<text  x="574.25" y="177.5" >pyop2.global_kernel.GlobalKernel.compile</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (37,109 us, 0.28%)</title><rect x="35.7" y="119" width="3.3" height="15.0" fill="rgb(138.64186852056,108.394788083935,138.64186852056)" rx="2" ry="2" />
<text  x="38.68" y="129.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (37,109 us, 0.28%)</title><rect x="35.7" y="103" width="3.3" height="15.0" fill="rgb(150.548319056871,159.213064339579,150.548319056871)" rx="2" ry="2" />
<text  x="38.68" y="113.5" ></text>
</g>
<g >
<title>CreateMesh (1,709 us, 0.01%)</title><rect x="562.4" y="103" width="0.2" height="15.0" fill="rgb(154.446343538331,130.75530046054,130.75530046054)" rx="2" ry="2" />
<text  x="565.41" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (14,994 us, 0.11%)</title><rect x="33.7" y="87" width="1.3" height="15.0" fill="rgb(152.856186792106,152.856186792106,133.072289838668)" rx="2" ry="2" />
<text  x="36.68" y="97.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (6,749,998 us, 51.68%)</title><rect x="571.2" y="151" width="609.8" height="15.0" fill="rgb(126.374008995196,163.148417140317,126.374008995196)" rx="2" ry="2" />
<text  x="574.25" y="161.5" >Parloop_Cells_wrap_form0_cell_integral_otherwise</text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (67,137 us, 0.51%)</title><rect x="562.6" y="71" width="6.0" height="15.0" fill="rgb(115.095627256483,115.095627256483,149.695927856094)" rx="2" ry="2" />
<text  x="565.57" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (7,266 us, 0.06%)</title><rect x="561.5" y="151" width="0.6" height="15.0" fill="rgb(114.184169548339,114.184169548339,149.519516686775)" rx="2" ry="2" />
<text  x="564.48" y="161.5" ></text>
</g>
<g >
<title>ParLoopExecute (161,590 us, 1.24%)</title><rect x="19.1" y="103" width="14.6" height="15.0" fill="rgb(105.057541163804,144.274177338764,144.274177338764)" rx="2" ry="2" />
<text  x="22.08" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (40,008 us, 0.31%)</title><rect x="35.4" y="71" width="3.6" height="15.0" fill="rgb(150.398760786498,150.398760786498,121.163225349953)" rx="2" ry="2" />
<text  x="38.42" y="81.5" ></text>
</g>
<g >
<title>SNESFunctionEval (6,849,076 us, 52.44%)</title><rect x="571.2" y="119" width="618.8" height="15.0" fill="rgb(126.644792755536,126.644792755536,151.931250210749)" rx="2" ry="2" />
<text  x="574.25" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (35,659 us, 0.27%)</title><rect x="565.4" y="87" width="3.2" height="15.0" fill="rgb(113.858737562666,146.555968997728,146.555968997728)" rx="2" ry="2" />
<text  x="568.41" y="97.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (9,785 us, 0.07%)</title><rect x="1189.1" y="167" width="0.9" height="15.0" fill="rgb(152.173779323109,152.173779323109,129.765238258146)" rx="2" ry="2" />
<text  x="1192.12" y="177.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (3,196 us, 0.02%)</title><rect x="1189.7" y="183" width="0.3" height="15.0" fill="rgb(104.003974616625,144.001030456162,144.001030456162)" rx="2" ry="2" />
<text  x="1192.71" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (3,553 us, 0.03%)</title><rect x="560.4" y="71" width="0.3" height="15.0" fill="rgb(129.672069501273,162.61152356956,129.672069501273)" rx="2" ry="2" />
<text  x="563.36" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (16,088 us, 0.12%)</title><rect x="560.7" y="71" width="1.4" height="15.0" fill="rgb(129.761233995439,150.678838443262,150.678838443262)" rx="2" ry="2" />
<text  x="563.68" y="81.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (2,199 us, 0.02%)</title><rect x="35.2" y="87" width="0.2" height="15.0" fill="rgb(146.908073534542,159.805662447865,146.908073534542)" rx="2" ry="2" />
<text  x="38.22" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (14,994 us, 0.11%)</title><rect x="33.7" y="119" width="1.3" height="15.0" fill="rgb(130.113787258508,162.539616027685,130.113787258508)" rx="2" ry="2" />
<text  x="36.68" y="129.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (14,994 us, 0.11%)</title><rect x="33.7" y="103" width="1.3" height="15.0" fill="rgb(130.782932194652,150.943723161577,150.943723161577)" rx="2" ry="2" />
<text  x="36.68" y="113.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (4,807 us, 0.04%)</title><rect x="562.1" y="71" width="0.5" height="15.0" fill="rgb(152.534806237274,116.100181152433,116.100181152433)" rx="2" ry="2" />
<text  x="565.13" y="81.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (6,849,076 us, 52.44%)</title><rect x="571.2" y="87" width="618.8" height="15.0" fill="rgb(132.594200564721,162.135827815046,132.594200564721)" rx="2" ry="2" />
<text  x="574.25" y="97.5" >firedrake.variational_solver.NonlinearVariationalSolver.solve</text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (24,978 us, 0.19%)</title><rect x="569.0" y="87" width="2.2" height="15.0" fill="rgb(132.426778102977,162.163082634399,132.426778102977)" rx="2" ry="2" />
<text  x="571.99" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (1,443 us, 0.01%)</title><rect x="560.6" y="103" width="0.1" height="15.0" fill="rgb(132.158331374195,151.30030813405,151.30030813405)" rx="2" ry="2" />
<text  x="563.55" y="113.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (3,196 us, 0.02%)</title><rect x="1189.7" y="199" width="0.3" height="15.0" fill="rgb(118.117662177838,118.117662177838,150.280837840872)" rx="2" ry="2" />
<text  x="1192.71" y="209.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (16,088 us, 0.12%)</title><rect x="560.7" y="87" width="1.4" height="15.0" fill="rgb(154.051197651394,127.725848660689,127.725848660689)" rx="2" ry="2" />
<text  x="563.68" y="97.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (24,978 us, 0.19%)</title><rect x="569.0" y="103" width="2.2" height="15.0" fill="rgb(136.472118503221,161.504538848313,136.472118503221)" rx="2" ry="2" />
<text  x="571.99" y="113.5" ></text>
</g>
<g >
<title>ParLoopExecute (6,749,998 us, 51.68%)</title><rect x="571.2" y="135" width="609.8" height="15.0" fill="rgb(144.680876545908,160.168229399503,144.680876545908)" rx="2" ry="2" />
<text  x="574.25" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>all (13,061,586 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(135.86476630193,135.86476630193,153.715761219728)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>SNESSolve (6,849,076 us, 52.44%)</title><rect x="571.2" y="103" width="618.8" height="15.0" fill="rgb(147.84434934852,147.84434934852,108.784154535136)" rx="2" ry="2" />
<text  x="574.25" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (260,604 us, 2.00%)</title><rect x="10.1" y="87" width="23.6" height="15.0" fill="rgb(155.62008224104,139.753963847972,139.753963847972)" rx="2" ry="2" />
<text  x="13.13" y="97.5" >f..</text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,385 us, 0.07%)</title><rect x="570.4" y="119" width="0.8" height="15.0" fill="rgb(112.007450718291,146.076005741779,146.076005741779)" rx="2" ry="2" />
<text  x="573.40" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (4,691 us, 0.04%)</title><rect x="39.0" y="71" width="0.5" height="15.0" fill="rgb(110.177127426182,145.601477480862,145.601477480862)" rx="2" ry="2" />
<text  x="42.04" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (2,493 us, 0.02%)</title><rect x="568.4" y="103" width="0.2" height="15.0" fill="rgb(118.983684703828,118.983684703828,150.448455103967)" rx="2" ry="2" />
<text  x="571.41" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (37,109 us, 0.28%)</title><rect x="35.7" y="87" width="3.3" height="15.0" fill="rgb(140.55051741471,140.55051741471,154.622680789944)" rx="2" ry="2" />
<text  x="38.68" y="97.5" ></text>
</g>
<g >
<title>Mesh: numbering (1,974 us, 0.02%)</title><rect x="39.3" y="87" width="0.2" height="15.0" fill="rgb(154.918483811612,134.375042555695,134.375042555695)" rx="2" ry="2" />
<text  x="42.28" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (1,579 us, 0.01%)</title><rect x="1189.9" y="215" width="0.1" height="15.0" fill="rgb(152.317902518206,114.437252639579,114.437252639579)" rx="2" ry="2" />
<text  x="1192.86" y="225.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (15,593 us, 0.12%)</title><rect x="569.0" y="119" width="1.4" height="15.0" fill="rgb(124.788257392101,124.788257392101,151.571920785568)" rx="2" ry="2" />
<text  x="571.99" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (19,014 us, 0.15%)</title><rect x="1188.3" y="151" width="1.7" height="15.0" fill="rgb(108.011556471168,145.040033159192,145.040033159192)" rx="2" ry="2" />
<text  x="1191.28" y="161.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (16,088 us, 0.12%)</title><rect x="560.7" y="119" width="1.4" height="15.0" fill="rgb(152.638558656518,152.638558656518,132.017630412355)" rx="2" ry="2" />
<text  x="563.68" y="129.5" ></text>
</g>
</g>
</svg>
