<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="299" onload="init(evt)" viewBox="0 0 1200 299" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:13px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:18px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 13 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="299.0" fill="url(#background)"  />
<text id="title" x="600.00" y="26" >Firedrake example</text>
<text id="details" x="10.00" y="281" > </text>
<text id="unzoom" x="10.00" y="26" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="26" >Search</text>
<text id="ignorecase" x="1174.00" y="26" >ic</text>
<text id="matched" x="1090.00" y="281" > </text>
<g id="frames">
<g >
<title>perfsolve (797,733 us, 24.17%)</title><rect x="904.7" y="71" width="285.3" height="15.0" fill="rgb(115.435627150373,115.435627150373,149.761734287169)" rx="2" ry="2" />
<text  x="907.75" y="81.5" >perfsolve</text>
</g>
<g >
<title>SNESSolve (797,733 us, 24.17%)</title><rect x="904.7" y="103" width="285.3" height="15.0" fill="rgb(155.338222635012,155.338222635012,145.100617385058)" rx="2" ry="2" />
<text  x="907.75" y="113.5" >SNESSolve</text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (524 us, 0.02%)</title><rect x="1189.8" y="231" width="0.2" height="15.0" fill="rgb(130.589314862583,130.589314862583,152.694706102435)" rx="2" ry="2" />
<text  x="1192.81" y="241.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalProblem.__init__ (10,517 us, 0.32%)</title><rect x="897.3" y="87" width="3.7" height="15.0" fill="rgb(138.889192697272,138.889192697272,154.30113407044)" rx="2" ry="2" />
<text  x="900.28" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (2,723 us, 0.08%)</title><rect x="891.4" y="151" width="1.0" height="15.0" fill="rgb(144.249113464883,160.238516412693,144.249113464883)" rx="2" ry="2" />
<text  x="894.38" y="161.5" ></text>
</g>
<g >
<title>firedrake.variational_solver.LinearVariationalProblem.__init__ (22,265 us, 0.67%)</title><rect x="893.1" y="71" width="7.9" height="15.0" fill="rgb(155.40679841324,138.118787834842,138.118787834842)" rx="2" ry="2" />
<text  x="896.08" y="81.5" ></text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (69,019 us, 2.09%)</title><rect x="25.1" y="135" width="24.7" height="15.0" fill="rgb(149.163243871034,159.438541695413,149.163243871034)" rx="2" ry="2" />
<text  x="28.12" y="145.5" >p..</text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (34,384 us, 1.04%)</title><rect x="1177.7" y="135" width="12.3" height="15.0" fill="rgb(116.798884473936,147.318229308057,147.318229308057)" rx="2" ry="2" />
<text  x="1180.71" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.split (3,784 us, 0.11%)</title><rect x="1188.6" y="167" width="1.4" height="15.0" fill="rgb(113.547840754876,113.547840754876,149.396356275137)" rx="2" ry="2" />
<text  x="1191.65" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspace.MixedFunctionSpace (1,076 us, 0.03%)</title><rect x="889.7" y="71" width="0.4" height="15.0" fill="rgb(141.962016679506,160.610834494034,141.962016679506)" rx="2" ry="2" />
<text  x="892.69" y="81.5" ></text>
</g>
<g >
<title>SNESFunctionEval (797,733 us, 24.17%)</title><rect x="904.7" y="119" width="285.3" height="15.0" fill="rgb(154.285978827511,154.285978827511,140.001282010244)" rx="2" ry="2" />
<text  x="907.75" y="129.5" >SNESFunctionEval</text>
</g>
<g >
<title>firedrake.__init__ (2,322,815 us, 70.39%)</title><rect x="59.1" y="71" width="830.6" height="15.0" fill="rgb(121.744051992977,121.744051992977,150.982719740576)" rx="2" ry="2" />
<text  x="62.11" y="81.5" >firedrake.__init__</text>
</g>
<g >
<title>CreateFunctionSpace (6,425 us, 0.19%)</title><rect x="49.8" y="103" width="2.3" height="15.0" fill="rgb(139.879257500744,160.949888313832,139.879257500744)" rx="2" ry="2" />
<text  x="52.80" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh.ExtrudedMeshTopology.__init__ (843 us, 0.03%)</title><rect x="52.1" y="87" width="0.3" height="15.0" fill="rgb(131.921481407338,151.238902587088,151.238902587088)" rx="2" ry="2" />
<text  x="55.10" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (476 us, 0.01%)</title><rect x="889.9" y="87" width="0.2" height="15.0" fill="rgb(147.1619420241,159.764335019333,147.1619420241)" rx="2" ry="2" />
<text  x="892.91" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (474 us, 0.01%)</title><rect x="53.0" y="87" width="0.1" height="15.0" fill="rgb(151.560655047995,151.560655047995,126.793943694131)" rx="2" ry="2" />
<text  x="55.97" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (11,343 us, 0.34%)</title><rect x="893.2" y="87" width="4.1" height="15.0" fill="rgb(118.515754054308,147.763343643709,147.763343643709)" rx="2" ry="2" />
<text  x="896.22" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,425 us, 0.19%)</title><rect x="49.8" y="119" width="2.3" height="15.0" fill="rgb(152.864361638698,118.626772563353,118.626772563353)" rx="2" ry="2" />
<text  x="52.80" y="129.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.ExtractSubBlock.argument (1,606 us, 0.05%)</title><rect x="1189.4" y="183" width="0.6" height="15.0" fill="rgb(143.553515874711,143.553515874711,155.203906298331)" rx="2" ry="2" />
<text  x="1192.43" y="193.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,365 us, 0.19%)</title><rect x="890.1" y="119" width="2.3" height="15.0" fill="rgb(154.680826561591,132.553003638867,132.553003638867)" rx="2" ry="2" />
<text  x="893.08" y="129.5" ></text>
</g>
<g >
<title>firedrake (3,299,996 us, 100.00%)</title><rect x="10.0" y="55" width="1180.0" height="15.0" fill="rgb(146.827550819059,155.103439101238,155.103439101238)" rx="2" ry="2" />
<text  x="13.00" y="65.5" >firedrake</text>
</g>
<g >
<title>CreateMesh (2,440 us, 0.07%)</title><rect x="57.9" y="71" width="0.9" height="15.0" fill="rgb(155.929590584528,142.126861148049,142.126861148049)" rx="2" ry="2" />
<text  x="60.88" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (12,848 us, 0.39%)</title><rect x="53.3" y="103" width="4.6" height="15.0" fill="rgb(150.197537248741,150.197537248741,120.188065128514)" rx="2" ry="2" />
<text  x="56.29" y="113.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_pyop2_kernel_uniform_extrusion (69,653 us, 2.11%)</title><rect x="24.9" y="119" width="24.9" height="15.0" fill="rgb(144.79935371328,124.173343890281,144.79935371328)" rx="2" ry="2" />
<text  x="27.89" y="129.5" >P..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.solve (797,733 us, 24.17%)</title><rect x="904.7" y="87" width="285.3" height="15.0" fill="rgb(141.143296896927,141.143296896927,154.737412302631)" rx="2" ry="2" />
<text  x="907.75" y="97.5" >firedrake.variational_solver.Nonlin..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (12,848 us, 0.39%)</title><rect x="53.3" y="119" width="4.6" height="15.0" fill="rgb(154.778369746114,133.300834720211,133.300834720211)" rx="2" ry="2" />
<text  x="56.29" y="129.5" ></text>
</g>
<g >
<title>firedrake.extrusion_utils.make_extruded_coords (110,709 us, 3.35%)</title><rect x="10.2" y="87" width="39.6" height="15.0" fill="rgb(153.273427143431,153.273427143431,135.094300772012)" rx="2" ry="2" />
<text  x="13.21" y="97.5" >fir..</text>
</g>
<g >
<title>pyop2.global_kernel.GlobalKernel.compile (763,349 us, 23.13%)</title><rect x="904.7" y="167" width="273.0" height="15.0" fill="rgb(147.000006043416,155.14814971496,155.14814971496)" rx="2" ry="2" />
<text  x="907.75" y="177.5" >pyop2.global_kernel.GlobalKernel...</text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (802 us, 0.02%)</title><rect x="892.1" y="167" width="0.3" height="15.0" fill="rgb(134.018314367854,161.903995335466,134.018314367854)" rx="2" ry="2" />
<text  x="895.07" y="177.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (6,365 us, 0.19%)</title><rect x="890.1" y="103" width="2.3" height="15.0" fill="rgb(141.865340873141,153.81694022637,153.81694022637)" rx="2" ry="2" />
<text  x="893.08" y="113.5" ></text>
</g>
<g >
<title>PetscBarrier (991 us, 0.03%)</title><rect x="58.8" y="71" width="0.3" height="15.0" fill="rgb(150.919042316451,150.919042316451,123.684589687416)" rx="2" ry="2" />
<text  x="61.76" y="81.5" ></text>
</g>
<g >
<title>ParLoopExecute (763,349 us, 23.13%)</title><rect x="904.7" y="135" width="273.0" height="15.0" fill="rgb(155.119873458636,135.919029849543,135.919029849543)" rx="2" ry="2" />
<text  x="907.75" y="145.5" >ParLoopExecute</text>
</g>
<g >
<title>CreateFunctionSpace (1,198 us, 0.04%)</title><rect x="1189.6" y="199" width="0.4" height="15.0" fill="rgb(135.998959660833,161.581564706376,135.998959660833)" rx="2" ry="2" />
<text  x="1192.57" y="209.5" ></text>
</g>
<g >
<title>firedrake.function.Function.split (887 us, 0.03%)</title><rect x="900.7" y="119" width="0.3" height="15.0" fill="rgb(155.586969004417,139.500095700528,139.500095700528)" rx="2" ry="2" />
<text  x="903.72" y="129.5" ></text>
</g>
<g >
<title>firedrake.matrix_free.operators.ImplicitMatrixContext.__init__ (8,786 us, 0.27%)</title><rect x="901.6" y="103" width="3.1" height="15.0" fill="rgb(149.069245420378,149.069245420378,114.720189344909)" rx="2" ry="2" />
<text  x="904.61" y="113.5" ></text>
</g>
<g >
<title>all (3,299,996 us, 100%)</title><rect x="10.0" y="39" width="1180.0" height="15.0" fill="rgb(127.753948242547,150.158431025845,150.158431025845)" rx="2" ry="2" />
<text  x="13.00" y="49.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (524 us, 0.02%)</title><rect x="1189.8" y="215" width="0.2" height="15.0" fill="rgb(138.58179180699,161.161103659327,138.58179180699)" rx="2" ry="2" />
<text  x="1192.81" y="225.5" ></text>
</g>
<g >
<title>firedrake.mesh.make_mesh_from_coordinates (985 us, 0.03%)</title><rect x="52.4" y="87" width="0.4" height="15.0" fill="rgb(152.756228552108,117.797752232825,117.797752232825)" rx="2" ry="2" />
<text  x="55.40" y="97.5" ></text>
</g>
<g >
<title>CreateExtMesh (119,557 us, 3.62%)</title><rect x="10.0" y="71" width="42.8" height="15.0" fill="rgb(144.733009422953,124.003336646318,144.733009422953)" rx="2" ry="2" />
<text  x="13.00" y="81.5" >Cre..</text>
</g>
<g >
<title>CreateFunctionSpace (14,358 us, 0.44%)</title><rect x="52.8" y="71" width="5.1" height="15.0" fill="rgb(108.048284453272,145.049555228626,145.049555228626)" rx="2" ry="2" />
<text  x="55.75" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (3,096 us, 0.09%)</title><rect x="903.6" y="119" width="1.1" height="15.0" fill="rgb(137.942653822715,106.603050420708,137.942653822715)" rx="2" ry="2" />
<text  x="906.64" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (2,017 us, 0.06%)</title><rect x="892.4" y="71" width="0.7" height="15.0" fill="rgb(145.833834896395,145.833834896395,155.645258367044)" rx="2" ry="2" />
<text  x="895.36" y="81.5" ></text>
</g>
<g >
<title>Mesh: numbering (894 us, 0.03%)</title><rect x="58.4" y="87" width="0.4" height="15.0" fill="rgb(140.510525935222,140.510525935222,154.614940503591)" rx="2" ry="2" />
<text  x="61.44" y="97.5" ></text>
</g>
<g >
<title>ParLoopExecute (70,084 us, 2.12%)</title><rect x="24.7" y="103" width="25.1" height="15.0" fill="rgb(142.617965623354,160.504052107826,142.617965623354)" rx="2" ry="2" />
<text  x="27.74" y="113.5" >P..</text>
</g>
<g >
<title>CreateMesh (747 us, 0.02%)</title><rect x="58.2" y="87" width="0.2" height="15.0" fill="rgb(104.176611933422,144.045788279035,144.045788279035)" rx="2" ry="2" />
<text  x="61.17" y="97.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.adjoint (9,630 us, 0.29%)</title><rect x="897.3" y="103" width="3.4" height="15.0" fill="rgb(132.8852198741,93.6433759273805,132.8852198741)" rx="2" ry="2" />
<text  x="900.28" y="113.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (726 us, 0.02%)</title><rect x="892.8" y="103" width="0.3" height="15.0" fill="rgb(132.794675556419,162.103192351281,132.794675556419)" rx="2" ry="2" />
<text  x="895.82" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (13,261 us, 0.40%)</title><rect x="53.1" y="87" width="4.8" height="15.0" fill="rgb(152.883455736481,118.773160646353,118.773160646353)" rx="2" ry="2" />
<text  x="56.14" y="97.5" ></text>
</g>
<g >
<title>firedrake.mesh._Facets.__init__ (592 us, 0.02%)</title><rect x="51.9" y="167" width="0.2" height="15.0" fill="rgb(156.128071901675,143.648551246176,143.648551246176)" rx="2" ry="2" />
<text  x="54.89" y="177.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.action (5,286 us, 0.16%)</title><rect x="901.8" y="119" width="1.8" height="15.0" fill="rgb(147.892998315775,159.645325855572,147.892998315775)" rx="2" ry="2" />
<text  x="904.75" y="129.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (2,017 us, 0.06%)</title><rect x="892.4" y="87" width="0.7" height="15.0" fill="rgb(106.348795834787,144.608947068278,144.608947068278)" rx="2" ry="2" />
<text  x="895.36" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,425 us, 0.19%)</title><rect x="49.8" y="151" width="2.3" height="15.0" fill="rgb(142.978705694591,154.105590365264,154.105590365264)" rx="2" ry="2" />
<text  x="52.80" y="161.5" ></text>
</g>
<g >
<title>CreateMesh (539 us, 0.02%)</title><rect x="892.6" y="119" width="0.2" height="15.0" fill="rgb(120.316593404488,148.230227919682,148.230227919682)" rx="2" ry="2" />
<text  x="895.62" y="129.5" ></text>
</g>
<g >
<title>CreateMesh (539 us, 0.02%)</title><rect x="892.6" y="103" width="0.2" height="15.0" fill="rgb(114.418708638051,114.418708638051,149.5649113493)" rx="2" ry="2" />
<text  x="895.62" y="113.5" ></text>
</g>
<g >
<title>firedrake.assemble.allocate_matrix (8,786 us, 0.27%)</title><rect x="901.6" y="87" width="3.1" height="15.0" fill="rgb(143.263856453063,143.263856453063,155.147843184464)" rx="2" ry="2" />
<text  x="904.61" y="97.5" ></text>
</g>
<g >
<title>Parloop_Cells_wrap_form0_cell_integral_otherwise (763,349 us, 23.13%)</title><rect x="904.7" y="151" width="273.0" height="15.0" fill="rgb(138.255570229877,107.404898714061,138.255570229877)" rx="2" ry="2" />
<text  x="907.75" y="161.5" >Parloop_Cells_wrap_form0_cell_int..</text>
</g>
<g >
<title>firedrake.variational_solver.NonlinearVariationalSolver.__init__ (10,379 us, 0.31%)</title><rect x="901.0" y="71" width="3.7" height="15.0" fill="rgb(149.162799861443,159.438613976044,149.162799861443)" rx="2" ry="2" />
<text  x="904.04" y="81.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (6,425 us, 0.19%)</title><rect x="49.8" y="135" width="2.3" height="15.0" fill="rgb(127.301114205299,150.041029608781,150.041029608781)" rx="2" ry="2" />
<text  x="52.80" y="145.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,365 us, 0.19%)</title><rect x="890.1" y="71" width="2.3" height="15.0" fill="rgb(155.633745714481,139.858717144355,139.858717144355)" rx="2" ry="2" />
<text  x="893.08" y="81.5" ></text>
</g>
<g >
<title>firedrake.ufl_expr.derivative (887 us, 0.03%)</title><rect x="900.7" y="103" width="0.3" height="15.0" fill="rgb(117.158540718166,147.411473519524,147.411473519524)" rx="2" ry="2" />
<text  x="903.72" y="113.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (6,425 us, 0.19%)</title><rect x="49.8" y="87" width="2.3" height="15.0" fill="rgb(113.112579507322,146.362520613009,146.362520613009)" rx="2" ry="2" />
<text  x="52.80" y="97.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (524 us, 0.02%)</title><rect x="1189.8" y="247" width="0.2" height="15.0" fill="rgb(155.468287786334,138.590206361893,138.590206361893)" rx="2" ry="2" />
<text  x="1192.81" y="257.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (6,365 us, 0.19%)</title><rect x="890.1" y="135" width="2.3" height="15.0" fill="rgb(126.121993094579,163.189442984603,126.121993094579)" rx="2" ry="2" />
<text  x="893.08" y="145.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (6,420 us, 0.19%)</title><rect x="1187.7" y="151" width="2.3" height="15.0" fill="rgb(148.789352096354,148.789352096354,113.363783236179)" rx="2" ry="2" />
<text  x="1190.70" y="161.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (6,365 us, 0.19%)</title><rect x="890.1" y="87" width="2.3" height="15.0" fill="rgb(140.017011765214,160.927463201012,140.017011765214)" rx="2" ry="2" />
<text  x="893.08" y="97.5" ></text>
</g>
</g>
</svg>
