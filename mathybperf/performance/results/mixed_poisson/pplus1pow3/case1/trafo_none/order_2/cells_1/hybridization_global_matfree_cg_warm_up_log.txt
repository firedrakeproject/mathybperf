Read args from shell script:  Namespace(name='results/mixed_poisson/pplus1pow3//case1/trafo_none/order_2/cells_1/hybridization_global_matfree_cg_warm_up', parameters='hybridization_global_matfree_cg', p=2, gtmg_levels=2, quadrilateral=True, scaling=2.0, deform=0.0, trafo='none', c=1, exact_sol_type='exponential', add_to_quad_degree=[0, 0], projectexactsol=True, log_view=':flames/mixed_poisson/pplus1pow3//case1/trafo_none/order_2/cells_1/hybridization_global_matfree_cg_warm_up_flame.txt:ascii_flamegraph', clean=True, verification=False)

Running:  warm_up

with params:  hybridization_global_matfree_cg

    Residual norms for firedrake_0_ solve.
    0 KSP Residual norm 7.183612565339e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 1.413752659261e+00 
      1 KSP Residual norm 1.799945818345e+00 
      2 KSP Residual norm 1.927652391154e+00 
      3 KSP Residual norm 2.036891442000e+00 
      4 KSP Residual norm 1.330606592338e+00 
      5 KSP Residual norm 5.681621811377e-01 
      6 KSP Residual norm 5.449446283247e-01 
      7 KSP Residual norm 4.101404279580e-01 
      8 KSP Residual norm 3.304979818383e-01 
      9 KSP Residual norm 2.157360433641e-01 
     10 KSP Residual norm 1.039495321980e-01 
     11 KSP Residual norm 8.834818414668e-02 
     12 KSP Residual norm 6.403091460210e-02 
     13 KSP Residual norm 4.357674865512e-02 
     14 KSP Residual norm 1.930111777374e-02 
     15 KSP Residual norm 1.248717092850e-02 
     16 KSP Residual norm 5.224480998226e-03 
     17 KSP Residual norm 5.121337969442e-03 
     18 KSP Residual norm 3.025417086869e-03 
     19 KSP Residual norm 1.824998527556e-03 
     20 KSP Residual norm 1.073449705483e-03 
     21 KSP Residual norm 6.783927784420e-04 
     22 KSP Residual norm 3.198994409916e-04 
     23 KSP Residual norm 2.741831419626e-04 
     24 KSP Residual norm 1.587501443505e-04 
     25 KSP Residual norm 9.647647355729e-05 
     26 KSP Residual norm 5.249464536443e-05 
     27 KSP Residual norm 2.860202209464e-05 
     28 KSP Residual norm 1.711654947614e-05 
     29 KSP Residual norm 1.467237207536e-05 
     30 KSP Residual norm 7.935565036043e-06 
     31 KSP Residual norm 5.051268069738e-06 
     32 KSP Residual norm 2.603726729734e-06 
     33 KSP Residual norm 1.829226061940e-06 
     34 KSP Residual norm 9.771238514335e-07 
     35 KSP Residual norm 5.569890074095e-07 
     36 KSP Residual norm 2.840536395167e-07 
     37 KSP Residual norm 1.688198028082e-07 
     38 KSP Residual norm 7.555086148440e-08 
     39 KSP Residual norm 5.709787230891e-08 
     40 KSP Residual norm 3.826702343703e-08 
     41 KSP Residual norm 2.646996490045e-08 
     42 KSP Residual norm 1.308016172426e-08 
     43 KSP Residual norm 7.744579087057e-09 
     44 KSP Residual norm 4.043124111435e-09 
     45 KSP Residual norm 2.506044565705e-09 
     46 KSP Residual norm 1.497096246721e-09 
     47 KSP Residual norm 7.278792580173e-10 
     48 KSP Residual norm 4.132787076742e-10 
     49 KSP Residual norm 2.041323136206e-10 
     50 KSP Residual norm 8.622983732880e-11 
     51 KSP Residual norm 5.233375840655e-11 
     52 KSP Residual norm 2.866900709093e-11 
     53 KSP Residual norm 1.671107628056e-11 
     54 KSP Residual norm 8.486807130711e-12 
    1 KSP Residual norm 2.998203577237e-11 
KSP Object: (firedrake_0_) 1 MPI processes
  type: fgmres
    restart=30, using Classical (unmodified) Gram-Schmidt Orthogonalization with no iterative refinement
    happy breakdown tolerance 1e-30
  maximum iterations=2, initial guess is zero
  tolerances:  relative=1e-09, absolute=1e-90, divergence=10000.
  right preconditioning
  using UNPRECONDITIONED norm type for convergence test
PC Object: (firedrake_0_) 1 MPI processes
  type: python
    Python: firedrake.HybridizationPC
  Firedrake custom preconditioner HybridizationPC
  Applying hybridization to mixed problem.
  Statically condensing to trace system.
  KSP solver for the multipliers:
  KSP Object: (firedrake_0_hybridization_) 1 MPI processes
    type: cg
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-11, absolute=1e-90, divergence=10000.
    left preconditioning
    using PRECONDITIONED norm type for convergence test
  PC Object: (firedrake_0_hybridization_) 1 MPI processes
    type: python
      Python: firedrake.AssembledPC
    Firedrake custom preconditioner AssembledPC
    PC to apply inverse
    PC Object: (firedrake_0_hybridization_assembled_) 1 MPI processes
      type: jacobi
        type DIAGONAL
      linear system matrix = precond matrix:
      Mat Object: (firedrake_0_hybridization_assembled_) 1 MPI processes
        type: seqaij
        rows=2160, cols=2160
        total: nonzeros=174960, allocated nonzeros=174960
        total number of mallocs used during MatSetValues calls=0
          using I-node routines: found 480 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: (firedrake_0_hybridization_) 1 MPI processes
      type: python
      rows=2160, cols=2160
          Python: firedrake.matrix_free.operators.ImplicitMatrixContext
        Firedrake matrix-free operator ImplicitMatrixContext
  Locally reconstructing solutions.
  Projecting broken flux into HDiv space.
  linear system matrix = precond matrix:
  Mat Object: (firedrake_0_) 1 MPI processes
    type: python
    rows=7344, cols=7344
        Python: firedrake.matrix_free.operators.ImplicitMatrixContext
      Firedrake matrix-free operator ImplicitMatrixContext
TIMING 157.7917721271515
Solved succesfully.
before M_0 * (M_1).inv * AV_2
after M_0 * (M_1).solve(AV_2)
before M_0 * (M_1).inv * M_3
after M_0 * (M_1).inv * M_3
before M_0 * (M_1).inv * M_3 * AV_4
after M_0 * (M_1).solve(M_3 * AV_4)
before (M_5 + -(M_6 * (M_7).inv * M_8)).solve(AV_9 + -(M_6 * (M_7).inv * AV_10) + -(((M_11).T + -(M_6 * (M_7).inv * (M_12).T)) * AV_13))
after (M_5 + -(M_6 * (M_7).inv * M_8)).solve(AV_9 + -(M_6 * (M_7).solve(AV_10)) + -(((AV_13).T * M_11).T + -(M_6 * (M_7).solve(((AV_13).T * M_12).T))))
before (M_7).solve(AV_10 + -(M_8 * AV_14) + -((M_12).T * AV_13))
after (M_7).solve(AV_10 + -(M_8 * AV_14) + -((AV_13).T * M_12).T)
