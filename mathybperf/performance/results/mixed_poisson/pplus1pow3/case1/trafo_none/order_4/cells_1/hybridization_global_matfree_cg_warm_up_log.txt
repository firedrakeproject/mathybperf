Read args from shell script:  Namespace(name='results/mixed_poisson/pplus1pow3//case1/trafo_none/order_4/cells_1/hybridization_global_matfree_cg_warm_up', parameters='hybridization_global_matfree_cg', p=4, gtmg_levels=2, quadrilateral=True, scaling=2.0, deform=0.0, trafo='none', c=1, exact_sol_type='exponential', add_to_quad_degree=[0, 0], projectexactsol=True, log_view=':flames/mixed_poisson/pplus1pow3//case1/trafo_none/order_4/cells_1/hybridization_global_matfree_cg_warm_up_flame.txt:ascii_flamegraph', clean=True, verification=False)

Running:  warm_up

with params:  hybridization_global_matfree_cg

    Residual norms for firedrake_0_ solve.
    0 KSP Residual norm 3.637502602340e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 1.513698809832e+00 
      1 KSP Residual norm 4.195169237057e+00 
      2 KSP Residual norm 4.650369399051e+00 
      3 KSP Residual norm 4.983498201572e+00 
      4 KSP Residual norm 3.659476333702e+00 
      5 KSP Residual norm 4.451750950081e+00 
      6 KSP Residual norm 4.998175031729e+00 
      7 KSP Residual norm 3.049804742896e+00 
      8 KSP Residual norm 2.256388889888e+00 
      9 KSP Residual norm 2.028770585442e+00 
     10 KSP Residual norm 1.566552643837e+00 
     11 KSP Residual norm 1.561917682242e+00 
     12 KSP Residual norm 1.410273284315e+00 
     13 KSP Residual norm 1.574125511137e+00 
     14 KSP Residual norm 1.160381513811e+00 
     15 KSP Residual norm 8.955592518679e-01 
     16 KSP Residual norm 9.080832557806e-01 
     17 KSP Residual norm 8.591952057669e-01 
     18 KSP Residual norm 6.779278050430e-01 
     19 KSP Residual norm 5.881333000512e-01 
     20 KSP Residual norm 5.535976174925e-01 
     21 KSP Residual norm 4.887186085875e-01 
     22 KSP Residual norm 4.001325706870e-01 
     23 KSP Residual norm 2.101656159843e-01 
     24 KSP Residual norm 2.273861595453e-01 
     25 KSP Residual norm 1.966329659005e-01 
     26 KSP Residual norm 1.787034470284e-01 
     27 KSP Residual norm 1.796493938438e-01 
     28 KSP Residual norm 1.418989255873e-01 
     29 KSP Residual norm 1.249345878739e-01 
     30 KSP Residual norm 7.306169262861e-02 
     31 KSP Residual norm 6.611578283917e-02 
     32 KSP Residual norm 4.903363623882e-02 
     33 KSP Residual norm 3.674475373348e-02 
     34 KSP Residual norm 2.861674245475e-02 
     35 KSP Residual norm 2.195973850719e-02 
     36 KSP Residual norm 1.563310532119e-02 
     37 KSP Residual norm 1.091347374408e-02 
     38 KSP Residual norm 9.002388963234e-03 
     39 KSP Residual norm 6.373635255054e-03 
     40 KSP Residual norm 4.600402580553e-03 
     41 KSP Residual norm 2.625594420492e-03 
     42 KSP Residual norm 1.893700881391e-03 
     43 KSP Residual norm 1.843361902917e-03 
     44 KSP Residual norm 1.188676654114e-03 
     45 KSP Residual norm 9.808963715740e-04 
     46 KSP Residual norm 6.380847099498e-04 
     47 KSP Residual norm 5.761777697666e-04 
     48 KSP Residual norm 3.920194292052e-04 
     49 KSP Residual norm 3.311969677333e-04 
     50 KSP Residual norm 2.397215324144e-04 
     51 KSP Residual norm 1.743915989294e-04 
     52 KSP Residual norm 1.488953469355e-04 
     53 KSP Residual norm 1.158677007811e-04 
     54 KSP Residual norm 8.332031914642e-05 
     55 KSP Residual norm 4.617741947309e-05 
     56 KSP Residual norm 3.196344294625e-05 
     57 KSP Residual norm 2.915228924498e-05 
     58 KSP Residual norm 2.301094067897e-05 
     59 KSP Residual norm 1.159877894353e-05 
     60 KSP Residual norm 9.725164767177e-06 
     61 KSP Residual norm 6.025713824688e-06 
     62 KSP Residual norm 4.172777755373e-06 
     63 KSP Residual norm 4.019426387130e-06 
     64 KSP Residual norm 2.473693201458e-06 
     65 KSP Residual norm 1.538602698710e-06 
     66 KSP Residual norm 1.354906800709e-06 
     67 KSP Residual norm 9.500800236189e-07 
     68 KSP Residual norm 9.551740784121e-07 
     69 KSP Residual norm 6.557417103649e-07 
     70 KSP Residual norm 3.678804021958e-07 
     71 KSP Residual norm 3.230202513506e-07 
     72 KSP Residual norm 2.431275196431e-07 
     73 KSP Residual norm 1.582646787682e-07 
     74 KSP Residual norm 1.141200191082e-07 
     75 KSP Residual norm 8.998849114760e-08 
     76 KSP Residual norm 6.195765609171e-08 
     77 KSP Residual norm 4.644314790781e-08 
     78 KSP Residual norm 2.353022529428e-08 
     79 KSP Residual norm 1.889650925275e-08 
     80 KSP Residual norm 1.302885325570e-08 
     81 KSP Residual norm 9.984664599864e-09 
     82 KSP Residual norm 7.011895819992e-09 
     83 KSP Residual norm 6.237354489434e-09 
     84 KSP Residual norm 4.220595214945e-09 
     85 KSP Residual norm 3.191696174812e-09 
     86 KSP Residual norm 2.217511517885e-09 
     87 KSP Residual norm 1.630641675157e-09 
     88 KSP Residual norm 1.172884235147e-09 
     89 KSP Residual norm 6.387465165228e-10 
     90 KSP Residual norm 5.225746288069e-10 
     91 KSP Residual norm 3.242078423050e-10 
     92 KSP Residual norm 2.235710376456e-10 
     93 KSP Residual norm 1.860044259472e-10 
     94 KSP Residual norm 1.032097737523e-10 
     95 KSP Residual norm 8.346393387774e-11 
     96 KSP Residual norm 5.703783243092e-11 
     97 KSP Residual norm 4.868141325921e-11 
     98 KSP Residual norm 3.024595771889e-11 
     99 KSP Residual norm 2.289010936350e-11 
    100 KSP Residual norm 1.447596393728e-11 
    1 KSP Residual norm 1.453830926679e-11 
KSP Object: (firedrake_0_) 1 MPI processes
  type: fgmres
    restart=30, using Classical (unmodified) Gram-Schmidt Orthogonalization with no iterative refinement
    happy breakdown tolerance 1e-30
  maximum iterations=2, initial guess is zero
  tolerances:  relative=1e-09, absolute=1e-90, divergence=10000.
  right preconditioning
  using UNPRECONDITIONED norm type for convergence test
PC Object: (firedrake_0_) 1 MPI processes
  type: python
    Python: firedrake.HybridizationPC
  Firedrake custom preconditioner HybridizationPC
  Applying hybridization to mixed problem.
  Statically condensing to trace system.
  KSP solver for the multipliers:
  KSP Object: (firedrake_0_hybridization_) 1 MPI processes
    type: cg
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-11, absolute=1e-90, divergence=10000.
    left preconditioning
    using PRECONDITIONED norm type for convergence test
  PC Object: (firedrake_0_hybridization_) 1 MPI processes
    type: python
      Python: firedrake.AssembledPC
    Firedrake custom preconditioner AssembledPC
    PC to apply inverse
    PC Object: (firedrake_0_hybridization_assembled_) 1 MPI processes
      type: jacobi
        type DIAGONAL
      linear system matrix = precond matrix:
      Mat Object: (firedrake_0_hybridization_assembled_) 1 MPI processes
        type: seqaij
        rows=6000, cols=6000
        total: nonzeros=1350000, allocated nonzeros=1350000
        total number of mallocs used during MatSetValues calls=0
          using I-node routines: found 1200 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: (firedrake_0_hybridization_) 1 MPI processes
      type: python
      rows=6000, cols=6000
          Python: firedrake.matrix_free.operators.ImplicitMatrixContext
        Firedrake matrix-free operator ImplicitMatrixContext
  Locally reconstructing solutions.
  Projecting broken flux into HDiv space.
  linear system matrix = precond matrix:
  Mat Object: (firedrake_0_) 1 MPI processes
    type: python
    rows=33200, cols=33200
        Python: firedrake.matrix_free.operators.ImplicitMatrixContext
      Firedrake matrix-free operator ImplicitMatrixContext
TIMING 330.44433975219727
Solved succesfully.
before M_0 * (M_1).inv * AV_2
after M_0 * (M_1).solve(AV_2)
before M_0 * (M_1).inv * M_3
after M_0 * (M_1).inv * M_3
before M_0 * (M_1).inv * M_3 * AV_4
after M_0 * (M_1).solve(M_3 * AV_4)
before (M_5 + -(M_6 * (M_7).inv * M_8)).solve(AV_9 + -(M_6 * (M_7).inv * AV_10) + -(((M_11).T + -(M_6 * (M_7).inv * (M_12).T)) * AV_13))
after (M_5 + -(M_6 * (M_7).inv * M_8)).solve(AV_9 + -(M_6 * (M_7).solve(AV_10)) + -(((AV_13).T * M_11).T + -(M_6 * (M_7).solve(((AV_13).T * M_12).T))))
before (M_7).solve(AV_10 + -(M_8 * AV_14) + -((M_12).T * AV_13))
after (M_7).solve(AV_10 + -(M_8 * AV_14) + -((AV_13).T * M_12).T)
