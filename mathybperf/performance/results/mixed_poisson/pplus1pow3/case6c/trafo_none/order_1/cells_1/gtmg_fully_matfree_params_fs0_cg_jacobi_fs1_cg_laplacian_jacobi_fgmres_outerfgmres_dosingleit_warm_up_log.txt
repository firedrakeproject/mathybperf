Read args from shell script:  Namespace(name='results/mixed_poisson/pplus1pow3//case6c/trafo_none/order_1/cells_1/gtmg_fully_matfree_params_fs0_cg_jacobi_fs1_cg_laplacian_jacobi_fgmres_outerfgmres_dosingleit_warm_up', parameters='gtmg_fully_matfree_params_fs0_cg_jacobi_fs1_cg_laplacian_jacobi_fgmres_outerfgmres_dosingleit', p=1, gtmg_levels=2, quadrilateral=True, scaling=2.0, deform=0.0, trafo='none', c=1, exact_sol_type='exponential', add_to_quad_degree=[0, 0], projectexactsol=True, log_view=':flames/mixed_poisson/pplus1pow3//case6c/trafo_none/order_1/cells_1/gtmg_fully_matfree_params_fs0_cg_jacobi_fs1_cg_laplacian_jacobi_fgmres_outerfgmres_dosingleit_warm_up_flame.txt:ascii_flamegraph', clean=True, verification=False)

Running:  warm_up

with params:  gtmg_fully_matfree_params_fs0_cg_jacobi_fs1_cg_laplacian_jacobi_fgmres_outerfgmres_dosingleit

    Residual norms for firedrake_0_ solve.
    0 KSP Residual norm 1.215144980187e+01 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 7.325775130232e-01 
      1 KSP Residual norm 6.177072052252e-01 
    1 KSP Residual norm 8.831801355932e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.974283624387e-01 
      1 KSP Residual norm 5.073201759858e-01 
    2 KSP Residual norm 5.758766653341e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.610596181791e-01 
      1 KSP Residual norm 2.734931557669e-01 
    3 KSP Residual norm 2.232483383314e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.902788763236e-01 
      1 KSP Residual norm 5.438355736555e-01 
    4 KSP Residual norm 1.172235592919e+00 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.767941900110e-01 
      1 KSP Residual norm 3.054550241785e-01 
    5 KSP Residual norm 5.296556192377e-01 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.678175488412e-01 
      1 KSP Residual norm 2.582955929874e-01 
    6 KSP Residual norm 2.152691108312e-01 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.345824443880e-01 
      1 KSP Residual norm 3.923294228034e-01 
    7 KSP Residual norm 8.877062021768e-02 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 5.051921224776e-01 
      1 KSP Residual norm 2.442213963901e-01 
    8 KSP Residual norm 2.515497160052e-02 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.192509135197e-01 
      1 KSP Residual norm 2.302731036573e-01 
    9 KSP Residual norm 4.259581173631e-03 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.771001897973e-01 
      1 KSP Residual norm 2.531817485638e-01 
   10 KSP Residual norm 1.021703850797e-03 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.965447411135e-01 
      1 KSP Residual norm 2.303591204656e-01 
   11 KSP Residual norm 2.860426076227e-04 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.831867587392e-01 
      1 KSP Residual norm 2.987454313026e-01 
   12 KSP Residual norm 1.490291652616e-04 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.687386521962e-01 
      1 KSP Residual norm 1.934364426560e-01 
   13 KSP Residual norm 4.178776982137e-05 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.696975284184e-01 
      1 KSP Residual norm 1.807206089313e-01 
   14 KSP Residual norm 1.042952692786e-05 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.146724626946e-01 
      1 KSP Residual norm 2.735558251777e-01 
   15 KSP Residual norm 4.883353984965e-06 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.655884319579e-01 
      1 KSP Residual norm 2.201721957217e-01 
   16 KSP Residual norm 2.080927888562e-06 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.444120201777e-01 
      1 KSP Residual norm 2.255272632923e-01 
   17 KSP Residual norm 5.896004892317e-07 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.343374166674e-01 
      1 KSP Residual norm 2.017431019132e-01 
   18 KSP Residual norm 1.250757849876e-07 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.749068399427e-01 
      1 KSP Residual norm 2.450990953683e-01 
   19 KSP Residual norm 4.407778570839e-08 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 3.299081980271e-01 
      1 KSP Residual norm 2.347295488224e-01 
   20 KSP Residual norm 1.858146316263e-08 
      Residual norms for firedrake_0_hybridization_ solve.
      0 KSP Residual norm 4.438366520971e-01 
      1 KSP Residual norm 2.731468929338e-01 
   21 KSP Residual norm 6.330790833663e-09 
KSP Object: (firedrake_0_) 1 MPI processes
  type: fgmres
    restart=30, using Classical (unmodified) Gram-Schmidt Orthogonalization with no iterative refinement
    happy breakdown tolerance 1e-30
  maximum iterations=1000, initial guess is zero
  tolerances:  relative=1e-09, absolute=1e-90, divergence=10000.
  right preconditioning
  using UNPRECONDITIONED norm type for convergence test
PC Object: (firedrake_0_) 1 MPI processes
  type: python
    Python: firedrake.HybridizationPC
  Firedrake custom preconditioner HybridizationPC
  Applying hybridization to mixed problem.
  Statically condensing to trace system.
  KSP solver for the multipliers:
  KSP Object: (firedrake_0_hybridization_) 1 MPI processes
    type: cg
    maximum iterations=1, initial guess is zero
    tolerances:  relative=1e-11, absolute=1e-90, divergence=10000.
    left preconditioning
    using PRECONDITIONED norm type for convergence test
  PC Object: (firedrake_0_hybridization_) 1 MPI processes
    type: none
    linear system matrix = precond matrix:
    Mat Object: (firedrake_0_hybridization_) 1 MPI processes
      type: python
      rows=960, cols=960
          Python: firedrake.matrix_free.operators.ImplicitMatrixContext
        Firedrake matrix-free operator ImplicitMatrixContext
  Locally reconstructing solutions.
  Projecting broken flux into HDiv space.
  linear system matrix = precond matrix:
  Mat Object: (firedrake_0_) 1 MPI processes
    type: python
    rows=2240, cols=2240
        Python: firedrake.matrix_free.operators.ImplicitMatrixContext
      Firedrake matrix-free operator ImplicitMatrixContext
TIMING 420.9258005619049
Solved succesfully.
before (M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv + -((-M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2 + M_3) * (((M_4).diag).inv * (M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2))).inv * ((M_4).diag).inv * M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv)) * AV_7 + (-M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2 + M_3) * (((M_4).diag).inv * (M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2))).inv * ((M_4).diag).inv * AV_8
after Action(M_0, (M_1).matf_solve(AV_7, prec={{((M_1).diag).inv} -> {}})) + -(-Action(M_0, (M_1).matf_solve(Action(M_2, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_6, (M_1).matf_solve(AV_7, prec={{((M_1).diag).inv} -> {}})), prec={{((M_4).diag).inv} -> {}})), prec={{((M_1).diag).inv} -> {}})) + Action(M_3, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_6, (M_1).matf_solve(AV_7, prec={{((M_1).diag).inv} -> {}})), prec={{((M_4).diag).inv} -> {}}))) + -Action(M_0, (M_1).matf_solve(Action(M_2, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(AV_8, prec={{((M_4).diag).inv} -> {}})), prec={{((M_1).diag).inv} -> {}})) + Action(M_3, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(AV_8, prec={{((M_4).diag).inv} -> {}}))
before ((M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv + -((-M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2 + M_3) * (((M_4).diag).inv * (M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2))).inv * ((M_4).diag).inv * M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv)) * M_9 + (-M_0 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2 + M_3) * (((M_4).diag).inv * (M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2))).inv * ((M_4).diag).inv * M_10) * AV_11
after Action(M_0, (M_1).matf_solve(Action(M_9, AV_11), prec={{((M_1).diag).inv} -> {}})) + -(-Action(M_0, (M_1).matf_solve(Action(M_2, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_6, (M_1).matf_solve(Action(M_9, AV_11), prec={{((M_1).diag).inv} -> {}})), prec={{((M_4).diag).inv} -> {}})), prec={{((M_1).diag).inv} -> {}})) + Action(M_3, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_6, (M_1).matf_solve(Action(M_9, AV_11), prec={{((M_1).diag).inv} -> {}})), prec={{((M_4).diag).inv} -> {}}))) + -Action(M_0, (M_1).matf_solve(Action(M_2, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_10, AV_11), prec={{((M_4).diag).inv} -> {}})), prec={{((M_1).diag).inv} -> {}})) + Action(M_3, ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(Action(M_10, AV_11), prec={{((M_4).diag).inv} -> {}}))
before (((M_4).diag).inv * (M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2))).inv * ((M_4).diag).inv * (AV_12 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * AV_13) + -(((M_3).T + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * (M_0).T)) * AV_14))
after ({{M_5 + -(M_6 * (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * M_2)} -> {}}).matf_solve(AV_12 + -Action(M_6, (M_1).matf_solve(AV_13, prec={{((M_1).diag).inv} -> {}})) + -((Action(M_3, (AV_14).T)).T + -Action(M_6, (M_1).matf_solve((Action(M_0, (AV_14).T)).T, prec={{((M_1).diag).inv} -> {}}))), prec={{((M_4).diag).inv} -> {}})
before (((M_1).diag).inv * M_1).inv * ((M_1).diag).inv * (AV_13 + -(M_2 * AV_15) + -((M_0).T * AV_14))
after (M_1).matf_solve(AV_13 + -Action(M_2, AV_15) + -(Action(M_0, (AV_14).T)).T, prec={{((M_1).diag).inv} -> {}})
